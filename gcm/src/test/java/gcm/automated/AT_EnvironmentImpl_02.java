package gcm.automated;

import static gcm.automated.support.EnvironmentSupport.*;
import static gcm.automated.support.EnvironmentSupport.addStandardPeople;
import static gcm.automated.support.EnvironmentSupport.addStandardPropertyDefinitions;
import static gcm.automated.support.EnvironmentSupport.addStandardTrackingAndScenarioId;
import static gcm.automated.support.EnvironmentSupport.addTaskPlanContainer;
import static gcm.automated.support.EnvironmentSupport.assertAllPlansExecuted;
import static gcm.automated.support.EnvironmentSupport.getRandomGenerator;
import static gcm.automated.support.EnvironmentSupport.getReplication;
import static gcm.automated.support.ExceptionAssertion.assertModelException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.math3.random.RandomGenerator;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import gcm.automated.support.EnvironmentSupport;
import gcm.automated.support.EnvironmentSupport.PropertyAssignmentPolicy;
import gcm.automated.support.SeedProvider;
import gcm.automated.support.TaskComponent;
import gcm.automated.support.TaskPlanContainer;
import gcm.automated.support.TestCompartmentId;
import gcm.automated.support.TestGlobalComponentId;
import gcm.automated.support.TestMaterialId;
import gcm.automated.support.TestMaterialsProducerId;
import gcm.automated.support.TestResourceId;
import gcm.replication.Replication;
import gcm.scenario.BatchId;
import gcm.scenario.BatchPropertyId;
import gcm.scenario.MapOption;
import gcm.scenario.MaterialId;
import gcm.scenario.PropertyDefinition;
import gcm.scenario.ResourceId;
import gcm.scenario.Scenario;
import gcm.scenario.ScenarioBuilder;
import gcm.scenario.ScenarioId;
import gcm.scenario.StageId;
import gcm.scenario.TimeTrackingPolicy;
import gcm.scenario.UnstructuredScenarioBuilder;
import gcm.simulation.BatchConstructionInfo;
import gcm.simulation.BatchConstructionInfo.Builder;
import gcm.simulation.EnvironmentImpl;
import gcm.simulation.Simulation;
import gcm.simulation.SimulationErrorType;
import gcm.util.annotations.UnitTest;
import gcm.util.annotations.UnitTestMethod;

@UnitTest(target = EnvironmentImpl.class)

public class AT_EnvironmentImpl_02 {

	private static SeedProvider SEED_PROVIDER;

	@BeforeAll
	public static void beforeClass() {
		SEED_PROVIDER = new SeedProvider(EnvironmentSupport.getMetaSeed(2));
	}

	/**
	 * Internal test(not part of public tests) to show that there are no large gaps
	 * in the seed cases generated by the SeedProvider.
	 */
	@AfterAll
	public static void afterClass() {
		// System.out.println(SEED_PROVIDER.generateUnusedSeedReport());
	}

	/**
	 * Tests
	 * {@link EnvironmentImpl#convertStageToBatch(StageId, MaterialId, double)}
	 */
	@Test
	@UnitTestMethod(name = "convertStageToBatch", args = { StageId.class, MaterialId.class, double.class })
	public void testConvertStageToBatch() {
		/*
		 * Show that we convert a stage to a batch, with the stage and its batches being
		 * removed from the simulation.
		 */

		final long seed = SEED_PROVIDER.getSeedValue(0);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {

			final BatchId batchId1 = environment.createBatch(TestMaterialId.MATERIAL_1, 10);
			final BatchId batchId2 = environment.createBatch(TestMaterialId.MATERIAL_2, 7);
			final BatchId batchId3 = environment.createBatch(TestMaterialId.MATERIAL_3, 7);
			final StageId stageId = environment.createStage();
			environment.moveBatchToStage(batchId1, stageId);
			environment.moveBatchToStage(batchId2, stageId);
			final BatchId batchId4 = environment.convertStageToBatch(stageId, TestMaterialId.MATERIAL_4, 50);

			assertFalse(environment.batchExists(batchId1));
			assertFalse(environment.batchExists(batchId2));
			assertFalse(environment.stageExists(stageId));
			assertTrue(environment.batchExists(batchId3));
			assertTrue(environment.batchExists(batchId4));
			assertEquals(TestMaterialId.MATERIAL_4, environment.getBatchMaterial(batchId4));
			assertEquals(50, environment.getBatchAmount(batchId4), 0);

		});

		// precondition tests
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {

			final BatchId batchId1 = environment.createBatch(TestMaterialId.MATERIAL_1, 10);
			final BatchId batchId2 = environment.createBatch(TestMaterialId.MATERIAL_2, 7);
			final StageId stageId = environment.createStage();
			environment.moveBatchToStage(batchId1, stageId);
			environment.moveBatchToStage(batchId2, stageId);

			// if stage id is null
			assertModelException(() -> environment.convertStageToBatch(null, TestMaterialId.MATERIAL_4, 50),
					SimulationErrorType.NULL_STAGE_ID);
			// if stage id is unknown
			assertModelException(() -> environment.convertStageToBatch(new StageId(-1), TestMaterialId.MATERIAL_4, 50),
					SimulationErrorType.UNKNOWN_STAGE_ID);
			// if stage is in the offered state
			environment.setStageOffer(stageId, true);
			assertModelException(() -> environment.convertStageToBatch(stageId, TestMaterialId.MATERIAL_4, 50),
					SimulationErrorType.OFFERED_STAGE_UNALTERABLE);
			environment.setStageOffer(stageId, false);
			// if material id is null
			assertModelException(() -> environment.convertStageToBatch(stageId, null, 50),
					SimulationErrorType.NULL_MATERIAL_ID);
			// if material is unknown
			assertModelException(
					() -> environment.convertStageToBatch(stageId, TestMaterialId.getUnknownMaterialId(), 50),
					SimulationErrorType.UNKNOWN_MATERIAL_ID);
			// if the amount is negative
			assertModelException(() -> environment.convertStageToBatch(stageId, TestMaterialId.MATERIAL_4, -50),
					SimulationErrorType.NEGATIVE_MATERIAL_AMOUNT);

			// if the amount is not finite
			assertModelException(
					() -> environment.convertStageToBatch(stageId, TestMaterialId.MATERIAL_4, Double.NEGATIVE_INFINITY),
					SimulationErrorType.NON_FINITE_MATERIAL_AMOUNT);
			assertModelException(
					() -> environment.convertStageToBatch(stageId, TestMaterialId.MATERIAL_4, Double.POSITIVE_INFINITY),
					SimulationErrorType.NON_FINITE_MATERIAL_AMOUNT);
			assertModelException(() -> environment.convertStageToBatch(stageId, TestMaterialId.MATERIAL_4, Double.NaN),
					SimulationErrorType.NON_FINITE_MATERIAL_AMOUNT);

		});

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_2, testTime++, (environment) -> {

			StageId selectedStageId = null;
			final List<StageId> stages = environment.getStages(TestMaterialsProducerId.MATERIALS_PRODUCER_1);
			for (final StageId stageId : stages) {
				if (!environment.isStageOffered(stageId)) {
					selectedStageId = stageId;
					break;
				}
			}
			assertNotNull(selectedStageId);

			final StageId finalStageId = selectedStageId;
			// if invoker is not the owning materials producer component
			assertModelException(() -> environment.convertStageToBatch(finalStageId, TestMaterialId.MATERIAL_4, 50),
					SimulationErrorType.COMPONENT_LACKS_PERMISSION);

		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

	}

	/**
	 * Tests
	 * {@link EnvironmentImpl#convertStageToResource(StageId, ResourceId, long)}
	 */
	@Test
	@UnitTestMethod(name = "convertStageToResource", args = { StageId.class, ResourceId.class, long.class })
	public void testConvertStageToResource() {
		/*
		 * Show that we convert a stage to a resource, with the stage and its batches
		 * being removed from the simulation.
		 */
		final long seed = SEED_PROVIDER.getSeedValue(1);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {

			long expectedResourceLevel = environment.getMaterialsProducerResourceLevel(
					TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestResourceId.RESOURCE1);

			final BatchId batchId1 = environment.createBatch(TestMaterialId.MATERIAL_1, 10);
			final BatchId batchId2 = environment.createBatch(TestMaterialId.MATERIAL_2, 7);
			final BatchId batchId3 = environment.createBatch(TestMaterialId.MATERIAL_3, 7);
			final StageId stageId = environment.createStage();
			environment.moveBatchToStage(batchId1, stageId);
			environment.moveBatchToStage(batchId2, stageId);
			environment.convertStageToResource(stageId, TestResourceId.RESOURCE1, 50);
			expectedResourceLevel += 50;

			assertFalse(environment.batchExists(batchId1));
			assertFalse(environment.batchExists(batchId2));
			assertFalse(environment.stageExists(stageId));
			assertTrue(environment.batchExists(batchId3));

			assertEquals(expectedResourceLevel, environment.getMaterialsProducerResourceLevel(
					TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestResourceId.RESOURCE1));

			// we do it again to show that it is really adding the resource
			// and not just setting the total resource value

			final BatchId batchId4 = environment.createBatch(TestMaterialId.MATERIAL_1, 10);
			final BatchId batchId5 = environment.createBatch(TestMaterialId.MATERIAL_2, 7);
			final StageId stageId2 = environment.createStage();
			environment.moveBatchToStage(batchId4, stageId2);
			environment.moveBatchToStage(batchId5, stageId2);
			environment.convertStageToResource(stageId2, TestResourceId.RESOURCE1, 20);
			expectedResourceLevel += 20;

			assertFalse(environment.batchExists(batchId4));
			assertFalse(environment.batchExists(batchId5));
			assertFalse(environment.stageExists(stageId2));
			assertTrue(environment.batchExists(batchId3));

			assertEquals(expectedResourceLevel, environment.getMaterialsProducerResourceLevel(
					TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestResourceId.RESOURCE1));

		});

		// precondition tests
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {

			final BatchId batchId1 = environment.createBatch(TestMaterialId.MATERIAL_1, 10);
			final BatchId batchId2 = environment.createBatch(TestMaterialId.MATERIAL_2, 7);
			final StageId stageId = environment.createStage();
			environment.moveBatchToStage(batchId1, stageId);
			environment.moveBatchToStage(batchId2, stageId);

			// <li>if stage id is null
			assertModelException(() -> environment.convertStageToResource(null, TestResourceId.RESOURCE1, 20),
					SimulationErrorType.NULL_STAGE_ID);
			// <li>if stage id is unknown
			assertModelException(
					() -> environment.convertStageToResource(new StageId(-1), TestResourceId.RESOURCE1, 20),
					SimulationErrorType.UNKNOWN_STAGE_ID);
			// <li>if stage is in the offered state
			environment.setStageOffer(stageId, true);
			assertModelException(() -> environment.convertStageToResource(stageId, TestResourceId.RESOURCE1, 20),
					SimulationErrorType.OFFERED_STAGE_UNALTERABLE);
			environment.setStageOffer(stageId, false);
			// <li>if resource id is null
			assertModelException(() -> environment.convertStageToResource(stageId, null, 20),
					SimulationErrorType.NULL_RESOURCE_ID);
			// <li>if resource is unknown
			assertModelException(
					() -> environment.convertStageToResource(stageId, TestResourceId.getUnknownResourceId(), 20),
					SimulationErrorType.UNKNOWN_RESOURCE_ID);
			// <li>if the amount is negative
			assertModelException(() -> environment.convertStageToResource(stageId, TestResourceId.RESOURCE1, -20),
					SimulationErrorType.NEGATIVE_RESOURCE_AMOUNT);

			// if the amount results in an overflow of the corresponding
			// materials producer's inventory level
			BatchId batchId3 = environment.createBatch(TestMaterialId.MATERIAL_1, 10);
			StageId stageId3 = environment.createStage();
			environment.moveBatchToStage(batchId3, stageId3);
			environment.convertStageToResource(stageId3, TestResourceId.RESOURCE2, Long.MAX_VALUE - 10000);

			BatchId batchId4 = environment.createBatch(TestMaterialId.MATERIAL_1, 10);
			StageId stageId4 = environment.createStage();
			environment.moveBatchToStage(batchId4, stageId4);

			assertModelException(() -> environment.convertStageToResource(stageId4, TestResourceId.RESOURCE2, 20000),
					SimulationErrorType.RESOURCE_ARITHMETIC_EXCEPTION);

		});

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_2, testTime++, (environment) -> {

			StageId selectedStageId = null;
			final List<StageId> stages = environment.getStages(TestMaterialsProducerId.MATERIALS_PRODUCER_1);
			for (final StageId stageId : stages) {
				if (!environment.isStageOffered(stageId)) {
					selectedStageId = stageId;
					break;
				}
			}
			assertNotNull(selectedStageId);

			final StageId finalStageId = selectedStageId;
			// <li>if invoker is not the owning materials producer component
			assertModelException(() -> environment.convertStageToResource(finalStageId, TestResourceId.RESOURCE1, 20),
					SimulationErrorType.COMPONENT_LACKS_PERMISSION);

		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

	}

	/**
	 * Tests {@link EnvironmentImpl#createBatch(MaterialId, double)}
	 */
	@Test
	@UnitTestMethod(name = "createBatch", args = { MaterialId.class, double.class })
	public void testCreateBatch_MaterialId_Amount() {
		/*
		 * Show that we can add batches and that the environment acknowledges that we
		 * added the batches
		 */

		final long seed = SEED_PROVIDER.getSeedValue(2);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {

			for (int i = 0; i < 30; i++) {
				double amount = randomGenerator.nextDouble() * 100 + 1;
				TestMaterialId materialId = TestMaterialId.getRandomMaterialId(randomGenerator);
				BatchId batchId = environment.createBatch(materialId, amount);
				assertTrue(environment.batchExists(batchId));
				assertEquals(amount, environment.getBatchAmount(batchId), 0);
				assertEquals(materialId, environment.getBatchMaterial(batchId));
				assertEquals((Object) environment.getCurrentComponentId(), environment.getBatchProducer(batchId));
			}

		});

		// precondition tests
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			// if the material id is null
			assertModelException(() -> environment.createBatch(null, 1), SimulationErrorType.NULL_MATERIAL_ID);
			// if the material id is unknown
			assertModelException(() -> environment.createBatch(TestMaterialId.getUnknownMaterialId(), 1),
					SimulationErrorType.UNKNOWN_MATERIAL_ID);
			// if the amount is negative
			assertModelException(() -> environment.createBatch(TestMaterialId.MATERIAL_1, -1),
					SimulationErrorType.NEGATIVE_MATERIAL_AMOUNT);
			// if the amount is not finite
			assertModelException(() -> environment.createBatch(TestMaterialId.MATERIAL_1, Double.POSITIVE_INFINITY),
					SimulationErrorType.NON_FINITE_MATERIAL_AMOUNT);
			assertModelException(() -> environment.createBatch(TestMaterialId.MATERIAL_1, Double.NEGATIVE_INFINITY),
					SimulationErrorType.NON_FINITE_MATERIAL_AMOUNT);
			assertModelException(() -> environment.createBatch(TestMaterialId.MATERIAL_1, Double.NaN),
					SimulationErrorType.NON_FINITE_MATERIAL_AMOUNT);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_4, testTime++, (environment) -> {
			// if invoker is not a materials producer component
			assertModelException(() -> environment.createBatch(TestMaterialId.MATERIAL_1, 1),
					SimulationErrorType.COMPONENT_LACKS_PERMISSION);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests {@link EnvironmentImpl#createBatch(BatchConstructionInfo)}
	 */
	@Test
	@UnitTestMethod(name = "createBatch", args = { BatchConstructionInfo.class })
	public void testCreateBatch_BatchConstructionInfo() {
		/*
		 * Show that we can add batches and that the environment acknowledges that we
		 * added the batches
		 */

		final long seed = SEED_PROVIDER.getSeedValue(16);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {

			for (int i = 0; i < 30; i++) {
				double amount = randomGenerator.nextDouble() * 100 + 1;
				TestMaterialId materialId = TestMaterialId.getRandomMaterialId(randomGenerator);
				Builder builder = BatchConstructionInfo.builder().setMaterialId(materialId).setAmount(amount);
				BatchPropertyId[] batchPropertyIds = materialId.getBatchPropertyIds();
				assertTrue(batchPropertyIds.length>0);
				Map<BatchPropertyId,Object> expectedPropertyValues = new LinkedHashMap<>();
				for (BatchPropertyId batchPropertyId : batchPropertyIds) {
					PropertyDefinition batchPropertyDefinition = environment.getBatchPropertyDefinition(materialId,
							batchPropertyId);
					Object propertyValue = generatePropertyValue(batchPropertyDefinition, randomGenerator);
					expectedPropertyValues.put(batchPropertyId, propertyValue);
					builder.setPropertyValue(batchPropertyId, propertyValue);
					
				}
				BatchConstructionInfo batchConstructionInfo = builder.build();

				BatchId batchId = environment.createBatch(batchConstructionInfo);
				assertTrue(environment.batchExists(batchId));
				assertEquals(amount, environment.getBatchAmount(batchId), 0);
				assertEquals(materialId, environment.getBatchMaterial(batchId));
				assertEquals((Object) environment.getCurrentComponentId(), environment.getBatchProducer(batchId));
				for (BatchPropertyId batchPropertyId : batchPropertyIds) {
					Object expectedPropertyValue  = expectedPropertyValues.get(batchPropertyId);
					Object actualPropertyValue = environment.getBatchPropertyValue(batchId, batchPropertyId);
					assertEquals(expectedPropertyValue, actualPropertyValue);
				}
				
			}

		});

		// precondition tests
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			// if the batch construction info is null
			assertModelException(() -> environment.createBatch(null), SimulationErrorType.NULL_BATCH_CONSTRUCTION_INFO);
			// if the material id is unknown
			BatchConstructionInfo batchConstructionInfo1 = BatchConstructionInfo.builder()
					.setMaterialId(TestMaterialId.getUnknownMaterialId()).setAmount(1D).build();
			assertModelException(() -> environment.createBatch(batchConstructionInfo1),
					SimulationErrorType.UNKNOWN_MATERIAL_ID);

			// if a batch property id is unknown
			BatchConstructionInfo batchConstructionInfo2 = BatchConstructionInfo.builder()
					.setMaterialId(TestMaterialId.MATERIAL_1).setAmount(1L)
					.setPropertyValue(TestMaterialId.getUnknownBatchPropertyId(), 0D).build();
			assertModelException(() -> environment.createBatch(batchConstructionInfo2),
					SimulationErrorType.UNKNOWN_BATCH_PROPERTY_ID);

		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_4, testTime++, (environment) -> {
			// if invoker is not a materials producer component
			BatchConstructionInfo batchConstructionInfo = BatchConstructionInfo.builder()
					.setMaterialId(TestMaterialId.MATERIAL_1).setAmount(3D).build();
			assertModelException(() -> environment.createBatch(batchConstructionInfo),
					SimulationErrorType.COMPONENT_LACKS_PERMISSION);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests {@link EnvironmentImpl#createStage()}
	 */
	@Test
	@UnitTestMethod(name = "createStage", args = {})
	public void testCreateStage() {
		/*
		 * Show that we can add stages and that the environment acknowledges that we
		 * added the stages
		 */

		final long seed = SEED_PROVIDER.getSeedValue(3);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {

			final Set<StageId> stageIds = new LinkedHashSet<>();

			final StageId stageId1 = environment.createStage();
			assertTrue(environment.stageExists(stageId1));
			stageIds.add(stageId1);

			final StageId stageId2 = environment.createStage();
			assertTrue(environment.stageExists(stageId2));
			stageIds.add(stageId2);

			final StageId stageId3 = environment.createStage();
			assertTrue(environment.stageExists(stageId3));
			stageIds.add(stageId3);

			final StageId stageId4 = environment.createStage();
			assertTrue(environment.stageExists(stageId4));
			stageIds.add(stageId4);

			final StageId stageId5 = environment.createStage();
			assertTrue(environment.stageExists(stageId5));
			stageIds.add(stageId5);

			assertTrue(stageIds.size() == 5);

		});

		// precondition tests
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, testTime++, (environment) -> {
			// if invoker is not the materials producer component
			assertModelException(() -> environment.createStage(), SimulationErrorType.COMPONENT_LACKS_PERMISSION);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

	}

	/**
	 * Tests {@link EnvironmentImpl#destroyBatch(BatchId)}
	 */
	@Test
	@UnitTestMethod(name = "destroyBatch", args = { BatchId.class })
	public void testDestroyBatch() {
		/*
		 * Show that batches can be destroyed and that the environment acknowledges that
		 * we destroyed the batches
		 */
		final long seed = SEED_PROVIDER.getSeedValue(4);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			final BatchId batchId = environment.createBatch(TestMaterialId.MATERIAL_1, 1);
			assertTrue(environment.batchExists(batchId));
			environment.destroyBatch(batchId);
			assertFalse(environment.batchExists(batchId));
		});

		// precondition tests
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			// if the batch id is null
			assertModelException(() -> environment.destroyBatch(null), SimulationErrorType.NULL_BATCH_ID);
			// if the batch id is unknown for the materials producer
			assertModelException(() -> environment.destroyBatch(new BatchId(-1)), SimulationErrorType.UNKNOWN_BATCH_ID);
			// if the batch is part of an offered stage
			final BatchId batchId = environment.createBatch(TestMaterialId.MATERIAL_1, 1);
			final StageId stageId = environment.createStage();
			environment.moveBatchToStage(batchId, stageId);
			environment.setStageOffer(stageId, true);
			assertModelException(() -> environment.destroyBatch(batchId),
					SimulationErrorType.OFFERED_STAGE_UNALTERABLE);
		});

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++,
				(environment) -> environment.createBatch(TestMaterialId.MATERIAL_1, 1));

		// if invoker is not the owning materials producer component
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_2, testTime++, (environment) -> {
			final List<BatchId> inventoryBatches = environment
					.getInventoryBatches(TestMaterialsProducerId.MATERIALS_PRODUCER_1);
			assertTrue(inventoryBatches.size() > 0);
			final BatchId batchId = inventoryBatches.iterator().next();
			// if invoker is not the materials producer component
			assertModelException(() -> environment.destroyBatch(batchId),
					SimulationErrorType.COMPONENT_LACKS_PERMISSION);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

	}

	/**
	 * Tests {@link EnvironmentImpl#getCompartmentMapOption()}
	 */
	@Test
	@UnitTestMethod(name = "getCompartmentMapOption", args = {})
	public void testGetCompartmentMapOption() {

		final long seed = SEED_PROVIDER.getSeedValue(5);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (MapOption mapOption : MapOption.values()) {
			ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
			scenarioBuilder.setScenarioId(new ScenarioId(randomGenerator.nextInt(1000) + 1));
			scenarioBuilder.setCompartmentMapOption(mapOption);

			addStandardComponentsAndTypes(scenarioBuilder);
			TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

			Scenario scenario = scenarioBuilder.build();

			Replication replication = getReplication(randomGenerator);

			int testTime = 1;

			taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
				assertEquals(mapOption, environment.getCompartmentMapOption());
			});

			Simulation simulation = new Simulation();
			simulation.setReplication(replication);
			simulation.setScenario(scenario);
			simulation.execute();

			assertAllPlansExecuted(taskPlanContainer);
		}
	}

	/**
	 * Tests {@link EnvironmentImpl#getRegionMapOption()}
	 */
	@Test
	@UnitTestMethod(name = "getRegionMapOption", args = {})
	public void testGetRegionMapOption() {

		final long seed = SEED_PROVIDER.getSeedValue(6);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (MapOption mapOption : MapOption.values()) {
			ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
			scenarioBuilder.setScenarioId(new ScenarioId(randomGenerator.nextInt(1000) + 1));
			scenarioBuilder.setRegionMapOption(mapOption);

			addStandardComponentsAndTypes(scenarioBuilder);
			TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

			Scenario scenario = scenarioBuilder.build();

			Replication replication = getReplication(randomGenerator);

			int testTime = 1;

			taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
				assertEquals(mapOption, environment.getRegionMapOption());
			});

			Simulation simulation = new Simulation();
			simulation.setReplication(replication);
			simulation.setScenario(scenario);
			simulation.execute();

			assertAllPlansExecuted(taskPlanContainer);
		}
	}

	/**
	 * Tests {@link EnvironmentImpl#getPersonCompartmentArrivalTrackingPolicy()}
	 */
	@Test
	@UnitTestMethod(name = "getPersonCompartmentArrivalTrackingPolicy", args = {})
	public void testGetPersonCompartmentArrivalTrackingPolicy() {

		final long seed = SEED_PROVIDER.getSeedValue(7);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (TimeTrackingPolicy timeTrackingPolicy : TimeTrackingPolicy.values()) {
			ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
			scenarioBuilder.setScenarioId(new ScenarioId(randomGenerator.nextInt(1000) + 1));
			scenarioBuilder.setPersonCompartmentArrivalTracking(timeTrackingPolicy);

			addStandardComponentsAndTypes(scenarioBuilder);
			TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

			Scenario scenario = scenarioBuilder.build();

			Replication replication = getReplication(randomGenerator);

			int testTime = 1;

			taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
				assertEquals(timeTrackingPolicy, environment.getPersonCompartmentArrivalTrackingPolicy());
			});

			Simulation simulation = new Simulation();
			simulation.setReplication(replication);
			simulation.setScenario(scenario);
			simulation.execute();

			assertAllPlansExecuted(taskPlanContainer);
		}
	}

	/**
	 * Tests {@link EnvironmentImpl#getPersonRegionArrivalTrackingPolicy()}
	 */
	@Test
	@UnitTestMethod(name = "getPersonRegionArrivalTrackingPolicy", args = {})
	public void testGetPersonRegionArrivalTrackingPolicy() {

		final long seed = SEED_PROVIDER.getSeedValue(8);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (TimeTrackingPolicy timeTrackingPolicy : TimeTrackingPolicy.values()) {
			ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
			scenarioBuilder.setScenarioId(new ScenarioId(randomGenerator.nextInt(1000) + 1));
			scenarioBuilder.setPersonRegionArrivalTracking(timeTrackingPolicy);

			addStandardComponentsAndTypes(scenarioBuilder);
			TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

			Scenario scenario = scenarioBuilder.build();

			Replication replication = getReplication(randomGenerator);

			int testTime = 1;

			taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
				assertEquals(timeTrackingPolicy, environment.getPersonRegionArrivalTrackingPolicy());
			});

			Simulation simulation = new Simulation();
			simulation.setReplication(replication);
			simulation.setScenario(scenario);
			simulation.execute();

			assertAllPlansExecuted(taskPlanContainer);
		}
	}

	/**
	 * Tests {@link EnvironmentImpl#getPersonResourceTimeTrackingPolicy(ResourceId)}
	 */
	@Test
	@UnitTestMethod(name = "getPersonResourceTimeTrackingPolicy", args = { ResourceId.class })
	public void testGetPersonResourceTimeTrackingPolicy() {

		final long seed = SEED_PROVIDER.getSeedValue(9);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		Map<ResourceId, TimeTrackingPolicy> map = new LinkedHashMap<>();

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		scenarioBuilder.setScenarioId(new ScenarioId(randomGenerator.nextInt(1000) + 1));
		for (TestResourceId testResourceId : TestResourceId.values()) {
			int index = randomGenerator.nextInt(TimeTrackingPolicy.values().length);
			TimeTrackingPolicy timeTrackingPolicy = TimeTrackingPolicy.values()[index];
			scenarioBuilder.setResourceTimeTracking(testResourceId, timeTrackingPolicy);
			map.put(testResourceId, timeTrackingPolicy);
		}
		for (final TestCompartmentId testCompartmentId : TestCompartmentId.values()) {
			scenarioBuilder.addCompartmentId(testCompartmentId, TaskComponent.class);
		}
		for (final TestResourceId testResourceId : TestResourceId.values()) {
			scenarioBuilder.addResource(testResourceId);
		}
		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			for (TestResourceId testResourceId : TestResourceId.values()) {
				TimeTrackingPolicy expectedTimeTrackingPolicy = map.get(testResourceId);
				TimeTrackingPolicy actualTimeTrackingPolicy = environment
						.getPersonResourceTimeTrackingPolicy(testResourceId);
				assertEquals(expectedTimeTrackingPolicy, actualTimeTrackingPolicy);
			}
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

	}

	/**
	 * Tests {@link EnvironmentImpl#destroyStage(StageId, boolean)}
	 */
	@Test
	@UnitTestMethod(name = "destroyStage", args = { StageId.class, boolean.class })
	public void testDestroyStage() {
		/*
		 * Show that we can destroy stages and that the environment acknowledges that we
		 * destroyed the stages
		 */
		final long seed = SEED_PROVIDER.getSeedValue(10);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {

			for (int i = 0; i < 50; i++) {
				StageId stageId = environment.createStage();
				assertTrue(environment.stageExists(stageId));
				environment.destroyStage(stageId, false);
				assertFalse(environment.stageExists(stageId));

				stageId = environment.createStage();
				assertTrue(environment.stageExists(stageId));
				environment.destroyStage(stageId, true);
				assertFalse(environment.stageExists(stageId));
			}

		});

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			environment.createStage();
		});

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_2, testTime++, (environment) -> {
			final List<StageId> stages = environment.getStages(TestMaterialsProducerId.MATERIALS_PRODUCER_1);
			assertTrue(stages.size() > 0);
			final StageId stageId = stages.iterator().next();
			// if invoker is not a materials producer component
			assertModelException(() -> environment.destroyStage(stageId, false),
					SimulationErrorType.COMPONENT_LACKS_PERMISSION);
		});

		// precondition tests
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			// if the stage id is null
			assertModelException(() -> environment.destroyStage(null, false), SimulationErrorType.NULL_STAGE_ID);
			// if the stage id is unknown for the materials producer
			assertModelException(() -> environment.destroyStage(new StageId(-1), false),
					SimulationErrorType.UNKNOWN_STAGE_ID);
			// if the stage is in the offered stage
			final StageId stageId = environment.createStage();
			environment.setStageOffer(stageId, true);
			assertModelException(() -> environment.destroyStage(stageId, false),
					SimulationErrorType.OFFERED_STAGE_UNALTERABLE);
		});
		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

	}

	/**
	 * Tests {@link EnvironmentImpl#getBatchAmount(BatchId)}
	 */
	@Test
	@UnitTestMethod(name = "getBatchAmount", args = { BatchId.class })
	public void testGetBatchAmount() {
		/*
		 * Show that batches have the amounts that they are created with. Leave batch
		 * mutation testing for other tests.
		 */
		final long seed = SEED_PROVIDER.getSeedValue(11);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			for (int i = 0; i < 50; i++) {
				final double expectedAmount = environment.getRandomGenerator().nextDouble() * 100;
				final BatchId batchId = environment.createBatch(
						TestMaterialId.getRandomMaterialId(environment.getRandomGenerator()), expectedAmount);
				final double actualAmount = environment.getBatchAmount(batchId);
				assertEquals(expectedAmount, actualAmount, 0);
			}
		});

		// precondition tests
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			// if the batch id is null
			assertModelException(() -> environment.getBatchAmount(null), SimulationErrorType.NULL_BATCH_ID);
			// if the batch id is unknown
			assertModelException(() -> environment.getBatchAmount(new BatchId(-1)),
					SimulationErrorType.UNKNOWN_BATCH_ID);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests {@link EnvironmentImpl#getBatchMaterial(BatchId)}
	 */
	@Test
	@UnitTestMethod(name = "getBatchMaterial", args = { BatchId.class })
	public void testGetBatchMaterial() {
		/*
		 * Show that batches have the amounts that they are created with. Leave batch
		 * mutation testing for other tests.
		 */
		final long seed = SEED_PROVIDER.getSeedValue(12);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			for (int i = 0; i < 50; i++) {
				final MaterialId expectedMaterialId = TestMaterialId
						.getRandomMaterialId(environment.getRandomGenerator());
				final BatchId batchId = environment.createBatch(expectedMaterialId, 5);
				final MaterialId actualMaterialId = environment.getBatchMaterial(batchId);
				assertEquals(expectedMaterialId, actualMaterialId);
			}
		});

		// precondition tests
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			// if the batchId id is null
			assertModelException(() -> environment.getBatchMaterial(null), SimulationErrorType.NULL_BATCH_ID);
			// if the batchId id is unknown
			assertModelException(() -> environment.getBatchMaterial(new BatchId(-1)),
					SimulationErrorType.UNKNOWN_BATCH_ID);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

	}

	/**
	 * Tests {@link EnvironmentImpl#getBatchProducer(BatchId)}
	 */
	@Test
	@UnitTestMethod(name = "getBatchProducer", args = { BatchId.class })
	public void testGetBatchProducer() {
		/*
		 * Show that batches have their creators.
		 */
		final long seed = SEED_PROVIDER.getSeedValue(13);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			environment.createBatch(TestMaterialId.MATERIAL_1, 5);
		});

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_2, testTime++, (environment) -> {
			environment.createBatch(TestMaterialId.MATERIAL_1, 5);
		});

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_3, testTime++, (environment) -> {
			environment.createBatch(TestMaterialId.MATERIAL_1, 5);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			assertEquals(TestMaterialsProducerId.MATERIALS_PRODUCER_1, environment.getBatchProducer(new BatchId(0)));
			assertEquals(TestMaterialsProducerId.MATERIALS_PRODUCER_2, environment.getBatchProducer(new BatchId(1)));
			assertEquals(TestMaterialsProducerId.MATERIALS_PRODUCER_3, environment.getBatchProducer(new BatchId(2)));
		});

		// precondition tests
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			// if the batch id is null
			assertModelException(() -> environment.getBatchProducer(null), SimulationErrorType.NULL_BATCH_ID);
			// if the batch id is unknown
			assertModelException(() -> environment.getBatchProducer(new BatchId(-1)),
					SimulationErrorType.UNKNOWN_BATCH_ID);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests
	 * {@link EnvironmentImpl#getBatchPropertyDefinition(MaterialId, BatchPropertyId)}
	 */
	@Test
	@UnitTestMethod(name = "getBatchPropertyDefinition", args = { MaterialId.class, BatchPropertyId.class })
	public void testGetBatchPropertyDefinition() {
		/*
		 * Retrieve each batch property definition and assert that it equals the one
		 * held in the test plan executor.
		 */

		final long seed = SEED_PROVIDER.getSeedValue(14);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			for (final TestMaterialId testMaterialId : TestMaterialId.values()) {
				final Set<BatchPropertyId> batchPropertyIds = scenario.getBatchPropertyIds(testMaterialId);
				for (final BatchPropertyId batchPropertyId : batchPropertyIds) {
					final PropertyDefinition expectedPropertyDefinition = scenario
							.getBatchPropertyDefinition(testMaterialId, batchPropertyId);
					final PropertyDefinition actualPropertyDefinition = environment
							.getBatchPropertyDefinition(testMaterialId, batchPropertyId);
					assertEquals(expectedPropertyDefinition, actualPropertyDefinition);
				}
			}
		});

		final Set<BatchPropertyId> propertyIds = scenario.getBatchPropertyIds(TestMaterialId.MATERIAL_1);
		assertTrue(propertyIds.size() > 0);
		final BatchPropertyId batchPropertyId = propertyIds.iterator().next();

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			// if the property id is null
			assertModelException(() -> environment.getBatchPropertyDefinition(TestMaterialId.MATERIAL_1, null),
					SimulationErrorType.NULL_BATCH_PROPERTY_ID);
			// if the property id is unknown
			assertModelException(() -> environment.getBatchPropertyDefinition(TestMaterialId.MATERIAL_1,
					TestMaterialId.getUnknownBatchPropertyId()), SimulationErrorType.UNKNOWN_BATCH_PROPERTY_ID);
			// if the material id is null
			assertModelException(() -> environment.getBatchPropertyDefinition(null, batchPropertyId),
					SimulationErrorType.NULL_MATERIAL_ID);
			// if the material id is unknown
			assertModelException(() -> environment.getBatchPropertyDefinition(TestMaterialId.getUnknownMaterialId(),
					batchPropertyId), SimulationErrorType.UNKNOWN_MATERIAL_ID);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests {@link EnvironmentImpl#getBatchPropertyIds(MaterialId)}
	 */
	@Test
	@UnitTestMethod(name = "getBatchPropertyIds", args = { MaterialId.class })
	public void testGetBatchPropertyIds() {
		/*
		 * Assert that the batch property identifiers from the environment are the same
		 * as those stored in the local MaterialId enumeration.
		 */
		final long seed = SEED_PROVIDER.getSeedValue(15);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			for (final TestMaterialId testMaterialId : TestMaterialId.values()) {

				final Set<BatchPropertyId> expectedBatchPropertyIds = new LinkedHashSet<>();
				final BatchPropertyId[] batchPropertyIds = testMaterialId.getBatchPropertyIds();
				for (final BatchPropertyId batchPropertyId : batchPropertyIds) {
					expectedBatchPropertyIds.add(batchPropertyId);
				}
				assertEquals(expectedBatchPropertyIds, environment.getBatchPropertyIds(testMaterialId));
			}
		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			// if the material id is null
			assertModelException(() -> environment.getBatchPropertyIds(null), SimulationErrorType.NULL_MATERIAL_ID);
			// if the material id does not correspond to a known material
			// type
			assertModelException(() -> environment.getBatchPropertyIds(TestMaterialId.getUnknownMaterialId()),
					SimulationErrorType.UNKNOWN_MATERIAL_ID);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

}
