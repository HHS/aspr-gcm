package gcm.automated;

import static gcm.automated.support.EnvironmentSupport.addStandardComponentsAndTypes;
import static gcm.automated.support.EnvironmentSupport.addStandardPeople;
import static gcm.automated.support.EnvironmentSupport.addStandardPropertyDefinitions;
import static gcm.automated.support.EnvironmentSupport.addStandardTrackingAndScenarioId;
import static gcm.automated.support.EnvironmentSupport.addTaskPlanContainer;
import static gcm.automated.support.EnvironmentSupport.assertAllPlansExecuted;
import static gcm.automated.support.EnvironmentSupport.generatePropertyValue;
import static gcm.automated.support.EnvironmentSupport.getRandomGenerator;
import static gcm.automated.support.EnvironmentSupport.getReplication;
import static gcm.automated.support.ExceptionAssertion.assertModelException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.EnumSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.math3.random.RandomGenerator;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;

import gcm.automated.support.EnvironmentSupport;
import gcm.automated.support.EnvironmentSupport.PropertyAssignmentPolicy;
import gcm.automated.support.SeedProvider;
import gcm.automated.support.TaskPlanContainer;
import gcm.automated.support.TestCompartmentId;
import gcm.automated.support.TestGlobalComponentId;
import gcm.automated.support.TestMaterialId;
import gcm.automated.support.TestMaterialsProducerId;
import gcm.automated.support.TestRegionId;
import gcm.replication.Replication;
import gcm.scenario.BatchId;
import gcm.scenario.BatchPropertyId;
import gcm.scenario.CompartmentId;
import gcm.scenario.CompartmentPropertyId;
import gcm.scenario.MaterialId;
import gcm.scenario.PersonId;
import gcm.scenario.PropertyDefinition;
import gcm.scenario.Scenario;
import gcm.scenario.ScenarioBuilder;
import gcm.scenario.StageId;
import gcm.scenario.UnstructuredScenarioBuilder;
import gcm.simulation.EnvironmentImpl;
import gcm.simulation.Simulation;
import gcm.simulation.SimulationErrorType;
import gcm.util.annotations.UnitTest;
import gcm.util.annotations.UnitTestMethod;
import org.junit.jupiter.api.Test;

@UnitTest(target = EnvironmentImpl.class)

public class AT_EnvironmentImpl_03 {

	private static SeedProvider SEED_PROVIDER;

	@BeforeAll
	public static void beforeClass() {
		SEED_PROVIDER = new SeedProvider(EnvironmentSupport.getMetaSeed(3));
	}

	/**
	 * Internal test(not part of public tests) to show that there are no large
	 * gaps in the seed cases generated by the SeedProvider.
	 */
	@AfterAll
	public static void afterClass() {
//		 System.out.println(AT_EnvironmentImpl_03.class.getSimpleName() + " "
//		 + SEED_PROVIDER.generateUnusedSeedReport());
	}


	/**
	 * Tests {@link EnvironmentImpl#getBatchPropertyTime(BatchId, BatchPropertyId)}
	 */
	@Test
	@UnitTestMethod(name = "getBatchPropertyTime", args = {BatchId.class, BatchPropertyId.class})
	public void testGetBatchPropertyTime() {
		/*
		 * For each batch property first show that the property time is zero.
		 * Next change each property so that the new property times will be the
		 * current time and test that this is so. Finally, move forward in time
		 * and show that the property value times still reflect the time when we
		 * set them and not the current time.
		 */

		final long seed = SEED_PROVIDER.getSeedValue(0);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {

			for (final MaterialId materialId : environment.getMaterialIds()) {
				final BatchId batchId = environment.createBatch(materialId, 30);
				for (final BatchPropertyId batchPropertyId : environment.getBatchPropertyIds(materialId)) {
					final double expectedPropertyTime = 1;
					final double actualPropertyTime = environment.getBatchPropertyTime(batchId, batchPropertyId);
					assertEquals(expectedPropertyTime, actualPropertyTime, 0);
				}
			}

		});

		/*
		 * Change each property value and show that the time values are the
		 * current time
		 */
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {

			final List<BatchId> batches = environment.getInventoryBatches(TestMaterialsProducerId.MATERIALS_PRODUCER_1);
			for (final BatchId batchId : batches) {
				final MaterialId materialId = environment.getBatchMaterial(batchId);
				for (final BatchPropertyId batchPropertyId : environment.getBatchPropertyIds(materialId)) {
					final PropertyDefinition propertyDefinition = environment.getBatchPropertyDefinition(materialId, batchPropertyId);
					final Object actualPropertyValue = environment.getBatchPropertyValue(batchId, batchPropertyId);
					Object updatedPropertyValue = null;
					while ((updatedPropertyValue == null) || updatedPropertyValue.equals(actualPropertyValue)) {
						updatedPropertyValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());
					}
					environment.setBatchPropertyValue(batchId, batchPropertyId, updatedPropertyValue);
					final double expectedPropertyTime = 2.0;
					final double actualPropertyTime = environment.getBatchPropertyTime(batchId, batchPropertyId);
					assertEquals(expectedPropertyTime, actualPropertyTime, 0);
				}
			}

		});

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			/*
			 * Time has moved forward and we show that the property value times
			 * still reflect when they were set
			 */

			final List<BatchId> batches = environment.getInventoryBatches(TestMaterialsProducerId.MATERIALS_PRODUCER_1);
			for (final BatchId batchId : batches) {
				final MaterialId materialId = environment.getBatchMaterial(batchId);
				for (final BatchPropertyId batchPropertyId : environment.getBatchPropertyIds(materialId)) {
					final double expectedPropertyTime = 2.0;
					final double actualPropertyTime = environment.getBatchPropertyTime(batchId, batchPropertyId);
					assertEquals(expectedPropertyTime, actualPropertyTime, 0);
				}
			}

		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {

			final BatchId batchId = environment.createBatch(TestMaterialId.MATERIAL_1, 23.6);
			final BatchPropertyId batchPropertyId = TestMaterialId.MATERIAL_1.getBatchPropertyIds()[0];

			// if the batch id is null
			assertModelException(() -> environment.getBatchPropertyTime(null, batchPropertyId), SimulationErrorType.NULL_BATCH_ID);
			// if the batch is unknown
			assertModelException(() -> environment.getBatchPropertyTime(new BatchId(-1), batchPropertyId), SimulationErrorType.UNKNOWN_BATCH_ID);
			// if the property id is null
			assertModelException(() -> environment.getBatchPropertyTime(batchId, null), SimulationErrorType.NULL_BATCH_PROPERTY_ID);
			// if the property is unknown
			assertModelException(() -> environment.getBatchPropertyTime(batchId, TestMaterialId.getUnknownBatchPropertyId()), SimulationErrorType.UNKNOWN_BATCH_PROPERTY_ID);

		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

	}

	/**
	 * Tests {@link EnvironmentImpl#getBatchPropertyValue(BatchId, BatchPropertyId)}
	 */
	@Test
	@UnitTestMethod(name = "getBatchPropertyValue", args = {BatchId.class, BatchPropertyId.class})
	public void testGetBatchPropertyValue() {
		/*
		 * For each material and material property definition, show that the
		 * current value is the default value we expect from the property
		 * definition. Then show that after we change the value that we can
		 * retrieve the new value just so we know that we are not observing an
		 * artifact of the original default value.
		 */

		final long seed = SEED_PROVIDER.getSeedValue(1);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {

			for (final MaterialId materialId : environment.getMaterialIds()) {
				final BatchId batchId = environment.createBatch(materialId, 30);
				for (final BatchPropertyId batchPropertyId : environment.getBatchPropertyIds(materialId)) {
					/*
					 * We first assert that the current value of the property is
					 * the default for the definition.
					 */

					final PropertyDefinition propertyDefinition = environment.getBatchPropertyDefinition(materialId, batchPropertyId);
					assertTrue(propertyDefinition.getDefaultValue().isPresent());
					final Object expectedPropertyValue = propertyDefinition.getDefaultValue().get();
					final Object actualPropertyValue = environment.getBatchPropertyValue(batchId, batchPropertyId);
					assertEquals(expectedPropertyValue, actualPropertyValue);

					/*
					 * To be more thorough, we also assert that we can retrieve
					 * any arbitrary value since we know that default values are
					 * potentially handled as a special case.
					 */
					Object updatedPropertyValue = null;
					while ((updatedPropertyValue == null) || updatedPropertyValue.equals(actualPropertyValue)) {
						updatedPropertyValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());
					}
					environment.setBatchPropertyValue(batchId, batchPropertyId, updatedPropertyValue);
					final Object retrievedPropertyValue = environment.getBatchPropertyValue(batchId, batchPropertyId);
					assertEquals(updatedPropertyValue, retrievedPropertyValue);
				}
			}

		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {

			final BatchId batchId = environment.createBatch(TestMaterialId.MATERIAL_1, 45);
			final BatchPropertyId batchPropertyId = TestMaterialId.MATERIAL_1.getBatchPropertyIds()[0];

			// if the batch id is null
			assertModelException(() -> environment.getBatchPropertyValue(null, batchPropertyId), SimulationErrorType.NULL_BATCH_ID);
			// if the batch is unknown
			assertModelException(() -> environment.getBatchPropertyValue(new BatchId(-1), batchPropertyId), SimulationErrorType.UNKNOWN_BATCH_ID);
			// if the property id is null
			assertModelException(() -> environment.getBatchPropertyValue(batchId, null), SimulationErrorType.NULL_BATCH_PROPERTY_ID);
			// if the property is unknown
			assertModelException(() -> environment.getBatchPropertyValue(batchId, TestMaterialId.getUnknownBatchPropertyId()), SimulationErrorType.UNKNOWN_BATCH_PROPERTY_ID);

		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

	}

	/**
	 * Tests {@link EnvironmentImpl#getBatchStageId(BatchId)}
	 */
	@Test
	@UnitTestMethod(name = "getBatchStageId", args = {BatchId.class})
	public void testGetBatchStageId() {
		/*
		 * Show that batches have the stages that they have been assigned.
		 */
		final long seed = SEED_PROVIDER.getSeedValue(2);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			final BatchId batchId = environment.createBatch(TestMaterialId.MATERIAL_1, 20);
			assertFalse(environment.getBatchStageId(batchId).isPresent());
			final StageId stageId = environment.createStage();
			environment.moveBatchToStage(batchId, stageId);
			assertTrue(environment.getBatchStageId(batchId).isPresent());
			assertEquals(stageId, environment.getBatchStageId(batchId).get());
			environment.moveBatchToInventory(batchId);
			assertFalse(environment.getBatchStageId(batchId).isPresent());
		});

		// precondition tests
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			// if the batchId id is null
			assertModelException(() -> environment.getBatchStageId(null), SimulationErrorType.NULL_BATCH_ID);
			// if the batchId id is unknown
			assertModelException(() -> environment.getBatchStageId(new BatchId(-1)), SimulationErrorType.UNKNOWN_BATCH_ID);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests {@link EnvironmentImpl#getBatchTime(BatchId)}
	 */
	@Test
	@UnitTestMethod(name = "getBatchTime", args = {BatchId.class})
	public void testGetBatchTime() {
		/*
		 * Show that batches have time values equal to their creation time, over
		 * time.
		 */

		final long seed = SEED_PROVIDER.getSeedValue(3);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			environment.createBatch(TestMaterialId.MATERIAL_1, 1);
		});

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_2, testTime++, (environment) -> {
			environment.createBatch(TestMaterialId.MATERIAL_2, 1);
		});

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_3, testTime++, (environment) -> {
			environment.createBatch(TestMaterialId.MATERIAL_3, 1);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			for (int i = 0; i < 3; i++) {
				BatchId batchId = new BatchId(i);
				assertEquals(i + 1, environment.getBatchTime(batchId), 0);
			}
		});

		// precondition tests
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			// if the batchId id is null
			assertModelException(() -> environment.getBatchTime(null), SimulationErrorType.NULL_BATCH_ID);
			// if the batchId id is unknown
			assertModelException(() -> environment.getBatchTime(new BatchId(-1)), SimulationErrorType.UNKNOWN_BATCH_ID);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	


	/**
	 * Tests {@link EnvironmentImpl#getCompartmentIds()}
	 */
	@Test
	@UnitTestMethod(name = "getCompartmentIds", args = {})
	public void testGetCompartmentIds() {
		/*
		 * Assert that the compartment identifiers from the environment are the
		 * same as the elements of the local CompartmentId enumeration.
		 */
		final long seed = SEED_PROVIDER.getSeedValue(7);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			final Set<TestCompartmentId> expectedCompartmentIds = EnumSet.allOf(TestCompartmentId.class);
			assertEquals(expectedCompartmentIds, environment.getCompartmentIds());
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests {@link EnvironmentImpl#getCompartmentPopulationCount(CompartmentId)}
	 */
	@Test
	@UnitTestMethod(name = "getCompartmentPopulationCount", args = {CompartmentId.class})
	public void testGetCompartmentPopulationCount() {
		/*
		 * Assert that each compartment has the number of people in it expected
		 * from the initialization of the simulation. Then assert the count of
		 * the compartment population as we add a few people just to make sure
		 * that the original agreement was not an artifact of initialization.
		 */

		final long seed = SEED_PROVIDER.getSeedValue(8);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			for (final TestCompartmentId testCompartmentId : TestCompartmentId.values()) {
				int expectedCompartmentPopulationCount = 0;
				for (final PersonId personId : scenario.getPeopleIds()) {
					if (scenario.getPersonCompartment(personId).equals(testCompartmentId)) {
						expectedCompartmentPopulationCount++;
					}
				}
				assertEquals(expectedCompartmentPopulationCount, environment.getCompartmentPopulationCount(testCompartmentId));

				for (final TestRegionId testRegionId : TestRegionId.values()) {
					environment.addPerson(testRegionId, testCompartmentId);
					expectedCompartmentPopulationCount++;
					assertEquals(expectedCompartmentPopulationCount, environment.getCompartmentPopulationCount(testCompartmentId));
				}
			}
		});

		/*
		 * Preconditions test
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			// if the compartment id is null
			assertModelException(() -> environment.getCompartmentPopulationCount(null), SimulationErrorType.NULL_COMPARTMENT_ID);
			// if the compartment is unknown
			assertModelException(() -> environment.getCompartmentPopulationCount(TestCompartmentId.getUnknownCompartmentId()), SimulationErrorType.UNKNOWN_COMPARTMENT_ID);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();
	}

	/**
	 * Tests
	 * {@link EnvironmentImpl#getCompartmentPopulationCountTime(CompartmentId)}
	 */
	@Test
	@UnitTestMethod(name = "getCompartmentPopulationCountTime", args = {CompartmentId.class})
	public void testGetCompartmentPopulationCountTime() {
		/*
		 * Create three test plans such that we show that the initial people
		 * were added at time zero and that if we add new people at time 2, we
		 * can verify that the new population time is 2 at both time 2 and
		 * later.
		 */
		final long seed = SEED_PROVIDER.getSeedValue(5);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			for (final TestCompartmentId testCompartmentId : TestCompartmentId.values()) {
				assertEquals(0, environment.getCompartmentPopulationCountTime(testCompartmentId), 0);
			}
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			for (final TestCompartmentId testCompartmentId : TestCompartmentId.values()) {
				environment.addPerson(TestRegionId.REGION_1, testCompartmentId);
				assertEquals(2.0, environment.getCompartmentPopulationCountTime(testCompartmentId), 0);
			}
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			for (final TestCompartmentId testCompartmentId : TestCompartmentId.values()) {
				assertEquals(2.0, environment.getCompartmentPopulationCountTime(testCompartmentId), 0);
			}
		});

		/*
		 * Preconditions test
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			// if the compartment id is null
			assertModelException(() -> environment.getCompartmentPopulationCountTime(null), SimulationErrorType.NULL_COMPARTMENT_ID);
			// if the compartment is unknown
			assertModelException(() -> environment.getCompartmentPopulationCountTime(TestCompartmentId.getUnknownCompartmentId()), SimulationErrorType.UNKNOWN_COMPARTMENT_ID);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests
	 * {@link EnvironmentImpl#getCompartmentPropertyDefinition(CompartmentId, CompartmentPropertyId)}
	 */
	@Test
	@UnitTestMethod(name = "getCompartmentPropertyDefinition", args = {CompartmentId.class,CompartmentPropertyId.class})
	public void testGetCompartmentPropertyDefinition() {
		/*
		 * Retrieve each compartment property definition and assert that it
		 * equals the one held in the test plan executor.
		 */
		final long seed = SEED_PROVIDER.getSeedValue(6);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		for (final TestCompartmentId testCompartmentId : TestCompartmentId.values()) {
			for (CompartmentPropertyId compartmentPropertyId : testCompartmentId.getCompartmentPropertyIds()) {
				taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
					final PropertyDefinition expectedPropertyDefinition = scenario.getCompartmentPropertyDefinition(testCompartmentId, compartmentPropertyId);
					final PropertyDefinition actualPropertyDefinition = environment.getCompartmentPropertyDefinition(testCompartmentId, compartmentPropertyId);
					assertEquals(expectedPropertyDefinition, actualPropertyDefinition);
				});
			}
		}
		/*
		 * Precondition Tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			CompartmentId compartmentId = TestCompartmentId.COMPARTMENT_1;
			CompartmentPropertyId compartmentPropertyId = TestCompartmentId.COMPARTMENT_1.getCompartmentPropertyIds()[0];

			// if the compartment id is null
			assertModelException(() -> environment.getCompartmentPropertyDefinition(null, compartmentPropertyId), SimulationErrorType.NULL_COMPARTMENT_ID);

			// if the compartment id is unknown
			assertModelException(() -> environment.getCompartmentPropertyDefinition(TestCompartmentId.getUnknownCompartmentId(), compartmentPropertyId), SimulationErrorType.UNKNOWN_COMPARTMENT_ID);

			// if the property id is null
			assertModelException(() -> environment.getCompartmentPropertyDefinition(compartmentId, null), SimulationErrorType.NULL_COMPARTMENT_PROPERTY_ID);

			// if the property id does not correspond to a known compartment
			// property identifier
			assertModelException(() -> environment.getCompartmentPropertyDefinition(compartmentId, TestCompartmentId.getUnknownCompartmentPropertyId()),
					SimulationErrorType.UNKNOWN_COMPARTMENT_PROPERTY_ID);

		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests {@link EnvironmentImpl#getCompartmentPropertyIds(CompartmentId)}
	 */
	@Test
	@UnitTestMethod(name = "getCompartmentPropertyIds", args = {CompartmentId.class})
	public void testGetCompartmentPropertyIds() {
		/*
		 * Assert that the compartment property identifiers from the environment
		 * are the same as the elements of the local CompartmentPropertyId
		 * enumeration.
		 */
		final long seed = SEED_PROVIDER.getSeedValue(4);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			Set<CompartmentId> compartmentIds = environment.getCompartmentIds();
			assertTrue(compartmentIds.size() > 0);
			for (TestCompartmentId testCompartmentId : TestCompartmentId.values()) {
				final Set<CompartmentPropertyId> expectedCompartmentPropertyIds = new LinkedHashSet<>();
				for (CompartmentPropertyId compartmentPropertyId : testCompartmentId.getCompartmentPropertyIds()) {
					expectedCompartmentPropertyIds.add(compartmentPropertyId);
				}
				assertEquals(expectedCompartmentPropertyIds, environment.getCompartmentPropertyIds(testCompartmentId));
			}
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

}
