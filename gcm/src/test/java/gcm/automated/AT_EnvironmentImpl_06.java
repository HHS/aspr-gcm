package gcm.automated;


import static gcm.automated.support.EnvironmentSupport.addStandardComponentsAndTypes;
import static gcm.automated.support.EnvironmentSupport.addStandardPeople;
import static gcm.automated.support.EnvironmentSupport.addStandardPropertyDefinitions;
import static gcm.automated.support.EnvironmentSupport.addStandardTrackingAndScenarioId;
import static gcm.automated.support.EnvironmentSupport.addTaskPlanContainer;
import static gcm.automated.support.EnvironmentSupport.assertAllPlansExecuted;
import static gcm.automated.support.EnvironmentSupport.generatePropertyValue;
import static gcm.automated.support.EnvironmentSupport.getRandomGenerator;
import static gcm.automated.support.EnvironmentSupport.getReplication;
import static gcm.automated.support.ExceptionAssertion.assertModelException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.EnumSet;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

import org.apache.commons.math3.random.RandomGenerator;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import gcm.automated.support.EnvironmentSupport;
import gcm.automated.support.EnvironmentSupport.PropertyAssignmentPolicy;
import gcm.automated.support.SeedProvider;
import gcm.automated.support.TaskPlanContainer;
import gcm.automated.support.TestCompartmentId;
import gcm.automated.support.TestGlobalComponentId;
import gcm.automated.support.TestGroupTypeId;
import gcm.automated.support.TestMaterialId;
import gcm.automated.support.TestMaterialsProducerId;
import gcm.automated.support.TestMaterialsProducerPropertyId;
import gcm.automated.support.TestRegionId;
import gcm.automated.support.TestResourceId;
import gcm.replication.Replication;
import gcm.scenario.BatchId;
import gcm.scenario.CompartmentId;
import gcm.scenario.GroupId;
import gcm.scenario.MaterialId;
import gcm.scenario.MaterialsProducerId;
import gcm.scenario.MaterialsProducerPropertyId;
import gcm.scenario.PersonId;
import gcm.scenario.PropertyDefinition;
import gcm.scenario.ResourceId;
import gcm.scenario.Scenario;
import gcm.scenario.ScenarioBuilder;
import gcm.scenario.StageId;
import gcm.scenario.UnstructuredScenarioBuilder;
import gcm.simulation.EnvironmentImpl;
import gcm.simulation.Filter;
import gcm.simulation.MonoWeightingFunction;
import gcm.simulation.Simulation;
import gcm.simulation.SimulationErrorType;
import gcm.util.annotations.UnitTest;
import gcm.util.annotations.UnitTestMethod;

@UnitTest(target = EnvironmentImpl.class)

public class AT_EnvironmentImpl_06 {

	private static SeedProvider SEED_PROVIDER;

	@BeforeClass
	public static void beforeClass() {
		SEED_PROVIDER = new SeedProvider(EnvironmentSupport.getMetaSeed(6));
	}

	/**
	 * Internal test(not part of public tests) to show that there are no large
	 * gaps in the seed cases generated by the SeedProvider.
	 */
	@AfterClass
	public static void afterClass() {
//		System.out.println(SEED_PROVIDER.generateUnusedSeedReport());
	}

	/*
	 * Utility class for getting random people from population indices
	 */
	private static class Counter {
		int count;
	}

	/**
	 * Tests {@link EnvironmentImpl#getIndexedPeople(Object)}
	 */
	@Test
	@UnitTestMethod(name = "getIndexedPeople", args= {Object.class})
	public void testGetIndexedPeople() {
		/*
		 * The complex testing of index creation is handled elsewhere. Here, we
		 * show that we can create an population index and retrieve its people.
		 */

		final long seed = SEED_PROVIDER.getSeedValue(0);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			for (final TestCompartmentId testCompartmentId : TestCompartmentId.values()) {

				final Set<PersonId> expectedPeopleInCompartment = new LinkedHashSet<>();
				for (final PersonId personId : scenario.getPeopleIds()) {
					final CompartmentId personCompartment = scenario.getPersonCompartment(personId);
					if (personCompartment.equals(testCompartmentId)) {
						expectedPeopleInCompartment.add(personId);
					}
				}

				final Object key = new Object();
				environment.addPopulationIndex(Filter.compartment(testCompartmentId), key);

				final Set<PersonId> actualPeopleInCompartment = new LinkedHashSet<>(environment.getIndexedPeople(key));

				assertEquals(expectedPeopleInCompartment, actualPeopleInCompartment);
				environment.removePopulationIndex(key);
			}

		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			// if the key is null
			assertModelException(() -> environment.getIndexedPeople((Object[]) null), SimulationErrorType.NULL_POPULATION_INDEX_KEY);
			// if the key does not correspond to an existing population
			// index
			assertModelException(() -> environment.getIndexedPeople("bad key"), SimulationErrorType.UNKNOWN_POPULATION_INDEX_KEY);

		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

	}

	/**
	 * Tests {@link EnvironmentImpl#getIndexSize(Object)}
	 */
	@Test
	@UnitTestMethod(name = "getIndexSize", args= {Object.class})
	public void testGetIndexSize() {
		/*
		 * The complex testing of index creation is handled elsewhere. Here, we
		 * show that we can create an population index and retrieve its size.
		 */

		final long seed = SEED_PROVIDER.getSeedValue(1);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			for (final TestCompartmentId testCompartmentId : TestCompartmentId.values()) {
				int expectedNumberOfPeopleInCompartment = 0;
				for (final PersonId personId : scenario.getPeopleIds()) {
					final CompartmentId personCompartment = scenario.getPersonCompartment(personId);
					if (personCompartment.equals(testCompartmentId)) {
						expectedNumberOfPeopleInCompartment++;
					}
				}

				final Object key = new Object();
				environment.addPopulationIndex(Filter.compartment(testCompartmentId), key);

				final int actualNumberOfPeopleInCompartment = environment.getIndexSize(key);

				assertEquals(expectedNumberOfPeopleInCompartment, actualNumberOfPeopleInCompartment);
				environment.removePopulationIndex(key);
			}

		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			// if the key is null
			assertModelException(() -> environment.getIndexSize((Object[]) null), SimulationErrorType.NULL_POPULATION_INDEX_KEY);
			// if the key does not correspond to an existing population
			// index
			assertModelException(() -> environment.getIndexSize("bad key"), SimulationErrorType.UNKNOWN_POPULATION_INDEX_KEY);

		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests
	 * {@link EnvironmentImpl#getInventoryBatches(MaterialsProducerId)}
	 */
	@Test
	@UnitTestMethod(name = "getInventoryBatches", args= {MaterialsProducerId.class})
	public void testGetInventoryBatches() {
		/*
		 * Show that the list of batches in inventory reflects the stages that
		 * are actually associated with inventory
		 */

		final long seed = SEED_PROVIDER.getSeedValue(2);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {

			final Set<BatchId> expectedBatches = new LinkedHashSet<>();
			final StageId stageId = environment.createStage();
			final BatchId batchID1 = environment.createBatch(TestMaterialId.MATERIAL_1, 123);
			final BatchId batchID2 = environment.createBatch(TestMaterialId.MATERIAL_2, 12);
			final BatchId batchID3 = environment.createBatch(TestMaterialId.MATERIAL_3, 564);

			expectedBatches.add(batchID1);
			expectedBatches.add(batchID2);
			expectedBatches.add(batchID3);

			assertEquals(expectedBatches, new LinkedHashSet<>(environment.getInventoryBatches(TestMaterialsProducerId.MATERIALS_PRODUCER_1)));

			environment.moveBatchToStage(batchID1, stageId);
			expectedBatches.remove(batchID1);
			assertEquals(expectedBatches, new LinkedHashSet<>(environment.getInventoryBatches(TestMaterialsProducerId.MATERIALS_PRODUCER_1)));

			environment.moveBatchToStage(batchID2, stageId);
			expectedBatches.remove(batchID2);
			assertEquals(expectedBatches, new LinkedHashSet<>(environment.getInventoryBatches(TestMaterialsProducerId.MATERIALS_PRODUCER_1)));

			environment.moveBatchToStage(batchID3, stageId);
			expectedBatches.remove(batchID3);
			assertEquals(expectedBatches, new LinkedHashSet<>(environment.getInventoryBatches(TestMaterialsProducerId.MATERIALS_PRODUCER_1)));

			environment.moveBatchToInventory(batchID2);
			expectedBatches.add(batchID2);
			assertEquals(expectedBatches, new LinkedHashSet<>(environment.getInventoryBatches(TestMaterialsProducerId.MATERIALS_PRODUCER_1)));

			environment.moveBatchToInventory(batchID1);
			expectedBatches.add(batchID1);
			assertEquals(expectedBatches, new LinkedHashSet<>(environment.getInventoryBatches(TestMaterialsProducerId.MATERIALS_PRODUCER_1)));

			environment.moveBatchToInventory(batchID3);
			expectedBatches.add(batchID3);
			assertEquals(expectedBatches, new LinkedHashSet<>(environment.getInventoryBatches(TestMaterialsProducerId.MATERIALS_PRODUCER_1)));

		});

		// precondition tests
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			// if the materials producer id is null
			assertModelException(() -> environment.getInventoryBatches(null), SimulationErrorType.NULL_MATERIALS_PRODUCER_ID);
			// if the materials producer id is unknown
			assertModelException(() -> environment.getInventoryBatches(TestMaterialsProducerId.getUnknownMaterialsProducerId()), SimulationErrorType.UNKNOWN_MATERIALS_PRODUCER_ID);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests
	 * {@link EnvironmentImpl#getInventoryBatchesByMaterialId(MaterialsProducerId, MaterialId)}
	 */
	@Test
	@UnitTestMethod(name = "getInventoryBatchesByMaterialId", args= {MaterialsProducerId.class,MaterialId.class})
	public void testGetInventoryBatchesByMaterialId() {
		/*
		 * Show that the list batches in inventory reflects the stages that are
		 * actually associated with the stage and material id
		 */
		final long seed = SEED_PROVIDER.getSeedValue(3);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			final Set<BatchId> expectedBatches1 = new LinkedHashSet<>();
			final Set<BatchId> expectedBatches2 = new LinkedHashSet<>();
			final Set<BatchId> expectedBatches3 = new LinkedHashSet<>();

			final StageId stageId = environment.createStage();
			final BatchId batchID1 = environment.createBatch(TestMaterialId.MATERIAL_1, 123);
			final BatchId batchID2 = environment.createBatch(TestMaterialId.MATERIAL_2, 12);
			final BatchId batchID3 = environment.createBatch(TestMaterialId.MATERIAL_3, 564);
			final BatchId batchID4 = environment.createBatch(TestMaterialId.MATERIAL_1, 63);
			final BatchId batchID5 = environment.createBatch(TestMaterialId.MATERIAL_2, 346);
			final BatchId batchID6 = environment.createBatch(TestMaterialId.MATERIAL_3, 799);
			final BatchId batchID7 = environment.createBatch(TestMaterialId.MATERIAL_1, 235);
			final BatchId batchID8 = environment.createBatch(TestMaterialId.MATERIAL_2, 387);
			final BatchId batchID9 = environment.createBatch(TestMaterialId.MATERIAL_3, 126);
			final BatchId batchID10 = environment.createBatch(TestMaterialId.MATERIAL_1, 784);

			expectedBatches1.add(batchID1);
			expectedBatches2.add(batchID2);
			expectedBatches3.add(batchID3);
			expectedBatches1.add(batchID4);
			expectedBatches2.add(batchID5);
			expectedBatches3.add(batchID6);
			expectedBatches1.add(batchID7);
			expectedBatches2.add(batchID8);
			expectedBatches3.add(batchID9);
			expectedBatches1.add(batchID10);

			assertEquals(expectedBatches1, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_1)));
			assertEquals(expectedBatches2, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_2)));
			assertEquals(expectedBatches3, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_3)));

			environment.moveBatchToStage(batchID1, stageId);
			expectedBatches1.remove(batchID1);
			assertEquals(expectedBatches1, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_1)));
			assertEquals(expectedBatches2, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_2)));
			assertEquals(expectedBatches3, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_3)));

			environment.moveBatchToStage(batchID2, stageId);
			expectedBatches2.remove(batchID2);
			assertEquals(expectedBatches1, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_1)));
			assertEquals(expectedBatches2, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_2)));
			assertEquals(expectedBatches3, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_3)));

			environment.moveBatchToStage(batchID3, stageId);
			expectedBatches3.remove(batchID3);
			assertEquals(expectedBatches1, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_1)));
			assertEquals(expectedBatches2, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_2)));
			assertEquals(expectedBatches3, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_3)));

			environment.moveBatchToStage(batchID4, stageId);
			expectedBatches1.remove(batchID4);
			assertEquals(expectedBatches1, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_1)));
			assertEquals(expectedBatches2, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_2)));
			assertEquals(expectedBatches3, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_3)));

			environment.moveBatchToStage(batchID5, stageId);
			expectedBatches2.remove(batchID5);
			assertEquals(expectedBatches1, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_1)));
			assertEquals(expectedBatches2, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_2)));
			assertEquals(expectedBatches3, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_3)));

			environment.moveBatchToStage(batchID6, stageId);
			expectedBatches3.remove(batchID6);
			assertEquals(expectedBatches1, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_1)));
			assertEquals(expectedBatches2, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_2)));
			assertEquals(expectedBatches3, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_3)));

			environment.moveBatchToStage(batchID7, stageId);
			expectedBatches1.remove(batchID7);
			assertEquals(expectedBatches1, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_1)));
			assertEquals(expectedBatches2, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_2)));
			assertEquals(expectedBatches3, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_3)));

			environment.moveBatchToStage(batchID8, stageId);
			expectedBatches2.remove(batchID8);
			assertEquals(expectedBatches1, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_1)));
			assertEquals(expectedBatches2, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_2)));
			assertEquals(expectedBatches3, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_3)));

			environment.moveBatchToStage(batchID9, stageId);
			expectedBatches3.remove(batchID9);
			assertEquals(expectedBatches1, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_1)));
			assertEquals(expectedBatches2, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_2)));
			assertEquals(expectedBatches3, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_3)));

			environment.moveBatchToStage(batchID10, stageId);
			expectedBatches1.remove(batchID10);
			assertEquals(expectedBatches1, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_1)));
			assertEquals(expectedBatches2, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_2)));
			assertEquals(expectedBatches3, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_3)));

			environment.moveBatchToInventory(batchID10);
			expectedBatches1.add(batchID10);
			assertEquals(expectedBatches1, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_1)));
			assertEquals(expectedBatches2, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_2)));
			assertEquals(expectedBatches3, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_3)));

			environment.moveBatchToInventory(batchID9);
			expectedBatches3.add(batchID9);
			assertEquals(expectedBatches1, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_1)));
			assertEquals(expectedBatches2, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_2)));
			assertEquals(expectedBatches3, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_3)));

			environment.moveBatchToInventory(batchID8);
			expectedBatches2.add(batchID8);
			assertEquals(expectedBatches1, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_1)));
			assertEquals(expectedBatches2, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_2)));
			assertEquals(expectedBatches3, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_3)));

			environment.moveBatchToInventory(batchID7);
			expectedBatches1.add(batchID7);
			assertEquals(expectedBatches1, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_1)));
			assertEquals(expectedBatches2, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_2)));
			assertEquals(expectedBatches3, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_3)));

			environment.moveBatchToInventory(batchID6);
			expectedBatches3.add(batchID6);
			assertEquals(expectedBatches1, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_1)));
			assertEquals(expectedBatches2, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_2)));
			assertEquals(expectedBatches3, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_3)));

			environment.moveBatchToInventory(batchID5);
			expectedBatches2.add(batchID5);
			assertEquals(expectedBatches1, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_1)));
			assertEquals(expectedBatches2, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_2)));
			assertEquals(expectedBatches3, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_3)));

			environment.moveBatchToInventory(batchID4);
			expectedBatches1.add(batchID4);
			assertEquals(expectedBatches1, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_1)));
			assertEquals(expectedBatches2, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_2)));
			assertEquals(expectedBatches3, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_3)));

			environment.moveBatchToInventory(batchID3);
			expectedBatches3.add(batchID3);
			assertEquals(expectedBatches1, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_1)));
			assertEquals(expectedBatches2, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_2)));
			assertEquals(expectedBatches3, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_3)));

			environment.moveBatchToInventory(batchID2);
			expectedBatches2.add(batchID2);
			assertEquals(expectedBatches1, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_1)));
			assertEquals(expectedBatches2, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_2)));
			assertEquals(expectedBatches3, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_3)));

			environment.moveBatchToInventory(batchID1);
			expectedBatches1.add(batchID1);
			assertEquals(expectedBatches1, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_1)));
			assertEquals(expectedBatches2, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_2)));
			assertEquals(expectedBatches3, new LinkedHashSet<>(environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.MATERIAL_3)));

		});

		// precondition tests
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			// if the materials producer id is null
			assertModelException(() -> environment.getInventoryBatchesByMaterialId(null, TestMaterialId.MATERIAL_1), SimulationErrorType.NULL_MATERIALS_PRODUCER_ID);
			// if the materials producer id is unknown
			assertModelException(() -> environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.getUnknownMaterialsProducerId(), TestMaterialId.MATERIAL_1),
					SimulationErrorType.UNKNOWN_MATERIALS_PRODUCER_ID);
			// if the material id is null
			assertModelException(() -> environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, null), SimulationErrorType.NULL_MATERIAL_ID);
			// if the material id is unknown
			assertModelException(() -> environment.getInventoryBatchesByMaterialId(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialId.getUnknownMaterialId()),
					SimulationErrorType.UNKNOWN_MATERIAL_ID);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests {@link EnvironmentImpl#getMaterialIds()}
	 */
	@Test
	@UnitTestMethod(name = "getMaterialIds", args= {})
	public void testGetMaterialIds() {
		/*
		 * Assert that the material identifiers from the environment are the
		 * same as the elements of the local MaterialId enumeration.
		 */

		final long seed = SEED_PROVIDER.getSeedValue(4);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			final Set<TestMaterialId> expectedMaterialIds = EnumSet.allOf(TestMaterialId.class);
			assertEquals(expectedMaterialIds, environment.getMaterialIds());
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests {@link EnvironmentImpl#getMaterialsProducerIds()}
	 */
	@Test
	@UnitTestMethod(name = "getMaterialsProducerIds", args= {})
	public void testGetMaterialsProducerIds() {
		/*
		 * Assert that the materials producer identifiers from the environment
		 * are the same as the elements of the local TestMaterialsProducerId
		 * enumeration.
		 */
		final long seed = SEED_PROVIDER.getSeedValue(5);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			final Set<TestMaterialsProducerId> expectedMaterialProducerIds = EnumSet.allOf(TestMaterialsProducerId.class);
			assertEquals(expectedMaterialProducerIds, environment.getMaterialsProducerIds());
		});
		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests
	 * {@link EnvironmentImpl#getMaterialsProducerPropertyDefinition(MaterialsProducerPropertyId)}
	 */
	@Test
	@UnitTestMethod(name = "getMaterialsProducerPropertyDefinition", args= {MaterialsProducerPropertyId.class})
	public void testGetMaterialsProducerPropertyDefinition() {
		/*
		 * Retrieve each materials producer property definition and assert that
		 * it equals the one held in the test plan executor.
		 */
		final long seed = SEED_PROVIDER.getSeedValue(6);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		for (final TestMaterialsProducerPropertyId testMaterialsProducerPropertyId : TestMaterialsProducerPropertyId.values()) {
			taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
				final PropertyDefinition expectedPropertyDefinition = scenario.getMaterialsProducerPropertyDefinition(testMaterialsProducerPropertyId);
				final PropertyDefinition actualPropertyDefinition = environment.getMaterialsProducerPropertyDefinition(testMaterialsProducerPropertyId);
				assertEquals(expectedPropertyDefinition, actualPropertyDefinition);
			});
		}

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			// if the property id is null
			assertModelException(() -> environment.getMaterialsProducerPropertyDefinition(null), SimulationErrorType.NULL_MATERIALS_PRODUCER_PROPERTY_ID);
			// if the property id does not correspond to a known region
			// property identifier
			assertModelException(() -> environment.getMaterialsProducerPropertyDefinition(TestMaterialsProducerPropertyId.getUnknownMaterialsProducerPropertyId()),
					SimulationErrorType.UNKNOWN_MATERIALS_PRODUCER_PROPERTY_ID);
		});
		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests
	 * {@link EnvironmentImpl#getMaterialsProducerPropertyTime(MaterialsProducerId, MaterialsProducerPropertyId)}
	 */
	@Test
	@UnitTestMethod(name = "getMaterialsProducerPropertyTime", args= {MaterialsProducerId.class, MaterialsProducerPropertyId.class})
	public void testGetMaterialsProducerPropertyTime() {
		/*
		 * For each materials producer property first show that the property
		 * time is zero. Next change each property so that the new property
		 * times will be the current time and test that this is so. Finally,
		 * move forward in time and show that the property value times still
		 * reflect the time when we set them and not the current time.
		 */
		final long seed = SEED_PROVIDER.getSeedValue(7);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.TRUE, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			for (final TestMaterialsProducerId testMaterialsProducerId : TestMaterialsProducerId.values()) {
				for (final TestMaterialsProducerPropertyId propertyID : TestMaterialsProducerPropertyId.values()) {
					final double expectedPropertyTime = 0;
					final double actualPropertyTime = environment.getMaterialsProducerPropertyTime(testMaterialsProducerId, propertyID);
					assertEquals(expectedPropertyTime, actualPropertyTime, 0);
				}
			}

		});

		/*
		 * Change each property value and show that the time values are the
		 * current time
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			for (final TestMaterialsProducerId testMaterialsProducerId : TestMaterialsProducerId.values()) {
				for (final TestMaterialsProducerPropertyId propertyID : TestMaterialsProducerPropertyId.values()) {
					final PropertyDefinition propertyDefinition = environment.getMaterialsProducerPropertyDefinition(propertyID);
					final Object actualPropertyValue = environment.getMaterialsProducerPropertyValue(testMaterialsProducerId, propertyID);
					Object updatedPropertyValue = null;
					while ((updatedPropertyValue == null) || updatedPropertyValue.equals(actualPropertyValue)) {
						updatedPropertyValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());
					}
					environment.setMaterialsProducerPropertyValue(testMaterialsProducerId, propertyID, updatedPropertyValue);
					final double expectedPropertyTime = 2.0;
					final double actualPropertyTime = environment.getMaterialsProducerPropertyTime(testMaterialsProducerId, propertyID);
					assertEquals(expectedPropertyTime, actualPropertyTime, 0);
				}
			}

		});

		/*
		 * Time has moved forward and we show that the property value times
		 * still reflect when they were set
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			for (final TestMaterialsProducerId testMaterialsProducerId : TestMaterialsProducerId.values()) {
				for (final TestMaterialsProducerPropertyId propertyID : TestMaterialsProducerPropertyId.values()) {
					final double expectedPropertyTime = 2.0;
					final double actualPropertyTime = environment.getMaterialsProducerPropertyTime(testMaterialsProducerId, propertyID);
					assertEquals(expectedPropertyTime, actualPropertyTime, 0);
				}
			}

		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			// if the materials producer id is null
			assertModelException(() -> environment.getMaterialsProducerPropertyTime(null, TestMaterialsProducerPropertyId.MATERIALS_PRODUCER_PROPERTY_1),
					SimulationErrorType.NULL_MATERIALS_PRODUCER_ID);
			// if the materials producer id is unknown
			assertModelException(
					() -> environment.getMaterialsProducerPropertyTime(TestMaterialsProducerId.getUnknownMaterialsProducerId(), TestMaterialsProducerPropertyId.MATERIALS_PRODUCER_PROPERTY_1),
					SimulationErrorType.UNKNOWN_MATERIALS_PRODUCER_ID);
			// if the property id is null
			assertModelException(() -> environment.getMaterialsProducerPropertyTime(TestMaterialsProducerId.MATERIALS_PRODUCER_1, null), SimulationErrorType.NULL_MATERIALS_PRODUCER_PROPERTY_ID);
			// if the property is unknown
			assertModelException(
					() -> environment.getMaterialsProducerPropertyTime(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialsProducerPropertyId.getUnknownMaterialsProducerPropertyId()),
					SimulationErrorType.UNKNOWN_MATERIALS_PRODUCER_PROPERTY_ID);

		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests
	 * {@link EnvironmentImpl#getMaterialsProducerPropertyValue(MaterialsProducerId, MaterialsProducerPropertyId)}
	 */
	@Test
	@UnitTestMethod(name = "getMaterialsProducerPropertyValue", args= {MaterialsProducerId.class, MaterialsProducerPropertyId.class})
	public void testGetMaterialsProducerPropertyValue() {
		/*
		 * For each materials producer and material producer property
		 * definition, show that the current value is the default value we
		 * expect from the property definition. Then show that after we change
		 * the value that we can retrieve the new value just so we know that we
		 * are not observing an artifact of the original default value.
		 */

		final long seed = SEED_PROVIDER.getSeedValue(8);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.TRUE, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			for (final TestMaterialsProducerId testMaterialsProducerId : TestMaterialsProducerId.values()) {
				for (final TestMaterialsProducerPropertyId propertyID : TestMaterialsProducerPropertyId.values()) {
					/*
					 * We first assert that the current value of the property is
					 * the default for the definition.
					 */

					final PropertyDefinition propertyDefinition = environment.getMaterialsProducerPropertyDefinition(propertyID);
					assertTrue(propertyDefinition.getDefaultValue().isPresent());
					final Object expectedPropertyValue = propertyDefinition.getDefaultValue().get();
					final Object actualPropertyValue = environment.getMaterialsProducerPropertyValue(testMaterialsProducerId, propertyID);
					assertEquals(expectedPropertyValue, actualPropertyValue);

					/*
					 * To be more thorough, we also assert that we can retrieve
					 * any arbitrary value since we know that default values are
					 * potentially handled as a special case.
					 */
					Object updatedPropertyValue = null;
					while ((updatedPropertyValue == null) || updatedPropertyValue.equals(actualPropertyValue)) {
						updatedPropertyValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());
					}
					environment.setMaterialsProducerPropertyValue(testMaterialsProducerId, propertyID, updatedPropertyValue);
					final Object retrievedPropertyValue = environment.getMaterialsProducerPropertyValue(testMaterialsProducerId, propertyID);
					assertEquals(updatedPropertyValue, retrievedPropertyValue);
				}
			}

		});

		/*
		 * Precondition tests
		 */

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			// if the materials producer id is null
			assertModelException(() -> environment.getMaterialsProducerPropertyValue(null, TestMaterialsProducerPropertyId.MATERIALS_PRODUCER_PROPERTY_1),
					SimulationErrorType.NULL_MATERIALS_PRODUCER_ID);
			// if the materials producer id is unknown
			assertModelException(
					() -> environment.getMaterialsProducerPropertyValue(TestMaterialsProducerId.getUnknownMaterialsProducerId(), TestMaterialsProducerPropertyId.MATERIALS_PRODUCER_PROPERTY_1),
					SimulationErrorType.UNKNOWN_MATERIALS_PRODUCER_ID);
			// if the property id is null
			assertModelException(() -> environment.getMaterialsProducerPropertyValue(TestMaterialsProducerId.MATERIALS_PRODUCER_1, null), SimulationErrorType.NULL_MATERIALS_PRODUCER_PROPERTY_ID);
			// if the property is unknown
			assertModelException(
					() -> environment.getMaterialsProducerPropertyValue(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialsProducerPropertyId.getUnknownMaterialsProducerPropertyId()),
					SimulationErrorType.UNKNOWN_MATERIALS_PRODUCER_PROPERTY_ID);

		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

	}

	/**
	 * Tests
	 * {@link EnvironmentImpl#getMaterialsProducerResourceLevel(MaterialsProducerId, ResourceId)}
	 */
	@Test
	@UnitTestMethod(name = "getMaterialsProducerResourceLevel", args= {MaterialsProducerId.class, ResourceId.class})
	public void testGetMaterialsProducerResourceLevel() {

		/*
		 * Show that the materials producer's resource level provided by the
		 * environment reflects the changes to that level over time.
		 */

		final long seed = SEED_PROVIDER.getSeedValue(9);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			/*
			 * We first assert that the current resource level is zero
			 */
			final long expectedResourceLevel = 0;
			final long actualResourceLevel = environment.getMaterialsProducerResourceLevel(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestResourceId.RESOURCE1);
			assertEquals(expectedResourceLevel, actualResourceLevel);

			/*
			 * Next we create 100 units of resource and show that there are 100
			 * units.
			 */
			final BatchId batchId = environment.createBatch(TestMaterialId.MATERIAL_3, 456);
			final StageId stageId = environment.createStage();
			environment.moveBatchToStage(batchId, stageId);
			environment.convertStageToResource(stageId, TestResourceId.RESOURCE1, 100);
			assertEquals(100, environment.getMaterialsProducerResourceLevel(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestResourceId.RESOURCE1));

			/*
			 * Finally we remove 30 units by transferring them to region 1 and
			 * show that the resulting level is correct
			 */

			environment.transferProducedResourceToRegion(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestResourceId.RESOURCE1, TestRegionId.REGION_1, 30);
			assertEquals(70, environment.getMaterialsProducerResourceLevel(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestResourceId.RESOURCE1));

		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			// if the materials producer id is null
			assertModelException(() -> environment.getMaterialsProducerResourceLevel(null, TestResourceId.RESOURCE1), SimulationErrorType.NULL_MATERIALS_PRODUCER_ID);
			// if the materials producer id is unknown
			assertModelException(() -> environment.getMaterialsProducerResourceLevel(TestMaterialsProducerId.getUnknownMaterialsProducerId(), TestResourceId.RESOURCE1),
					SimulationErrorType.UNKNOWN_MATERIALS_PRODUCER_ID);
			// if the resource id is null
			assertModelException(() -> environment.getMaterialsProducerResourceLevel(TestMaterialsProducerId.MATERIALS_PRODUCER_1, null), SimulationErrorType.NULL_RESOURCE_ID);
			// if the resource is unknown
			assertModelException(() -> environment.getMaterialsProducerResourceLevel(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestResourceId.getUnknownResourceId()),
					SimulationErrorType.UNKNOWN_RESOURCE_ID);

		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests
	 * {@link EnvironmentImpl#getMaterialsProducerResourceTime(MaterialsProducerId, ResourceId)}
	 */
	@Test
	@UnitTestMethod(name = "getMaterialsProducerResourceTime", args= {MaterialsProducerId.class, ResourceId.class})
	public void testGetMaterialsProducerResourceTime() {
		/*
		 * For each region property first show that the property time is zero.
		 * Next change each property so that the new property times will be the
		 * current time and test that this is so. Finally, move forward in time
		 * and show that the property value times still reflect the time when we
		 * set them and not the current time.
		 */
		final long seed = SEED_PROVIDER.getSeedValue(10);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		/*
		 * Show that a newly added resource has a time value of now
		 */
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			final BatchId batchId1 = environment.createBatch(TestMaterialId.MATERIAL_1, 38);
			final BatchId batchId2 = environment.createBatch(TestMaterialId.MATERIAL_2, 66);
			final StageId stageId = environment.createStage();
			environment.moveBatchToStage(batchId1, stageId);
			environment.moveBatchToStage(batchId2, stageId);
			environment.convertStageToResource(stageId, TestResourceId.RESOURCE3, 30);
			assertEquals(environment.getTime(), environment.getMaterialsProducerResourceTime(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestResourceId.RESOURCE3), 0);
		});

		/*
		 * Change the resource again by transferring some of it to a region
		 */
		taskPlanContainer.addTaskPlan(TestRegionId.REGION_1, testTime++, (environment) -> {
			environment.transferProducedResourceToRegion(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestResourceId.RESOURCE3, TestRegionId.REGION_1, 10);
			assertEquals(environment.getTime(), environment.getMaterialsProducerResourceTime(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestResourceId.RESOURCE3), 0);
		});

		/*
		 * Time has moved forward and we show that the resource time reflects
		 * when it was last changed
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			assertEquals(environment.getTime() - 1, environment.getMaterialsProducerResourceTime(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestResourceId.RESOURCE3),
					EnvironmentSupport.COMPARISON_EPSILON);
		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			// if the materials producer id is null
			assertModelException(() -> environment.getMaterialsProducerResourceTime(null, TestResourceId.RESOURCE3), SimulationErrorType.NULL_MATERIALS_PRODUCER_ID);
			// if the materials producer id is unknown
			assertModelException(() -> environment.getMaterialsProducerResourceTime(TestMaterialsProducerId.getUnknownMaterialsProducerId(), TestResourceId.RESOURCE3),
					SimulationErrorType.UNKNOWN_MATERIALS_PRODUCER_ID);
			// if the resource id is null
			assertModelException(() -> environment.getMaterialsProducerResourceTime(TestMaterialsProducerId.MATERIALS_PRODUCER_1, null), SimulationErrorType.NULL_RESOURCE_ID);
			// if the resource is unknown
			assertModelException(() -> environment.getMaterialsProducerResourceTime(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestResourceId.getUnknownResourceId()),
					SimulationErrorType.UNKNOWN_RESOURCE_ID);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests {@link EnvironmentImpl#getMaterialsProducerPropertyIds()}
	 */
	@Test
	@UnitTestMethod(name = "getMaterialsProducerPropertyIds", args= {})
	public void testGetMaterialsProducerPropertyIds() {
		/*
		 * Assert that the materials production property identifiers from the
		 * environment are the same as the elements of the local
		 * RegionPropertyId enumeration.
		 */

		final long seed = SEED_PROVIDER.getSeedValue(11);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			final Set<TestMaterialsProducerPropertyId> expectedRegionPropertyIds = EnumSet.allOf(TestMaterialsProducerPropertyId.class);
			assertEquals(expectedRegionPropertyIds, environment.getMaterialsProducerPropertyIds());
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests
	 * {@link EnvironmentImpl#sampleGroup(GroupId, MonoWeightingFunction)}
	 */
	@Test
	@UnitTestMethod(name = "sampleGroup", args= {GroupId.class, MonoWeightingFunction.class})
	public void testSampleGroup_GroupId_MonoWeightingFunction() {

		/*
		 * Assert that group contacts via MonoWeightingFunctions work properly
		 */

		final long seed = SEED_PROVIDER.getSeedValue(12);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 0;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			/*
			 * Add a group
			 */
			final GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);

			final int groupSize = 20;

			/*
			 * Add the first 20 people to the group
			 */
			for (int personIndex = 0; personIndex < groupSize; personIndex++) {
				PersonId personId = new PersonId(personIndex);
				environment.addPersonToGroup(personId, groupId);
			}

			/*
			 * Force the random selection of a person from the group to person 3
			 */
			Optional<PersonId> opt = environment.sampleGroup(groupId, EnvironmentSupport::getPerson3MonoWeight);
			assertTrue(opt.isPresent());
			assertEquals(3, opt.get().getValue());

			// use a uniform distribution with 10000 repetitions

			final Map<Integer, Counter> hits = new LinkedHashMap<>();
			for (int personId = 0; personId < groupSize; personId++) {
				hits.put(personId, new Counter());
			}
			for (int i = 0; i < 10000; i++) {
				opt = environment.sampleGroup(groupId, EnvironmentSupport::getConstantMonoWeight);
				assertTrue(opt.isPresent());
				hits.get(opt.get().getValue()).count++;
			}
			// show that each person was selected about 500 times
			for (final Integer personId : hits.keySet()) {
				final Counter counter = hits.get(personId);
				assertTrue(counter.count > 400);
				assertTrue(counter.count < 600);
			}

		});

		// show that a weighting function that returns all zeros will result in
		// an optional where no value is present
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			final GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);

			final int groupSize = 20;

			/*
			 * Add the first 20 people to the group
			 */
			for (int personIndex = 0; personIndex < groupSize; personIndex++) {
				PersonId personId = new PersonId(personIndex);
				environment.addPersonToGroup(personId, groupId);
			}
			Optional<PersonId> opt = environment.sampleGroup(groupId, EnvironmentSupport::getZeroMonoWeight);
			assertTrue(!opt.isPresent());
		});

		// test preconditions
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			// if the group id is null
			assertModelException(() -> environment.sampleGroup(null, EnvironmentSupport::getConstantMonoWeight), SimulationErrorType.NULL_GROUP_ID);
			// if the group id is unknown(group does not exist) *
			assertModelException(() -> environment.sampleGroup(new GroupId(-1), EnvironmentSupport::getConstantMonoWeight), SimulationErrorType.UNKNOWN_GROUP_ID);
			// if the monoWeightingFunction is null
			 MonoWeightingFunction nullMonoWeightingFunction = null;
			assertModelException(() -> environment.sampleGroup(new GroupId(0), nullMonoWeightingFunction), SimulationErrorType.NULL_WEIGHTING_FUNCTION);
			// if the monoWeightingFunction is malformed. (all invocations
			// evaluate to zero, some evaluate to negative numbers, etc.)
			assertModelException(() -> environment.sampleGroup(new GroupId(0), EnvironmentSupport::getNegativeMonoWeight), SimulationErrorType.MALFORMED_WEIGHTING_FUNCTION);

		});
		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	
}
