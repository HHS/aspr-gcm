package gcm.automated;

import static gcm.automated.support.EnvironmentSupport.addObservationContainer;
import static gcm.automated.support.EnvironmentSupport.addStandardComponentsAndTypes;
import static gcm.automated.support.EnvironmentSupport.addStandardPeople;
import static gcm.automated.support.EnvironmentSupport.addStandardPropertyDefinitions;
import static gcm.automated.support.EnvironmentSupport.addStandardTrackingAndScenarioId;
import static gcm.automated.support.EnvironmentSupport.addTaskPlanContainer;
import static gcm.automated.support.EnvironmentSupport.assertAllPlansExecuted;
import static gcm.automated.support.EnvironmentSupport.generatePropertyValue;
import static gcm.automated.support.EnvironmentSupport.getRandomGenerator;
import static gcm.automated.support.EnvironmentSupport.getReplication;
import static gcm.automated.support.ExceptionAssertion.assertModelException;
import static gcm.simulation.Filter.allPeople;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.math3.random.RandomGenerator;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import gcm.automated.support.EnvironmentSupport;
import gcm.automated.support.EnvironmentSupport.PropertyAssignmentPolicy;
import gcm.automated.support.ObservationContainer;
import gcm.automated.support.SeedProvider;
import gcm.automated.support.TaskPlanContainer;
import gcm.automated.support.TestCompartmentId;
import gcm.automated.support.TestGlobalComponentId;
import gcm.automated.support.TestPersonPropertyId;
import gcm.automated.support.TestRegionId;
import gcm.automated.support.TestResourceId;
import gcm.replication.Replication;
import gcm.scenario.CompartmentId;
import gcm.scenario.CompartmentPropertyId;
import gcm.scenario.PersonId;
import gcm.scenario.PersonPropertyId;
import gcm.scenario.PropertyDefinition;
import gcm.scenario.RegionId;
import gcm.scenario.ResourceId;
import gcm.scenario.Scenario;
import gcm.scenario.ScenarioBuilder;
import gcm.scenario.UnstructuredScenarioBuilder;
import gcm.simulation.EnvironmentImpl;
import gcm.simulation.ObservationType;
import gcm.simulation.Simulation;
import gcm.simulation.SimulationErrorType;
import gcm.util.MultiKey;
import gcm.util.annotations.UnitTest;
import gcm.util.annotations.UnitTestMethod;

@UnitTest(target = EnvironmentImpl.class)

public class AT_EnvironmentImpl_12 {

	private static SeedProvider SEED_PROVIDER;

	@BeforeClass
	public static void beforeClass() {
		SEED_PROVIDER = new SeedProvider(EnvironmentSupport.getMetaSeed(12));
	}

	/**
	 * Internal test(not part of public tests) to show that there are no large
	 * gaps in the seed cases generated by the SeedProvider.
	 */
	@AfterClass
	public static void afterClass() {
		// System.out.println(SEED_PROVIDER.generateUnusedSeedReport());
	}

	/**
	 * Tests
	 * {@link EnvironmentImpl#observeCompartmentalPersonPropertyChange(boolean, CompartmentId, PersonPropertyId)}
	 *
	 */
	@Test
	@UnitTestMethod(name = "observeCompartmentalPersonPropertyChange", args = { boolean.class, CompartmentId.class, PersonPropertyId.class })
	public void testObserveCompartmentalPersonPropertyChange() {
		/*
		 * We test for the post conditions by first having the components
		 * execute a series time-separated plans and then examining the
		 * observations recorded by each component. Precondition tests are added
		 * at the end.
		 *
		 * Actions
		 *
		 * Time 1 : Global Component 1 starts observation of Person Property P
		 * constrained to Compartment2
		 *
		 * Time 2 : Compartment 2 starts observation of Person Property P
		 * constrained to Compartment2
		 *
		 * Time 3 : Compartment 2 changes a person's property value. The person
		 * is in Compartment2 and Region1
		 *
		 * Time 4 : Global Component 1 stops observation of Person Property P
		 *
		 * Time 5 : Region 2 starts observation of Person Property P constrained
		 * to Compartment2
		 *
		 * Time 6 : Global Component 2 changes the person's property
		 *
		 * Expected observations
		 *
		 * Global Component 1: first property change --> demonstrates Post
		 * Conditions 1 and 3
		 *
		 * Compartment 2: second property change --> demonstrates Post Condition
		 * 4
		 *
		 * Region 2: second property change --> demonstrates Post Conditions 1
		 * and 2
		 *
		 * All others: no observations --> demonstrates Post Condition 2
		 */
		final long seed = SEED_PROVIDER.getSeedValue(0);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.TRUE, randomGenerator);
		Scenario scenario = scenarioBuilder.build();

		final PropertyDefinition propertyDefinition = scenario.getPersonPropertyDefinition(TestPersonPropertyId.PERSON_PROPERTY_1);
		assertTrue(propertyDefinition.getDefaultValue().isPresent());
		final Object currentPropertyValue = propertyDefinition.getDefaultValue().get();
		Object propertyValue1 = null;
		while (currentPropertyValue.equals(propertyValue1) || (propertyValue1 == null)) {
			propertyValue1 = generatePropertyValue(propertyDefinition, randomGenerator);
		}
		assertNotNull(propertyValue1);
		assertFalse(propertyValue1.equals(currentPropertyValue));
		Object propertyValue2 = null;
		while (currentPropertyValue.equals(propertyValue2) || propertyValue1.equals(propertyValue2) || (propertyValue2 == null)) {
			propertyValue2 = generatePropertyValue(propertyDefinition, randomGenerator);
		}
		assertNotNull(propertyValue2);
		assertFalse(propertyValue2.equals(currentPropertyValue));
		assertFalse(propertyValue2.equals(propertyValue1));

		final Object firstPropertyValue = propertyValue1;
		final Object secondPropertyValue = propertyValue2;

		final List<PersonId> peopleInCompartment2Region1 = new ArrayList<>();
		for (final PersonId personId : scenario.getPeopleIds()) {
			final CompartmentId personCompartment = scenario.getPersonCompartment(personId);
			if (personCompartment.equals(TestCompartmentId.COMPARTMENT_2)) {
				final RegionId personRegion = scenario.getPersonRegion(personId);
				if (personRegion.equals(TestRegionId.REGION_1)) {
					peopleInCompartment2Region1.add(personId);
				}
			}
		}
		assertTrue(peopleInCompartment2Region1.size() >= 1);
		final PersonId selectedPersonId = peopleInCompartment2Region1.get(0);

		/*
		 * Time 1 : Global Component 1 starts observation of Person Property P
		 * constrained to Compartment2
		 */

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			environment.observeCompartmentalPersonPropertyChange(true, TestCompartmentId.COMPARTMENT_2, TestPersonPropertyId.PERSON_PROPERTY_1);
		});

		/*
		 * Time 2 : Compartment 2 starts observation of Person Property P
		 */

		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.observeCompartmentalPersonPropertyChange(true, TestCompartmentId.COMPARTMENT_2, TestPersonPropertyId.PERSON_PROPERTY_1);
		});

		/*
		 * Time 3 : Compartment 2 changes a person's property value. The person
		 * is in Compartment 2 and Region 1
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.setPersonPropertyValue(selectedPersonId, TestPersonPropertyId.PERSON_PROPERTY_1, firstPropertyValue);
		});

		/*
		 * Time 4 : Global Component 1 stops observation of Person property P
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			environment.observeCompartmentalPersonPropertyChange(false, TestCompartmentId.COMPARTMENT_2, TestPersonPropertyId.PERSON_PROPERTY_1);
		});

		/*
		 * Time 5 : Region 2 starts observation of Person Property P constrained
		 * to Compartment2
		 */
		taskPlanContainer.addTaskPlan(TestRegionId.REGION_2, testTime++, (environment) -> {
			environment.observeCompartmentalPersonPropertyChange(true, TestCompartmentId.COMPARTMENT_2, TestPersonPropertyId.PERSON_PROPERTY_1);
		});

		/*
		 * Time 6 : Global Component 2 changes the person's property
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, testTime++, (environment) -> {
			environment.setPersonPropertyValue(selectedPersonId, TestPersonPropertyId.PERSON_PROPERTY_1, secondPropertyValue);
		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			// if the property id is null
			assertModelException(() -> environment.observeCompartmentalPersonPropertyChange(true, TestCompartmentId.COMPARTMENT_1, null), SimulationErrorType.NULL_PERSON_PROPERTY_ID);
			// if the property is unknown
			assertModelException(() -> environment.observeCompartmentalPersonPropertyChange(true, TestCompartmentId.COMPARTMENT_1, TestPersonPropertyId.getUnknownPersonPropertyId()),
					SimulationErrorType.UNKNOWN_PERSON_PROPERTY_ID);
			// if the compartment id is null
			assertModelException(() -> environment.observeCompartmentalPersonPropertyChange(true, null, TestPersonPropertyId.PERSON_PROPERTY_1), SimulationErrorType.NULL_COMPARTMENT_ID);
			// if the compartment id is unknown
			assertModelException(() -> environment.observeCompartmentalPersonPropertyChange(true, TestCompartmentId.getUnknownCompartmentId(), TestPersonPropertyId.PERSON_PROPERTY_1),
					SimulationErrorType.UNKNOWN_COMPARTMENT_ID);

		});

		Simulation simulation = new Simulation();
		simulation.setReplication(getReplication(randomGenerator));
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		final Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		/*
		 * Expected observations
		 *
		 * Global Component 1 1: first property change --> demonstrates Post
		 * Conditions 1 and 3
		 */

		expectedObservations.add(
				new MultiKey(3.0, TestGlobalComponentId.GLOBAL_COMPONENT_1, ObservationType.PERSON_PROPERTY, selectedPersonId, TestPersonPropertyId.PERSON_PROPERTY_1, firstPropertyValue));

		/*
		 * Compartment 2: second property change --> demonstrates Post Condition
		 * 4
		 */
		expectedObservations.add(new MultiKey(6.0, TestCompartmentId.COMPARTMENT_2, ObservationType.PERSON_PROPERTY, selectedPersonId, TestPersonPropertyId.PERSON_PROPERTY_1, secondPropertyValue));

		/*
		 * Region 2: second property change --> demonstrates Post Conditions 1
		 * and 2
		 */
		expectedObservations.add(new MultiKey(6.0, TestRegionId.REGION_2, ObservationType.PERSON_PROPERTY, selectedPersonId, TestPersonPropertyId.PERSON_PROPERTY_1, secondPropertyValue));
		/*
		 * All others: no observations --> demonstrates Post Condition 2
		 */

		final Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);

	}

	/**
	 * Tests
	 * {@link EnvironmentImpl#observeCompartmentalPersonResourceChange(boolean, CompartmentId, ResourceId)}
	 *
	 */
	@Test
	@UnitTestMethod(name = "observeCompartmentalPersonResourceChange", args = { boolean.class, CompartmentId.class, ResourceId.class })
	public void testObserveCompartmentalPersonResourceChange() {
		/*
		 * We test for the post conditions by first having the components
		 * execute a series time-separated plans and then examining the
		 * observations recorded by each component. Precondition tests are added
		 * at the end.
		 *
		 * Actions
		 *
		 * Time 1 : Compartment 1 starts observation of person's Resource Level.
		 * Person will be in Compartment 1 and Region 1.
		 *
		 * Time 2 : Region 1 starts observation of person's Resource Level
		 *
		 * Time 3 : Compartment 2 starts observation of person's Resource Level
		 *
		 * Time 4 : Region 1 changes person's Resource Level by transfer to
		 * person from Region 1
		 *
		 * Time 5 : Global Component 1 starts observation of person's Resource
		 * Level
		 *
		 * Time 6 : Compartment 2 stops observation of person's Resource Level
		 *
		 * Time 7 : Region 1 changes person's resource level by transfer from
		 * person to Region 1
		 *
		 * Time 8 : Compartment 1 changes person's Resource Level by removing
		 * resource from person
		 *
		 * Expected observations
		 *
		 * Compartment 1: first and second resource changes --> demonstrates
		 * Post Conditions 1 and 4
		 *
		 * Compartment 2: first resource change --> demonstrates Post Condition
		 * 1 and 3
		 *
		 * Region 1: third property changes --> demonstrates Post Conditions 1
		 * and 4
		 *
		 * Global Component 1: second and third property changes -->
		 * demonstrates Post Conditions 1 and 2
		 *
		 * All others: no observations --> demonstrates Post Condition 2
		 */

		final long seed = SEED_PROVIDER.getSeedValue(1);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.TRUE, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		/*
		 * Select a resource
		 */
		final TestResourceId selectedResourceId = TestResourceId.getRandomResourceId(randomGenerator);

		/*
		 * Select a person from Compartment 1, Region 1
		 */
		final List<PersonId> peopleInCompartment1AndRegion1 = new ArrayList<>();
		for (final PersonId personId : scenario.getPeopleIds()) {
			final CompartmentId personCompartment = scenario.getPersonCompartment(personId);
			if (personCompartment.equals(TestCompartmentId.COMPARTMENT_1)) {
				final RegionId personRegion = scenario.getPersonRegion(personId);
				if (personRegion.equals(TestRegionId.REGION_1)) {
					peopleInCompartment1AndRegion1.add(personId);
				}
			}
		}
		assertTrue(peopleInCompartment1AndRegion1.size() >= 1);
		final int personIndex = randomGenerator.nextInt(peopleInCompartment1AndRegion1.size());
		final PersonId selectedPersonId = peopleInCompartment1AndRegion1.get(personIndex);

		/*
		 * select amounts to move and calculate expected resulting resource
		 * levels for the selected person and resource
		 */
		final long firstAmount = 1000;
		final long secondAmount = 300;
		final long thirdAmount = 400;

		final long expectedFirstLevel = firstAmount;
		final long expectedSecondLevel = firstAmount - secondAmount;
		final long expectedThirdLevel = expectedSecondLevel - thirdAmount;

		/*
		 * Time 1 : Compartment 1 starts observation of person's Resource Level.
		 * Person will be in Compartment 1 and Region 1.
		 */

		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			environment.observeCompartmentalPersonResourceChange(true, TestCompartmentId.COMPARTMENT_1, selectedResourceId);
		});

		/*
		 * Time 2 : Region 1 starts observation of person's Resource Level
		 */
		taskPlanContainer.addTaskPlan(TestRegionId.REGION_1, testTime++, (environment) -> {
			environment.observeCompartmentalPersonResourceChange(true, TestCompartmentId.COMPARTMENT_1, selectedResourceId);
		});

		/*
		 * Time 3 : Compartment 2 starts observation of person's Resource Level
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.observeCompartmentalPersonResourceChange(true, TestCompartmentId.COMPARTMENT_1, selectedResourceId);
		});

		/*
		 * Time 4 :Region 1 changes person's Resource Level by transfer to
		 * person from Region 1
		 */
		taskPlanContainer.addTaskPlan(TestRegionId.REGION_1, testTime++, (environment) -> {
			environment.addResourceToRegion(selectedResourceId, TestRegionId.REGION_1, firstAmount);
			environment.transferResourceToPerson(selectedResourceId, selectedPersonId, firstAmount);
		});

		/*
		 * Time 5 : Global Component 1 starts observation of person's Resource
		 * Level
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			environment.observeCompartmentalPersonResourceChange(true, TestCompartmentId.COMPARTMENT_1, selectedResourceId);
		});

		/*
		 * Time 6 : Compartment 2 stops observation of person's Resource Level
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.observeCompartmentalPersonResourceChange(false, TestCompartmentId.COMPARTMENT_1, selectedResourceId);
		});

		/*
		 * Time 7 : Region 1 changes person's resource level by transfer from
		 * person to Region 1
		 */
		taskPlanContainer.addTaskPlan(TestRegionId.REGION_1, testTime++, (environment) -> {
			environment.transferResourceFromPerson(selectedResourceId, selectedPersonId, secondAmount);
		});

		/*
		 * Time 8 : Compartment 1 changes person's Resource Level by removing
		 * resource from person
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			environment.removeResourceFromPerson(selectedResourceId, selectedPersonId, thirdAmount);
		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			final Object key = new Object();
			environment.addPopulationIndex(allPeople(), key);
			final PersonId personId = environment.sampleIndex(key).get();
			assertNotNull(personId);

			// if the resource id is null
			assertModelException(() -> environment.observeCompartmentalPersonResourceChange(true, TestCompartmentId.COMPARTMENT_1, null), SimulationErrorType.NULL_RESOURCE_ID);
			// if the resource id is unknown
			assertModelException(() -> environment.observeCompartmentalPersonResourceChange(true, TestCompartmentId.COMPARTMENT_1, TestResourceId.getUnknownResourceId()),
					SimulationErrorType.UNKNOWN_RESOURCE_ID);
			// if the compartment id is null
			assertModelException(() -> environment.observeCompartmentalPersonResourceChange(true, null, TestResourceId.RESOURCE1), SimulationErrorType.NULL_COMPARTMENT_ID);
			// if the compartment id is unknown
			assertModelException(() -> environment.observeCompartmentalPersonResourceChange(true, TestCompartmentId.getUnknownCompartmentId(), TestResourceId.RESOURCE1),
					SimulationErrorType.UNKNOWN_COMPARTMENT_ID);

			environment.removePopulationIndex(key);

		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		final Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		/*
		 * Compartment 1: first and second resource changes --> demonstrates
		 * Post Conditions 1 and 4
		 */
		expectedObservations.add(new MultiKey(4.0, TestCompartmentId.COMPARTMENT_1, ObservationType.PERSON_RESOURCE, selectedPersonId, selectedResourceId, expectedFirstLevel));

		expectedObservations.add(new MultiKey(7.0, TestCompartmentId.COMPARTMENT_1, ObservationType.PERSON_RESOURCE, selectedPersonId, selectedResourceId, expectedSecondLevel));

		/*
		 * Compartment 2: first resource change --> demonstrates Post Condition
		 * 1 and 3
		 */

		expectedObservations.add(new MultiKey(4.0, TestCompartmentId.COMPARTMENT_2, ObservationType.PERSON_RESOURCE, selectedPersonId, selectedResourceId, expectedFirstLevel));

		/*
		 * Region 1: third property changes --> demonstrates Post Conditions 1
		 * and 4
		 */

		expectedObservations.add(new MultiKey(8.0, TestRegionId.REGION_1, ObservationType.PERSON_RESOURCE, selectedPersonId, selectedResourceId, expectedThirdLevel));

		/*
		 * Global Component 1: second and third property changes -->
		 * demonstrates Post Conditions 1 and 2
		 */
		expectedObservations.add(new MultiKey(7.0, TestGlobalComponentId.GLOBAL_COMPONENT_1, ObservationType.PERSON_RESOURCE, selectedPersonId, selectedResourceId, expectedSecondLevel));

		expectedObservations.add(new MultiKey(8.0, TestGlobalComponentId.GLOBAL_COMPONENT_1, ObservationType.PERSON_RESOURCE, selectedPersonId, selectedResourceId, expectedThirdLevel));

		/*
		 * All others: no observations --> demonstrates Post Condition 2
		 */

		final Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);

	}

	/**
	 * Tests
	 * {@link EnvironmentImpl#observeCompartmentPersonArrival(boolean, CompartmentId)}
	 *
	 */
	@Test
	@UnitTestMethod(name = "observeCompartmentPersonArrival", args = { boolean.class, CompartmentId.class })
	public void testObserveCompartmentPersonArrival() {
		/*
		 * We test for the post conditions by first having the components
		 * execute a series time-separated plans and then examining the
		 * observations recorded by each component. Precondition tests are added
		 * at the end.
		 *
		 * Actions
		 *
		 * Time 1 : Compartment 1 starts observation of Compartment 2
		 *
		 * Time 2 : Region 1 starts observation of Compartment 2
		 *
		 * Time 3 : Compartment 3 starts observation
		 *
		 * Time 4 : Global Component 1 starts observation and moves a person to
		 * Compartment 2
		 *
		 * Time 5 : Compartment 2 starts observation of Compartment 2
		 *
		 * Time 6 : Compartment 1 stops observation
		 *
		 * Time 7 : Global Component 1 moves another person to Compartment 2
		 *
		 * Expected observations
		 *
		 * Compartment 1: first person --> demonstrates Post Conditions 1 and 3
		 *
		 * Compartment 2: second person --> demonstrates Post Conditions 2 and 4
		 *
		 * Compartment 3: first and second person --> demonstrates Post
		 * Condition 1
		 *
		 * Region 1: first and second person --> demonstrates Post Conditions 1
		 *
		 * Global Component 1: second person --> demonstrates Post Condition and
		 * 4
		 *
		 * All others: no observations --> demonstrates Post Condition 2
		 */

		final long seed = SEED_PROVIDER.getSeedValue(2);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		PersonId personToFind = null;
		for (final PersonId personId : scenario.getPeopleIds()) {
			if (scenario.getPersonCompartment(personId).equals(TestCompartmentId.COMPARTMENT_4)) {
				personToFind = personId;
				break;
			}
		}
		assertNotNull(personToFind);
		final PersonId firstPersonId = personToFind;

		personToFind = null;
		for (final PersonId personId : scenario.getPeopleIds()) {
			if (scenario.getPersonCompartment(personId).equals(TestCompartmentId.COMPARTMENT_3)) {
				personToFind = personId;
				break;
			}
		}
		assertNotNull(personToFind);
		final PersonId secondPersonId = personToFind;

		/*
		 *
		 * Time 1 : Compartment 1 starts observation of Compartment 2
		 */

		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			environment.observeCompartmentPersonArrival(true, TestCompartmentId.COMPARTMENT_2);
		});

		/*
		 * Time 2 : Region 1 starts observation of Compartment 2
		 */
		taskPlanContainer.addTaskPlan(TestRegionId.REGION_1, testTime++, (environment) -> {
			environment.observeCompartmentPersonArrival(true, TestCompartmentId.COMPARTMENT_2);
		});

		/*
		 * Time 3 : Compartment 3 starts observation
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_3, testTime++, (environment) -> {
			environment.observeCompartmentPersonArrival(true, TestCompartmentId.COMPARTMENT_2);
		});

		/*
		 * Time 4 : Global Component 1 starts observation and moves a person to
		 * Compartment 2
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			environment.observeCompartmentPersonArrival(true, TestCompartmentId.COMPARTMENT_2);
			environment.setPersonCompartment(firstPersonId, TestCompartmentId.COMPARTMENT_2);
		});

		/*
		 * Time 5 : Compartment 2 starts observation of Compartment 2
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.observeCompartmentPersonArrival(true, TestCompartmentId.COMPARTMENT_2);
		});

		/*
		 * Time 6 : Compartment 1 stops observation
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			environment.observeCompartmentPersonArrival(false, TestCompartmentId.COMPARTMENT_2);
		});

		/*
		 * Time 7 : Global Component 1 moves another person to Compartment 2
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			environment.setPersonCompartment(secondPersonId, TestCompartmentId.COMPARTMENT_2);
		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			// if the compartment id is null
			assertModelException(() -> environment.observeCompartmentPersonArrival(true, null), SimulationErrorType.NULL_COMPARTMENT_ID);
			// if the compartment is unknown
			assertModelException(() -> environment.observeCompartmentPersonArrival(true, TestCompartmentId.getUnknownCompartmentId()), SimulationErrorType.UNKNOWN_COMPARTMENT_ID);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		final Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		/*
		 * Compartment 1: first person --> demonstrates Post Conditions 1 and 3
		 */
		expectedObservations.add(new MultiKey(4.0, TestCompartmentId.COMPARTMENT_1, ObservationType.COMPARTMENT_PERSON_ARRIVAL, firstPersonId));

		/*
		 * Compartment 2: second person --> demonstrates Post Conditions 2 and 4
		 */
		expectedObservations.add(new MultiKey(4.0, TestCompartmentId.COMPARTMENT_3, ObservationType.COMPARTMENT_PERSON_ARRIVAL, firstPersonId));
		expectedObservations.add(new MultiKey(7.0, TestCompartmentId.COMPARTMENT_2, ObservationType.COMPARTMENT_PERSON_ARRIVAL, secondPersonId));

		/*
		 * Compartment 3: first and second person --> demonstrates Post
		 * Condition 1
		 */
		expectedObservations.add(new MultiKey(7.0, TestCompartmentId.COMPARTMENT_3, ObservationType.COMPARTMENT_PERSON_ARRIVAL, secondPersonId));
		/*
		 * Region 1: first and second person --> demonstrates Post Conditions 1
		 */
		expectedObservations.add(new MultiKey(4.0, TestRegionId.REGION_1, ObservationType.COMPARTMENT_PERSON_ARRIVAL, firstPersonId));
		expectedObservations.add(new MultiKey(7.0, TestRegionId.REGION_1, ObservationType.COMPARTMENT_PERSON_ARRIVAL, secondPersonId));

		/*
		 * Global Component 1: second person --> demonstrates Post Condition and
		 * 4
		 *
		 * All others: no observations --> demonstrates Post Condition 2
		 */

		final Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);

	}

	/**
	 * Tests
	 * {@link EnvironmentImpl#observeCompartmentPersonDeparture(boolean, CompartmentId)}
	 * 
	 */
	@Test
	@UnitTestMethod(name = "observeCompartmentPersonDeparture", args = { boolean.class, CompartmentId.class })
	public void testObserveCompartmentPersonDeparture() {
		/*
		 * We test for the post conditions by first having the components
		 * execute a series time-separated plans and then examining the
		 * observations recorded by each component. Precondition tests are added
		 * at the end.
		 *
		 * Actions
		 *
		 * Time 1 : Compartment 1 starts observation of Compartment 2
		 *
		 * Time 2 : Region 1 starts observation of Compartment 2
		 *
		 * Time 3 : Compartment 3 starts observation
		 *
		 * Time 4 : Global Component 1 starts observation and moves a first
		 * person from Compartment 2 to Compartment 4
		 *
		 * Time 5 : Compartment 2 starts observation of Compartment 2
		 *
		 * Time 6 : Compartment 1 stops observation
		 *
		 * Time 7 : Global Component 1 moves a second person from Compartment 2
		 * to Compartment 3
		 *
		 * Expected observations
		 *
		 * Compartment 1: first person --> demonstrates Post Conditions 1 and 3
		 *
		 * Compartment 2: second person --> demonstrates Post Conditions 2 and 4
		 *
		 * Compartment 3: first and second person --> demonstrates Post
		 * Condition 1
		 *
		 * Region 1: first and second person --> demonstrates Post Conditions 1
		 *
		 * Global Component 1: second person --> demonstrates Post Condition and
		 * 4
		 *
		 * All others: no observations --> demonstrates Post Condition 2
		 */

		final long seed = SEED_PROVIDER.getSeedValue(3);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);

		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		/*
		 *
		 * Time 1 : Compartment 1 starts observation of Compartment 2
		 */

		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			environment.observeCompartmentPersonDeparture(true, TestCompartmentId.COMPARTMENT_2);
		});

		/*
		 * Time 2 : Region 1 starts observation of Compartment 2
		 */
		taskPlanContainer.addTaskPlan(TestRegionId.REGION_1, testTime++, (environment) -> {
			environment.observeCompartmentPersonDeparture(true, TestCompartmentId.COMPARTMENT_2);
		});
		/*
		 * Time 3 : Compartment 3 starts observation
		 */

		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_3, testTime++, (environment) -> {
			environment.observeCompartmentPersonDeparture(true, TestCompartmentId.COMPARTMENT_2);
		});
		/*
		 * Time 4 : Global Component 1 starts observation and moves a first
		 * person from Compartment 2 to Compartment 4
		 */
		final List<PersonId> peopleInCompartment2 = new ArrayList<>();
		for (final PersonId personId : scenario.getPeopleIds()) {
			if (scenario.getPersonCompartment(personId).equals(TestCompartmentId.COMPARTMENT_2)) {
				peopleInCompartment2.add(personId);
				if (peopleInCompartment2.size() >= 2) {
					break;
				}
			}
		}

		assertTrue(peopleInCompartment2.size() >= 2);

		final PersonId firstPersonId = peopleInCompartment2.get(0);
		final PersonId secondPersonId = peopleInCompartment2.get(1);

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			environment.observeCompartmentPersonDeparture(true, TestCompartmentId.COMPARTMENT_2);
			environment.setPersonCompartment(firstPersonId, TestCompartmentId.COMPARTMENT_4);
		});

		/*
		 * Time 5 : Compartment 2 starts observation of Compartment 2
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.observeCompartmentPersonDeparture(true, TestCompartmentId.COMPARTMENT_2);
		});

		/*
		 * Time 6 : Compartment 1 stops observation
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			environment.observeCompartmentPersonDeparture(false, TestCompartmentId.COMPARTMENT_2);
		});

		/*
		 * Time 7 : Global Component 1 moves a second person from Compartment 2
		 * to Compartment 3
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			environment.setPersonCompartment(secondPersonId, TestCompartmentId.COMPARTMENT_3);
		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			// if the compartment id is null
			assertModelException(() -> environment.observeCompartmentPersonDeparture(false, null), SimulationErrorType.NULL_COMPARTMENT_ID);
			// if the compartment is unknown
			assertModelException(() -> environment.observeCompartmentPersonDeparture(false, TestCompartmentId.getUnknownCompartmentId()), SimulationErrorType.UNKNOWN_COMPARTMENT_ID);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		final Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		/*
		 * Compartment 1: first person --> demonstrates Post Conditions 1 and 3
		 */
		expectedObservations.add(new MultiKey(4.0, TestCompartmentId.COMPARTMENT_1, ObservationType.COMPARTMENT_PERSON_DEPARTURE, TestCompartmentId.COMPARTMENT_2, firstPersonId));

		/*
		 * Compartment 2: second person --> demonstrates Post Conditions 2 and 4
		 */
		expectedObservations.add(new MultiKey(4.0, TestCompartmentId.COMPARTMENT_3, ObservationType.COMPARTMENT_PERSON_DEPARTURE, TestCompartmentId.COMPARTMENT_2, firstPersonId));
		expectedObservations.add(new MultiKey(7.0, TestCompartmentId.COMPARTMENT_2, ObservationType.COMPARTMENT_PERSON_DEPARTURE, TestCompartmentId.COMPARTMENT_2, secondPersonId));

		/*
		 * Compartment 3: first and second person --> demonstrates Post
		 * Condition 1
		 */
		expectedObservations.add(new MultiKey(7.0, TestCompartmentId.COMPARTMENT_3, ObservationType.COMPARTMENT_PERSON_DEPARTURE, TestCompartmentId.COMPARTMENT_2, secondPersonId));
		/*
		 * Region 1: first and second person --> demonstrates Post Conditions 1
		 */
		expectedObservations.add(new MultiKey(4.0, TestRegionId.REGION_1, ObservationType.COMPARTMENT_PERSON_DEPARTURE, TestCompartmentId.COMPARTMENT_2, firstPersonId));
		expectedObservations.add(new MultiKey(7.0, TestRegionId.REGION_1, ObservationType.COMPARTMENT_PERSON_DEPARTURE, TestCompartmentId.COMPARTMENT_2, secondPersonId));

		/*
		 * Global Component 1: second person --> demonstrates Post Condition and
		 * 4
		 *
		 * All others: no observations --> demonstrates Post Condition 2
		 */

		final Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);

	}

	/**
	 * Tests
	 * {@link EnvironmentImpl#observeCompartmentPropertyChange(boolean, CompartmentId, CompartmentPropertyId)}
	 *
	 */
	@Test
	@UnitTestMethod(name = "observeCompartmentPropertyChange", args = { boolean.class, CompartmentId.class, CompartmentPropertyId.class })
	public void testObserveCompartmentPropertyChange() {
		/*
		 * We test for the post conditions by first having the components
		 * execute a series time-separated plans and then examining the
		 * observations recorded by each component. Precondition tests are added
		 * at the end.
		 *
		 * Actions
		 *
		 * Time 1 : Compartment 1 starts observation of Compartment 2 Property P
		 *
		 * Time 2 : Compartment 2 starts observation of Compartment 2 Property P
		 *
		 * Time 3 : Compartment 2 changes its Property P value
		 *
		 * Time 4 : Compartment 1 stops observation of Compartment 2 Property P
		 *
		 * Time 5 : Region 1 starts observation of Compartment 2 Property P
		 *
		 * Time 6 : Compartment 2 changes its Property P value
		 *
		 * Expected observations
		 *
		 * Compartment 1: first property change --> demonstrates Post Conditions
		 * 1 and 3
		 *
		 * Compartment 2: no observations demonstrates Post Condition 4
		 *
		 * Region 1: second property change --> demonstrates Post Conditions 1
		 * and 2
		 *
		 * All others: no observations --> demonstrates Post Condition 2
		 */

		final long seed = SEED_PROVIDER.getSeedValue(4);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.TRUE, randomGenerator);

		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		/*
		 * Establish a non-boolean property so that we can have two distinct
		 * values different from the current value.
		 */
		CompartmentPropertyId candidatePropertyId = null;
		for (final CompartmentPropertyId compartmentPropertyId : TestCompartmentId.COMPARTMENT_2.getCompartmentPropertyIds()) {
			final PropertyDefinition propertyDefinition = scenario.getCompartmentPropertyDefinition(TestCompartmentId.COMPARTMENT_2, compartmentPropertyId);
			if (propertyDefinition.getType() != Boolean.class) {
				candidatePropertyId = compartmentPropertyId;
				break;
			}

		}
		assertNotNull(candidatePropertyId);
		final CompartmentPropertyId selectedCompartmentPropertyId = candidatePropertyId;
		final PropertyDefinition propertyDefinition = scenario.getCompartmentPropertyDefinition(TestCompartmentId.COMPARTMENT_2, selectedCompartmentPropertyId);
		assertTrue(propertyDefinition.getDefaultValue().isPresent());
		final Object currentPropertyValue = propertyDefinition.getDefaultValue().get();
		Object propertyValue1 = null;
		while (currentPropertyValue.equals(propertyValue1) || (propertyValue1 == null)) {
			propertyValue1 = generatePropertyValue(propertyDefinition, randomGenerator);
		}
		assertNotNull(propertyValue1);
		assertFalse(propertyValue1.equals(currentPropertyValue));
		Object propertyValue2 = null;
		while (currentPropertyValue.equals(propertyValue2) || propertyValue1.equals(propertyValue2) || (propertyValue2 == null)) {
			propertyValue2 = generatePropertyValue(propertyDefinition, randomGenerator);
		}
		assertNotNull(propertyValue2);
		assertFalse(propertyValue2.equals(currentPropertyValue));
		assertFalse(propertyValue2.equals(propertyValue1));

		final Object firstPropertyValue = propertyValue1;
		final Object secondPropertyValue = propertyValue2;

		/*
		 * Time 1 : Compartment 1 starts observation of Compartment 2 Property P
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			environment.observeCompartmentPropertyChange(true, TestCompartmentId.COMPARTMENT_2, selectedCompartmentPropertyId);
		});

		/*
		 * Time 2 : Compartment 2 starts observation of Compartment 2 Property P
		 */

		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.observeCompartmentPropertyChange(true, TestCompartmentId.COMPARTMENT_2, selectedCompartmentPropertyId);
		});

		/*
		 * Time 3 : Compartment 2 changes its Property P value
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.setCompartmentPropertyValue(TestCompartmentId.COMPARTMENT_2, selectedCompartmentPropertyId, firstPropertyValue);
		});

		/*
		 * Time 4 : Compartment 1 stops observation of Compartment 2 Property P
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			environment.observeCompartmentPropertyChange(false, TestCompartmentId.COMPARTMENT_2, selectedCompartmentPropertyId);
		});

		/*
		 * Time 5 : Region 1 starts observation of Compartment 2 Property P
		 */

		taskPlanContainer.addTaskPlan(TestRegionId.REGION_1, testTime++, (environment) -> {
			environment.observeCompartmentPropertyChange(true, TestCompartmentId.COMPARTMENT_2, selectedCompartmentPropertyId);
		});

		/*
		 * Time 6 : Compartment 2 changes its Property P value
		 */

		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.setCompartmentPropertyValue(TestCompartmentId.COMPARTMENT_2, selectedCompartmentPropertyId, secondPropertyValue);
		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {

			CompartmentId compartmentId = TestCompartmentId.COMPARTMENT_2;
			CompartmentPropertyId compartmentPropertyId = TestCompartmentId.COMPARTMENT_2.getCompartmentPropertyIds()[0];

			// if the compartment id is null
			assertModelException(() -> environment.observeCompartmentPropertyChange(true, null, compartmentPropertyId), SimulationErrorType.NULL_COMPARTMENT_ID);
			// if the compartment is unknown
			assertModelException(() -> environment.observeCompartmentPropertyChange(true, TestCompartmentId.getUnknownCompartmentId(), compartmentPropertyId),
					SimulationErrorType.UNKNOWN_COMPARTMENT_ID);
			// if the property id is null
			assertModelException(() -> environment.observeCompartmentPropertyChange(true, compartmentId, null), SimulationErrorType.NULL_COMPARTMENT_PROPERTY_ID);
			// if the property is unknown
			assertModelException(() -> environment.observeCompartmentPropertyChange(true, compartmentId, TestCompartmentId.getUnknownCompartmentPropertyId()),
					SimulationErrorType.UNKNOWN_COMPARTMENT_PROPERTY_ID);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		final Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		/*
		 * Compartment 1: first property change --> demonstrates Post Conditions
		 * 1 and 3
		 */

		expectedObservations.add(
				new MultiKey(3.0, TestCompartmentId.COMPARTMENT_1, ObservationType.COMPARTMENT_PROPERTY, TestCompartmentId.COMPARTMENT_2, selectedCompartmentPropertyId, firstPropertyValue));

		/*
		 * Compartment 2: no observations demonstrates Post Condition 4
		 */

		/*
		 * Region 1: second property change --> demonstrates Post Conditions 1
		 * and 2
		 */

		expectedObservations.add(new MultiKey(6.0, TestRegionId.REGION_1, ObservationType.COMPARTMENT_PROPERTY, TestCompartmentId.COMPARTMENT_2, selectedCompartmentPropertyId, secondPropertyValue));

		/*
		 * All others: no observations --> demonstrates Post Condition 2
		 */
		final Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);

	}

}
