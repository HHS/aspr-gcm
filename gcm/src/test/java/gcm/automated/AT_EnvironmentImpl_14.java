package gcm.automated;

import static gcm.automated.support.EnvironmentSupport.addObservationContainer;
import static gcm.automated.support.EnvironmentSupport.addStandardComponentsAndTypes;
import static gcm.automated.support.EnvironmentSupport.addStandardPeople;
import static gcm.automated.support.EnvironmentSupport.addStandardPropertyDefinitions;
import static gcm.automated.support.EnvironmentSupport.addStandardTrackingAndScenarioId;
import static gcm.automated.support.EnvironmentSupport.addTaskPlanContainer;
import static gcm.automated.support.EnvironmentSupport.assertAllPlansExecuted;
import static gcm.automated.support.EnvironmentSupport.generatePropertyValue;
import static gcm.automated.support.EnvironmentSupport.getRandomGenerator;
import static gcm.automated.support.EnvironmentSupport.getReplication;
import static gcm.automated.support.ExceptionAssertion.assertModelException;
import static gcm.simulation.Filter.allPeople;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import org.apache.commons.math3.random.RandomGenerator;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import gcm.automated.support.EnvironmentSupport;
import gcm.automated.support.EnvironmentSupport.PropertyAssignmentPolicy;
import gcm.automated.support.ObservationContainer;
import gcm.automated.support.SeedProvider;
import gcm.automated.support.TaskPlanContainer;
import gcm.automated.support.TestCompartmentId;
import gcm.automated.support.TestGlobalComponentId;
import gcm.automated.support.TestMaterialId;
import gcm.automated.support.TestMaterialsProducerId;
import gcm.automated.support.TestPersonPropertyId;
import gcm.automated.support.TestRegionId;
import gcm.automated.support.TestResourceId;
import gcm.replication.Replication;
import gcm.scenario.BatchId;
import gcm.scenario.CompartmentId;
import gcm.scenario.PersonId;
import gcm.scenario.PersonPropertyId;
import gcm.scenario.PropertyDefinition;
import gcm.scenario.RegionId;
import gcm.scenario.ResourceId;
import gcm.scenario.Scenario;
import gcm.scenario.ScenarioBuilder;
import gcm.scenario.StageId;
import gcm.scenario.UnstructuredScenarioBuilder;
import gcm.simulation.EnvironmentImpl;
import gcm.simulation.ObservationType;
import gcm.simulation.Simulation;
import gcm.simulation.SimulationErrorType;
import gcm.util.MultiKey;
import gcm.util.annotations.UnitTest;

@UnitTest(target = EnvironmentImpl.class)

public class AT_EnvironmentImpl_14 {

	private static SeedProvider SEED_PROVIDER;

	@BeforeClass
	public static void beforeClass() {
		SEED_PROVIDER = new SeedProvider(EnvironmentSupport.getMetaSeed(14));
	}

	/**
	 * Internal test(not part of public tests) to show that there are no large
	 * gaps in the seed cases generated by the SeedProvider.
	 */
	@AfterClass
	public static void afterClass() {
		//System.out.println(SEED_PROVIDER.generateUnusedSeedReport());
	}
	
	/**
	 * Tests
	 * {@link EnvironmentImpl#observeMaterialsProducerResourceChangeByMaterialsProducerId(boolean, gcm.scenario.MaterialsProducerId, ResourceId)}
	 *
	 */

	@Test
	public void testObserveMaterialsProducerResourceChangeByMaterialsProducerId() {
		/*
		 * We test for the post conditions by first having the components
		 * execute a series time-separated plans and then examining the
		 * observations recorded by each component. Precondition tests are added
		 * at the end.
		 *
		 * Actions
		 *
		 *
		 * Time 1 : Compartment 1 starts observation of Resource level R on
		 * Materials Producer 1
		 *
		 * Time 2 : Compartment 2 starts observation of Resource level R on
		 * Materials Producer 1
		 *
		 * Time 3 : Materials Producer 1 starts observation of Resource level R
		 * on Materials Producer 1
		 *
		 * Time 4 : Materials Producer 1 adds Resource R
		 *
		 * Time 5 : Compartment 2 stops observation of Resource level R on
		 * Materials Producer 1
		 *
		 * Time 6 : Materials Producer 1 adds Resource R
		 *
		 * Expected observations
		 *
		 * Compartment 1: first and second resource additions: demonstrate post
		 * condition 1
		 *
		 * Compartment 2: first resource addition: demonstrates post conditions
		 * 1 and 3
		 *
		 * Materials Producer 1: sees no resource additions: demonstrates post
		 * condition 4
		 *
		 * All others: no observations --> demonstrates Post Condition 2
		 *
		 */

		final long seed = SEED_PROVIDER.getSeedValue(0);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		/*
		 * Time 1 : Compartment 1 starts observation of Resource level R on
		 * Materials Producer 1
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			environment.observeMaterialsProducerResourceChangeByMaterialsProducerId(true, TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestResourceId.RESOURCE1);
		});

		/*
		 * Time 2 : Compartment 2 starts observation of Resource level R on
		 * Materials Producer 1
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.observeMaterialsProducerResourceChangeByMaterialsProducerId(true, TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestResourceId.RESOURCE1);
		});

		/*
		 * Time 3 : Materials Producer 1 starts observation of Resource level R
		 * on Materials Producer 1
		 */
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			environment.observeMaterialsProducerResourceChangeByMaterialsProducerId(true, TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestResourceId.RESOURCE1);
		});

		/*
		 * Time 4 : Materials Producer 1 adds Resource R
		 */
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			final BatchId batchId = environment.createBatch(TestMaterialId.MATERIAL_1, 100);
			final StageId stageId = environment.createStage();
			environment.moveBatchToStage(batchId, stageId);
			environment.convertStageToResource(stageId, TestResourceId.RESOURCE1, 400);
		});

		/*
		 * Time 5 : Compartment 2 stops observation of Resource level R on
		 * Materials Producer 1
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.observeMaterialsProducerResourceChangeByMaterialsProducerId(false, TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestResourceId.RESOURCE1);
		});

		/*
		 * Time 6 : Materials Producer 1 adds Resource R
		 */
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			final BatchId batchId = environment.createBatch(TestMaterialId.MATERIAL_1, 100);
			final StageId stageId = environment.createStage();
			environment.moveBatchToStage(batchId, stageId);
			environment.convertStageToResource(stageId, TestResourceId.RESOURCE1, 400);
		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			// if the materials producer id is null
			assertModelException(() -> environment.observeMaterialsProducerResourceChangeByMaterialsProducerId(false, null, TestResourceId.RESOURCE1), SimulationErrorType.NULL_MATERIALS_PRODUCER_ID);
			// if the materials producer is unknown
			assertModelException(
					() -> environment.observeMaterialsProducerResourceChangeByMaterialsProducerId(false, TestMaterialsProducerId.getUnknownMaterialsProducerId(), TestResourceId.RESOURCE1),
					SimulationErrorType.UNKNOWN_MATERIALS_PRODUCER_ID);
			// if the resource id is null
			assertModelException(() -> environment.observeMaterialsProducerResourceChangeByMaterialsProducerId(false, TestMaterialsProducerId.MATERIALS_PRODUCER_1, null),
					SimulationErrorType.NULL_RESOURCE_ID);
			// if the resource is unknown
			assertModelException(
					() -> environment.observeMaterialsProducerResourceChangeByMaterialsProducerId(false, TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestResourceId.getUnknownResourceId()),
					SimulationErrorType.UNKNOWN_RESOURCE_ID);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		final Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		/*
		 * Expected observations
		 */

		/*
		 * Compartment 1: first transfer: second transfer demonstrates post
		 * condition 1
		 *
		 */
		expectedObservations.add(
				new MultiKey(4.0, TestCompartmentId.COMPARTMENT_1, ObservationType.MATERIALS_PRODUCER_RESOURCE, TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestResourceId.RESOURCE1));
		expectedObservations.add(
				new MultiKey(6.0, TestCompartmentId.COMPARTMENT_1, ObservationType.MATERIALS_PRODUCER_RESOURCE, TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestResourceId.RESOURCE1));

		/*
		 * Compartment 2: first transfer: demonstrates post conditions 1 and 3
		 *
		 */
		expectedObservations.add(
				new MultiKey(4.0, TestCompartmentId.COMPARTMENT_2, ObservationType.MATERIALS_PRODUCER_RESOURCE, TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestResourceId.RESOURCE1));

		final Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);

	}

	/**
	 * Tests {@link EnvironmentImpl#observeMaterialsProducerResourceChange(boolean,
	 * ResourceId)
	 */

	@Test
	public void testObserveMaterialsProducerResourceChange() {
		/*
		 * We test for the post conditions by first having the components
		 * execute a series time-separated plans and then examining the
		 * observations recorded by each component. Precondition tests are added
		 * at the end.
		 *
		 * Actions
		 *
		 *
		 * Time 1 : Compartment 1 starts observation of Resource level R on
		 * Materials Producer 1
		 *
		 * Time 2 : Compartment 2 starts observation of Resource level R on
		 * Materials Producer 1
		 *
		 * Time 3 : Materials Producer 1 starts observation of Resource level R
		 * on Materials Producer 1
		 *
		 * Time 4 : Materials Producer 1 adds Resource R
		 *
		 * Time 5 : Compartment 2 stops observation of Resource level R on
		 * Materials Producer 1
		 *
		 * Time 6 : Materials Producer 1 adds Resource R
		 *
		 * Expected observations
		 *
		 * Compartment 1: first and second resource additions: demonstrate post
		 * condition 1
		 *
		 * Compartment 2: first resource addition: demonstrates post conditions
		 * 1 and 3
		 *
		 * Materials Producer 1: sees no resource additions: demonstrates post
		 * condition 4
		 *
		 * All others: no observations --> demonstrates Post Condition 2
		 *
		 */
		final long seed = SEED_PROVIDER.getSeedValue(1);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		/*
		 * Time 1 : Compartment 1 starts observation of Resource level R on
		 * Materials Producer 1
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			environment.observeMaterialsProducerResourceChange(true, TestResourceId.RESOURCE1);
		});

		/*
		 * Time 2 : Compartment 2 starts observation of Resource level R on
		 * Materials Producer 1
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.observeMaterialsProducerResourceChange(true, TestResourceId.RESOURCE1);
		});

		/*
		 * Time 3 : Materials Producer 1 starts observation of Resource level R
		 * on Materials Producer 1
		 */
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			environment.observeMaterialsProducerResourceChange(true, TestResourceId.RESOURCE1);
		});

		/*
		 * Time 4 : Materials Producer 1 adds Resource R
		 */
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			final BatchId batchId = environment.createBatch(TestMaterialId.MATERIAL_1, 100);
			final StageId stageId = environment.createStage();
			environment.moveBatchToStage(batchId, stageId);
			environment.convertStageToResource(stageId, TestResourceId.RESOURCE1, 400);
		});

		/*
		 * Time 5 : Compartment 2 stops observation of Resource level R on
		 * Materials Producer 1
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.observeMaterialsProducerResourceChange(false, TestResourceId.RESOURCE1);
		});

		/*
		 * Time 6 : Materials Producer 1 adds Resource R
		 */
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			final BatchId batchId = environment.createBatch(TestMaterialId.MATERIAL_1, 100);
			final StageId stageId = environment.createStage();
			environment.moveBatchToStage(batchId, stageId);
			environment.convertStageToResource(stageId, TestResourceId.RESOURCE1, 400);
		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			// if the resource id is null
			assertModelException(() -> environment.observeMaterialsProducerResourceChange(false, null), SimulationErrorType.NULL_RESOURCE_ID);
			// if the resource is unknown
			assertModelException(() -> environment.observeMaterialsProducerResourceChange(false, TestResourceId.getUnknownResourceId()), SimulationErrorType.UNKNOWN_RESOURCE_ID);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		final Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		/*
		 * Expected observations
		 */

		/*
		 * Compartment 1: first transfer: second transfer demonstrates post
		 * condition 1
		 *
		 */
		expectedObservations.add(
				new MultiKey(4.0, TestCompartmentId.COMPARTMENT_1, ObservationType.MATERIALS_PRODUCER_RESOURCE, TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestResourceId.RESOURCE1));
		expectedObservations.add(
				new MultiKey(6.0, TestCompartmentId.COMPARTMENT_1, ObservationType.MATERIALS_PRODUCER_RESOURCE, TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestResourceId.RESOURCE1));

		/*
		 * Compartment 2: first transfer: demonstrates post conditions 1 and 3
		 *
		 */
		expectedObservations.add(
				new MultiKey(4.0, TestCompartmentId.COMPARTMENT_2, ObservationType.MATERIALS_PRODUCER_RESOURCE, TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestResourceId.RESOURCE1));

		final Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);

	}

	/**
	 * Tests
	 * {@link EnvironmentImpl#observePersonCompartmentChange(boolean, PersonId)}
	 *
	 */
	@Test

	public void testObservePersonCompartmentChange() {
		/*
		 * We test for the post conditions by first having the components
		 * execute a series time-separated plans and then examining the
		 * observations recorded by each component. Precondition tests are added
		 * at the end.
		 *
		 * Actions
		 *
		 * Time 1 : Compartment 1 starts observation first person's compartment
		 * assignment. First person starts in Compartment 2.
		 *
		 * Time 2 : Compartment 2 starts observation of first person's
		 * compartment assignment
		 *
		 * Time 3 : Compartment 2 moves first person to Compartment 3
		 *
		 * Time 4 : Compartment 1 stops observation first person's compartment
		 *
		 * Time 5 : Region 1 starts observation of first person's compartment
		 *
		 * Time 6 : Compartment 3 moves first person to Compartment 4
		 *
		 * Time 7 : Global Component 1 starts observation of second person's
		 * compartment
		 *
		 * Time 8 : Compartment 2 moves second person to Compartment 4. Second
		 * person starts in Compartment 2.
		 *
		 * Expected observations
		 *
		 * Compartment 1: first person's first move --> demonstrates Post
		 * Conditions 1 and 3
		 *
		 * Compartment 2: first person's second move --> demonstrates Post
		 * Conditions 1 and 4
		 *
		 * Global Component 1: second person's first move --> demonstrates Post
		 * Conditions 1
		 *
		 * Region 1: first person's second move --> demonstrates Post Conditions
		 * 1 and 2
		 *
		 * All others: no observations --> demonstrates Post Condition 2
		 */
		final long seed = SEED_PROVIDER.getSeedValue(2);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.TRUE, randomGenerator);

		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		/*
		 * Establish two people from Compartment 2
		 */
		final List<PersonId> peopleInCompartment2 = new ArrayList<>();
		for (final PersonId personId : scenario.getPeopleIds()) {
			if (scenario.getPersonCompartment(personId).equals(TestCompartmentId.COMPARTMENT_2)) {
				peopleInCompartment2.add(personId);
			}

		}
		assertTrue(peopleInCompartment2.size() >= 2);

		final PersonId firstPerson = peopleInCompartment2.get(0);
		final PersonId secondPerson = peopleInCompartment2.get(1);
		/*
		 * Time 1 : Compartment 1 starts observation first person's compartment
		 * assignment. First person starts in Compartment 2.
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			environment.observePersonCompartmentChange(true, firstPerson);
		});
		/*
		 * Time 2 : Compartment 2 starts observation of first person's
		 * compartment assignment
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.observePersonCompartmentChange(true, firstPerson);
		});

		/*
		 * Time 3 : Compartment 2 moves first person to Compartment 3
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.setPersonCompartment(firstPerson, TestCompartmentId.COMPARTMENT_3);
		});

		/*
		 * Time 4 : Compartment 1 stops observation first person's compartment
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			environment.observePersonCompartmentChange(false, firstPerson);
		});

		/*
		 * Time 5 : Region 1 starts observation of first person's compartment
		 */
		taskPlanContainer.addTaskPlan(TestRegionId.REGION_1, testTime++, (environment) -> {
			environment.observePersonCompartmentChange(true, firstPerson);
		});
		/*
		 * Time 6 : Compartment 3 moves first person to Compartment 4
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_3, testTime++, (environment) -> {
			environment.setPersonCompartment(firstPerson, TestCompartmentId.COMPARTMENT_4);
		});

		/*
		 * Time 7 : Global Component 1 starts observation of second person's
		 * compartment
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			environment.observePersonCompartmentChange(true, secondPerson);
		});
		/*
		 * Time 8 : Compartment 2 moves second person to Compartment 4. Second
		 * person starts in Compartment 2.
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.setPersonCompartment(secondPerson, TestCompartmentId.COMPARTMENT_4);
		});
		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			// if the person is null
			assertModelException(() -> environment.observePersonCompartmentChange(true, null), SimulationErrorType.NULL_PERSON_ID);
			// if the person is unknown
			assertModelException(() -> environment.observePersonCompartmentChange(true, new PersonId(-1)), SimulationErrorType.UNKNOWN_PERSON_ID);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		final Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		/*
		 * Compartment 1: first person's first move --> demonstrates Post
		 * Conditions 1 and 3
		 */
		expectedObservations.add(new MultiKey(3.0, TestCompartmentId.COMPARTMENT_1, ObservationType.PERSON_COMPARTMENT, firstPerson));

		/*
		 * Compartment 2: first person's second move --> demonstrates Post
		 * Conditions 1 and 4
		 */
		expectedObservations.add(new MultiKey(6.0, TestCompartmentId.COMPARTMENT_2, ObservationType.PERSON_COMPARTMENT, firstPerson));
		/*
		 * Global Component 1: second person's first move --> demonstrates Post
		 * Conditions 1
		 */

		expectedObservations.add(new MultiKey(8.0, TestGlobalComponentId.GLOBAL_COMPONENT_1, ObservationType.PERSON_COMPARTMENT, secondPerson));

		/*
		 * Region 1: first person's second move --> demonstrates Post Conditions
		 * 1 and 2
		 */

		expectedObservations.add(new MultiKey(6.0, TestRegionId.REGION_1, ObservationType.PERSON_COMPARTMENT, firstPerson));

		/*
		 * All others: no observations --> demonstrates Post Condition 2
		 */

		final Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);

	}

	/**
	 * Tests
	 * {@link EnvironmentImpl#observePersonPropertyChange(boolean, PersonId, PersonPropertyId)}
	 *
	 */
	@Test

	public void testObservePersonPropertyChange() {
		/*
		 * We test for the post conditions by first having the components
		 * execute a series time-separated plans and then examining the
		 * observations recorded by each component. Precondition tests are added
		 * at the end.
		 *
		 * Actions
		 *
		 * Time 1 : Compartment 1 starts observation of person's Property P
		 *
		 * Time 2 : Compartment 2 starts observation of person's Property P
		 *
		 * Time 3 : Compartment 2 changes person's property value
		 *
		 * Time 4 : Compartment 1 stops observation of person's property
		 *
		 * Time 5 : Region 1 starts observation of person's property
		 *
		 * Time 6 : Compartment 2 changes person's property
		 *
		 * Expected observations
		 *
		 * Compartment 1: first property change --> demonstrates Post Conditions
		 * 1 and 3
		 *
		 * Compartment 2: no observations demonstrates Post Condition 4
		 *
		 * Region 1: second property change --> demonstrates Post Conditions 1
		 * and 2
		 *
		 * All others: no observations --> demonstrates Post Condition 2
		 */
		final long seed = SEED_PROVIDER.getSeedValue(3);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.TRUE, randomGenerator);

		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		/*
		 * Establish a non-boolean property so that we can have two distinct
		 * values different from the current value.
		 */
		TestPersonPropertyId candidatePropertyId = null;
		for (final TestPersonPropertyId personPropertyId : TestPersonPropertyId.values()) {
			final PropertyDefinition propertyDefinition = scenario.getPersonPropertyDefinition(personPropertyId);
			if (propertyDefinition.getType() != Boolean.class) {
				candidatePropertyId = personPropertyId;
				break;
			}

		}
		assertNotNull(candidatePropertyId);
		final TestPersonPropertyId selectedPersonPropertyId = candidatePropertyId;

		final PropertyDefinition propertyDefinition = scenario.getPersonPropertyDefinition(selectedPersonPropertyId);
		assertTrue(propertyDefinition.getDefaultValue().isPresent());
		final Object currentPropertyValue = propertyDefinition.getDefaultValue().get();
		Object propertyValue1 = null;
		while (currentPropertyValue.equals(propertyValue1) || (propertyValue1 == null)) {
			propertyValue1 = generatePropertyValue(propertyDefinition, randomGenerator);
		}
		assertNotNull(propertyValue1);
		assertFalse(propertyValue1.equals(currentPropertyValue));
		Object propertyValue2 = null;
		while (currentPropertyValue.equals(propertyValue2) || propertyValue1.equals(propertyValue2) || (propertyValue2 == null)) {
			propertyValue2 = generatePropertyValue(propertyDefinition, randomGenerator);
		}
		assertNotNull(propertyValue2);
		assertFalse(propertyValue2.equals(currentPropertyValue));
		assertFalse(propertyValue2.equals(propertyValue1));

		final Object firstPropertyValue = propertyValue1;
		final Object secondPropertyValue = propertyValue2;

		final List<PersonId> peopleInCompartment2 = new ArrayList<>();
		for (final PersonId personId : scenario.getPeopleIds()) {
			final CompartmentId personCompartment = scenario.getPersonCompartment(personId);
			if (personCompartment.equals(TestCompartmentId.COMPARTMENT_2)) {
				peopleInCompartment2.add(personId);
			}
		}
		assertTrue(peopleInCompartment2.size() >= 1);
		final PersonId selectedPersonId = peopleInCompartment2.get(0);

		/*
		 * Time 1 : Compartment 1 starts observation of person's Property P
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			environment.observePersonPropertyChange(true, selectedPersonId, selectedPersonPropertyId);
		});

		/*
		 * Time 2 : Compartment 2 starts observation of person's Property P
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.observePersonPropertyChange(true, selectedPersonId, selectedPersonPropertyId);
		});

		/*
		 * Time 3 : Compartment 2 changes person's property value
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.setPersonPropertyValue(selectedPersonId, selectedPersonPropertyId, firstPropertyValue);
		});

		/*
		 * Time 4 : Compartment 1 stops observation of person's property
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			environment.observePersonPropertyChange(false, selectedPersonId, selectedPersonPropertyId);
		});

		/*
		 * Time 5 : Region 1 starts observation of person's property
		 */
		taskPlanContainer.addTaskPlan(TestRegionId.REGION_1, testTime++, (environment) -> {
			environment.observePersonPropertyChange(true, selectedPersonId, selectedPersonPropertyId);
		});

		/*
		 * Time 6 : Compartment 2 changes person's property
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.setPersonPropertyValue(selectedPersonId, selectedPersonPropertyId, secondPropertyValue);
		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			final Object key = new Object();
			environment.addPopulationIndex(allPeople(), key);
			Optional<PersonId> optional = environment.getRandomIndexedPerson(key);
			assertTrue(optional.isPresent());
			PersonId personId = optional.get();

			// if the person is null
			assertModelException(() -> environment.observePersonPropertyChange(true, null, TestPersonPropertyId.PERSON_PROPERTY_1), SimulationErrorType.NULL_PERSON_ID);
			// if the person is unknown
			assertModelException(() -> environment.observePersonPropertyChange(true, new PersonId(-1), TestPersonPropertyId.PERSON_PROPERTY_1), SimulationErrorType.UNKNOWN_PERSON_ID);
			// if the property id is null
			assertModelException(() -> environment.observePersonPropertyChange(true, personId, null), SimulationErrorType.NULL_PERSON_PROPERTY_ID);
			// if the property is unknown
			assertModelException(() -> environment.observePersonPropertyChange(true, personId, TestPersonPropertyId.getUnknownPersonPropertyId()), SimulationErrorType.UNKNOWN_PERSON_PROPERTY_ID);

			environment.removePopulationIndex(key);

		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		final Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		/*
		 * Expected observations
		 *
		 * Compartment 1: first property change --> demonstrates Post Conditions
		 * 1 and 3
		 */

		expectedObservations.add(new MultiKey(3.0, TestCompartmentId.COMPARTMENT_1, ObservationType.PERSON_PROPERTY, selectedPersonId, selectedPersonPropertyId, firstPropertyValue));

		/*
		 * Compartment 2: no observations demonstrates Post Condition 4
		 */

		/*
		 * Region 1: second property change --> demonstrates Post Conditions 1
		 * and 2
		 */
		expectedObservations.add(new MultiKey(6.0, TestRegionId.REGION_1, ObservationType.PERSON_PROPERTY, selectedPersonId, selectedPersonPropertyId, secondPropertyValue));
		/*
		 * All others: no observations --> demonstrates Post Condition 2
		 */

		final Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);

	}

	/**
	 * Tests {@link EnvironmentImpl#observePersonRegionChange(boolean, PersonId)}
	 *
	 */
	@Test

	public void testObservePersonRegionChange() {
		/*
		 * We test for the post conditions by first having the components
		 * execute a series time-separated plans and then examining the
		 * observations recorded by each component. Precondition tests are added
		 * at the end.
		 *
		 * Actions
		 *
		 * Time 1 : Region 1 starts observation first person's region
		 * assignment. First person starts in Compartment 2.
		 *
		 * Time 2 : Region 2 starts observation of first person's region
		 * assignment
		 *
		 * Time 3 : Region 2 moves first person to Region 3
		 *
		 * Time 4 : Region 1 stops observation first person's region
		 *
		 * Time 5 : Compartment 1 starts observation of first person's region
		 *
		 * Time 6 : Region 3 moves first person to Region 4
		 *
		 * Time 7 : Global Component 1 starts observation of second person's
		 * region
		 *
		 * Time 8 : Region 2 moves second person to Region 4. Second person
		 * starts in Region 2.
		 *
		 * Expected observations
		 *
		 * Region 1: first person's first move --> demonstrates Post Conditions
		 * 1 and 3
		 *
		 * Region 2: first person's second move --> demonstrates Post Conditions
		 * 1 and 4
		 *
		 * Global Component 1: second person's first move --> demonstrates Post
		 * Conditions 1
		 *
		 * Compartment 1: first person's second move --> demonstrates Post
		 * Conditions 1 and 2
		 *
		 * All others: no observations --> demonstrates Post Condition 2
		 */

		final long seed = SEED_PROVIDER.getSeedValue(4);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.TRUE, randomGenerator);

		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		/*
		 * Establish two people from Region 2
		 */
		final List<PersonId> peopleInRegion2 = new ArrayList<>();
		for (final PersonId personId : scenario.getPeopleIds()) {
			if (scenario.getPersonRegion(personId).equals(TestRegionId.REGION_2)) {
				peopleInRegion2.add(personId);
			}
		}
		assertTrue(peopleInRegion2.size() >= 2);

		final PersonId firstPerson = peopleInRegion2.get(0);
		final PersonId secondPerson = peopleInRegion2.get(1);
		/*
		 * Time 1 : Region 1 starts observation first person's region
		 * assignment. First person starts in Region 2.
		 */

		taskPlanContainer.addTaskPlan(TestRegionId.REGION_1, testTime++, (environment) -> {
			environment.observePersonRegionChange(true, firstPerson);
		});
		/*
		 * Time 2 : Region 2 starts observation of first person's region
		 * assignment
		 */
		taskPlanContainer.addTaskPlan(TestRegionId.REGION_2, testTime++, (environment) -> {
			environment.observePersonRegionChange(true, firstPerson);
		});

		/*
		 * Time 3 : Region 2 moves first person to Region 3
		 */
		taskPlanContainer.addTaskPlan(TestRegionId.REGION_2, testTime++, (environment) -> {
			environment.setPersonRegion(firstPerson, TestRegionId.REGION_3);
		});

		/*
		 * Time 4 : Region 1 stops observation first person's region
		 */
		taskPlanContainer.addTaskPlan(TestRegionId.REGION_1, testTime++, (environment) -> {
			environment.observePersonRegionChange(false, firstPerson);
		});

		/*
		 * Time 5 : Compartment 1 starts observation of first person's region
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			environment.observePersonRegionChange(true, firstPerson);
		});
		/*
		 * Time 6 : Region 3 moves first person to Region 4
		 */
		taskPlanContainer.addTaskPlan(TestRegionId.REGION_3, testTime++, (environment) -> {
			environment.setPersonRegion(firstPerson, TestRegionId.REGION_4);
		});

		/*
		 * Time 7 : Global Component 1 starts observation of second person's
		 * compartment
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			environment.observePersonRegionChange(true, secondPerson);
		});

		/*
		 * Time 8 : Region 2 moves second person to Region 4. Second person
		 * starts in Region 2.
		 */
		taskPlanContainer.addTaskPlan(TestRegionId.REGION_2, testTime++, (environment) -> {
			environment.setPersonRegion(secondPerson, TestRegionId.REGION_4);
		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			// if the person is null
			assertModelException(() -> environment.observePersonRegionChange(true, null), SimulationErrorType.NULL_PERSON_ID);
			// if the person is unknown
			assertModelException(() -> environment.observePersonRegionChange(true, new PersonId(-1)), SimulationErrorType.UNKNOWN_PERSON_ID);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		final Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		/*
		 * Region 1: first person's first move --> demonstrates Post Conditions
		 * 1 and 3
		 */
		expectedObservations.add(new MultiKey(3.0, TestRegionId.REGION_1, ObservationType.PERSON_REGION, firstPerson));

		/*
		 * Region 2: first person's second move --> demonstrates Post Conditions
		 * 1 and 4
		 */
		expectedObservations.add(new MultiKey(6.0, TestRegionId.REGION_2, ObservationType.PERSON_REGION, firstPerson));
		/*
		 * Global Component 1: second person's first move --> demonstrates Post
		 * Conditions 1
		 */

		expectedObservations.add(new MultiKey(8.0, TestGlobalComponentId.GLOBAL_COMPONENT_1, ObservationType.PERSON_REGION, secondPerson));

		/*
		 * Compartment 1: first person's second move --> demonstrates Post
		 * Conditions 1 and 2
		 */

		expectedObservations.add(new MultiKey(6.0, TestCompartmentId.COMPARTMENT_1, ObservationType.PERSON_REGION, firstPerson));

		/*
		 * All others: no observations --> demonstrates Post Condition 2
		 */

		final Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);

	}

	/**
	 * Tests
	 * {@link EnvironmentImpl#observePersonResourceChange(boolean, PersonId, ResourceId)}
	 *
	 */
	@Test

	public void testObservePersonResourceChange() {
		/*
		 * We test for the post conditions by first having the components
		 * execute a series time-separated plans and then examining the
		 * observations recorded by each component. Precondition tests are added
		 * at the end.
		 *
		 * Actions
		 *
		 * Time 1 : Compartment 1 starts observation of person's Resource Level.
		 * Person will be in Compartment 1 and Region 1.
		 *
		 * Time 2 : Region 1 starts observation of person's Resource Level
		 *
		 * Time 3 : Compartment 2 starts observation of person's Resource Level
		 *
		 * Time 4 : Region 1 changes person's Resource Level by transfer to
		 * person from Region 1
		 *
		 * Time 5 : Global Component 1 starts observation of person's Resource
		 * Level
		 *
		 * Time 6 : Compartment 2 stops observation of person's Resource Level
		 *
		 * Time 7 : Region 1 changes person's resource level by transfer from
		 * person to Region 1
		 *
		 * Time 8 : Compartment 1 changes person's Resource Level by removing
		 * resource from person
		 *
		 * Expected observations
		 *
		 * Compartment 1: first and second resource changes --> demonstrates
		 * Post Conditions 1 and 4
		 *
		 * Compartment 2: first resource change --> demonstrates Post Condition
		 * 1 and 3
		 *
		 * Region 1: third property changes --> demonstrates Post Conditions 1
		 * and 4
		 *
		 * Global Component 1: second and third property changes -->
		 * demonstrates Post Conditions 1 and 2
		 *
		 * All others: no observations --> demonstrates Post Condition 2
		 */
		final long seed = SEED_PROVIDER.getSeedValue(5);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.TRUE, randomGenerator);

		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		/*
		 * Select a resource
		 */
		final TestResourceId selectedResourceId = TestResourceId.getRandomResourceId(randomGenerator);

		/*
		 * Select a person from Compartment 1, Region 1
		 */
		final List<PersonId> peopleInCompartment1AndRegion1 = new ArrayList<>();
		for (final PersonId personId : scenario.getPeopleIds()) {
			final CompartmentId personCompartment = scenario.getPersonCompartment(personId);
			if (personCompartment.equals(TestCompartmentId.COMPARTMENT_1)) {
				final RegionId personRegion = scenario.getPersonRegion(personId);
				if (personRegion.equals(TestRegionId.REGION_1)) {
					peopleInCompartment1AndRegion1.add(personId);
				}
			}
		}
		assertTrue(peopleInCompartment1AndRegion1.size() >= 1);
		final int personIndex = randomGenerator.nextInt(peopleInCompartment1AndRegion1.size());
		final PersonId selectedPersonId = peopleInCompartment1AndRegion1.get(personIndex);

		/*
		 * select amounts to move and calculate expected resulting resource
		 * levels for the selected person and resource
		 */
		final long firstAmount = 1000;
		final long secondAmount = 300;
		final long thirdAmount = 400;

		final long expectedFirstLevel = firstAmount;
		final long expectedSecondLevel = firstAmount - secondAmount;
		final long expectedThirdLevel = expectedSecondLevel - thirdAmount;

		/*
		 * Time 1 : Compartment 1 starts observation of person's Resource Level.
		 * Person will be in Compartment 1 and Region 1.
		 */

		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			environment.observePersonResourceChange(true, selectedPersonId, selectedResourceId);
		});

		/*
		 * Time 2 : Region 1 starts observation of person's Resource Level
		 */
		taskPlanContainer.addTaskPlan(TestRegionId.REGION_1, testTime++, (environment) -> {
			environment.observePersonResourceChange(true, selectedPersonId, selectedResourceId);
		});

		/*
		 * Time 3 : Compartment 2 starts observation of person's Resource Level
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.observePersonResourceChange(true, selectedPersonId, selectedResourceId);
		});

		/*
		 * Time 4 :Region 1 changes person's Resource Level by transfer to
		 * person from Region 1
		 */
		taskPlanContainer.addTaskPlan(TestRegionId.REGION_1, testTime++, (environment) -> {
			environment.addResourceToRegion(selectedResourceId, TestRegionId.REGION_1, firstAmount);
			environment.transferResourceToPerson(selectedResourceId, selectedPersonId, firstAmount);
		});

		/*
		 * Time 5 : Global Component 1 starts observation of person's Resource
		 * Level
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			environment.observePersonResourceChange(true, selectedPersonId, selectedResourceId);
		});
		/*
		 * Time 6 : Compartment 2 stops observation of person's Resource Level
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.observePersonResourceChange(false, selectedPersonId, selectedResourceId);
		});

		/*
		 * Time 7 : Region 1 changes person's resource level by transfer from
		 * person to Region 1
		 */
		taskPlanContainer.addTaskPlan(TestRegionId.REGION_1, testTime++, (environment) -> {
			environment.transferResourceFromPerson(selectedResourceId, selectedPersonId, secondAmount);
		});
		/*
		 * Time 8 : Compartment 1 changes person's Resource Level by removing
		 * resource from person
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			environment.removeResourceFromPerson(selectedResourceId, selectedPersonId, thirdAmount);
		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			final Object key = new Object();
			environment.addPopulationIndex(allPeople(), key);

			Optional<PersonId> optional = environment.getRandomIndexedPerson(key);
			assertTrue(optional.isPresent());
			final PersonId personId = optional.get();

			// if the person is null
			assertModelException(() -> environment.observePersonResourceChange(true, null, TestResourceId.RESOURCE1), SimulationErrorType.NULL_PERSON_ID);
			// if the person is unknown
			assertModelException(() -> environment.observePersonResourceChange(true, new PersonId(-1), TestResourceId.RESOURCE1), SimulationErrorType.UNKNOWN_PERSON_ID);
			// if the resource id is null
			assertModelException(() -> environment.observePersonResourceChange(true, personId, null), SimulationErrorType.NULL_RESOURCE_ID);
			// if the resource is unknown
			assertModelException(() -> environment.observePersonResourceChange(true, personId, TestResourceId.getUnknownResourceId()), SimulationErrorType.UNKNOWN_RESOURCE_ID);

			environment.removePopulationIndex(key);

		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		final Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		/*
		 * Compartment 1: first and second resource changes --> demonstrates
		 * Post Conditions 1 and 4
		 */
		expectedObservations.add(new MultiKey(4.0, TestCompartmentId.COMPARTMENT_1, ObservationType.PERSON_RESOURCE, selectedPersonId, selectedResourceId, expectedFirstLevel));

		expectedObservations.add(new MultiKey(7.0, TestCompartmentId.COMPARTMENT_1, ObservationType.PERSON_RESOURCE, selectedPersonId, selectedResourceId, expectedSecondLevel));

		/*
		 * Compartment 2: first resource change --> demonstrates Post Condition
		 * 1 and 3
		 */

		expectedObservations.add(new MultiKey(4.0, TestCompartmentId.COMPARTMENT_2, ObservationType.PERSON_RESOURCE, selectedPersonId, selectedResourceId, expectedFirstLevel));

		/*
		 * Region 1: third property changes --> demonstrates Post Conditions 1
		 * and 4
		 */

		expectedObservations.add(new MultiKey(8.0, TestRegionId.REGION_1, ObservationType.PERSON_RESOURCE, selectedPersonId, selectedResourceId, expectedThirdLevel));

		/*
		 * Global Component 1: second and third property changes -->
		 * demonstrates Post Conditions 1 and 2
		 */
		expectedObservations.add(new MultiKey(7.0, TestGlobalComponentId.GLOBAL_COMPONENT_1, ObservationType.PERSON_RESOURCE, selectedPersonId, selectedResourceId, expectedSecondLevel));

		expectedObservations.add(new MultiKey(8.0, TestGlobalComponentId.GLOBAL_COMPONENT_1, ObservationType.PERSON_RESOURCE, selectedPersonId, selectedResourceId, expectedThirdLevel));

		/*
		 * All others: no observations --> demonstrates Post Condition 2
		 */

		final Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);

	}

	
}
