package gcm.automated;

import static gcm.automated.support.EnvironmentSupport.addObservationContainer;
import static gcm.automated.support.EnvironmentSupport.addStandardComponentsAndTypes;
import static gcm.automated.support.EnvironmentSupport.addStandardPeople;
import static gcm.automated.support.EnvironmentSupport.addStandardPropertyDefinitions;
import static gcm.automated.support.EnvironmentSupport.addStandardTrackingAndScenarioId;
import static gcm.automated.support.EnvironmentSupport.addTaskPlanContainer;
import static gcm.automated.support.EnvironmentSupport.assertAllPlansExecuted;
import static gcm.automated.support.EnvironmentSupport.generatePropertyValue;
import static gcm.automated.support.EnvironmentSupport.getRandomGenerator;
import static gcm.automated.support.EnvironmentSupport.getReplication;
import static gcm.automated.support.ExceptionAssertion.assertModelException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.math3.random.RandomGenerator;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import gcm.automated.support.EnvironmentSupport;
import gcm.automated.support.EnvironmentSupport.PropertyAssignmentPolicy;
import gcm.automated.support.ObservationContainer;
import gcm.automated.support.SeedProvider;
import gcm.automated.support.TaskPlanContainer;
import gcm.automated.support.TestCompartmentId;
import gcm.automated.support.TestGlobalComponentId;
import gcm.automated.support.TestMaterialId;
import gcm.automated.support.TestMaterialsProducerId;
import gcm.automated.support.TestRegionId;
import gcm.automated.support.TestResourceId;
import gcm.replication.Replication;
import gcm.scenario.BatchId;
import gcm.scenario.CompartmentId;
import gcm.scenario.PersonId;
import gcm.scenario.PropertyDefinition;
import gcm.scenario.RegionId;
import gcm.scenario.ResourceId;
import gcm.scenario.ResourcePropertyId;
import gcm.scenario.Scenario;
import gcm.scenario.ScenarioBuilder;
import gcm.scenario.StageId;
import gcm.scenario.UnstructuredScenarioBuilder;
import gcm.simulation.EnvironmentImpl;
import gcm.simulation.ObservationType;
import gcm.simulation.Simulation;
import gcm.simulation.SimulationErrorType;
import gcm.util.MultiKey;
import gcm.util.annotations.UnitTest;
import gcm.util.annotations.UnitTestMethod;

@UnitTest(target = EnvironmentImpl.class)

public class AT_EnvironmentImpl_16 {

	private static SeedProvider SEED_PROVIDER;

	@BeforeClass
	public static void beforeClass() {
		SEED_PROVIDER = new SeedProvider(EnvironmentSupport.getMetaSeed(16));
	}

	/**
	 * Internal test(not part of public tests) to show that there are no large
	 * gaps in the seed cases generated by the SeedProvider.
	 */
	@AfterClass
	public static void afterClass() {
		//System.out.println(SEED_PROVIDER.generateUnusedSeedReport());
	}

	/**
	 * Tests
	 * {@link EnvironmentImpl#observeRegionResourceChange(boolean, RegionId, ResourceId)}
	 */

	@Test
	@UnitTestMethod(name = "observeRegionResourceChange", args = { boolean.class, RegionId.class, ResourceId.class })
	public void testObserveRegionResourceChange() {
		/*
		 * We test for the post conditions by first having the components
		 * execute a series time-separated plans and then examining the
		 * observations recorded by each component. Precondition tests are added
		 * at the end.
		 *
		 * Actions
		 *
		 * Time 1 : Region 1 starts observation of Region 1 Resource R
		 *
		 * Time 2 : Compartment 1 starts observation of Region 1 Resource R
		 *
		 * Time 3 : Region 1 changes its Resource R level by adding resource
		 *
		 * Time 4 : Global Component 1 starts observation of Region 1 Resource R
		 *
		 * Time 5 : Global Component 1 changes Region 1 Resource R level by
		 * removing resource
		 *
		 * Time 6 : Region 1 stops observation of Region 1 Resource R
		 *
		 * Time 7 : Compartment 1 changes Region 1 Resource R level by
		 * transferring resource to person
		 *
		 * Expected observations
		 *
		 * Region 1: second resource change --> demonstrates Post Conditions 1,
		 * 3 and 4
		 *
		 * Compartment 1: first and second resource change --> demonstrates Post
		 * Conditions 1 and 4
		 *
		 * Global Component 1: third resource change --> demonstrates Post
		 * Conditions 1 and 2
		 *
		 * All others: no observations --> demonstrates Post Condition 2
		 */

		final long seed = SEED_PROVIDER.getSeedValue(0);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		/*
		 * Select a resource
		 */
		final TestResourceId selectedResourceId = TestResourceId.getRandomResourceId(randomGenerator);

		/*
		 * Select a person from Compartment 1 and Region 1
		 */
		final List<PersonId> peopleInCompartment1Region1 = new ArrayList<>();
		for (final PersonId personId : scenario.getPeopleIds()) {
			final CompartmentId personCompartment = scenario.getPersonCompartment(personId);
			if (personCompartment.equals(TestCompartmentId.COMPARTMENT_1)) {
				final RegionId personRegion = scenario.getPersonRegion(personId);
				if (personRegion.equals(TestRegionId.REGION_1)) {
					peopleInCompartment1Region1.add(personId);
				}
			}
		}
		assertTrue(peopleInCompartment1Region1.size() >= 1);

		final int index = randomGenerator.nextInt(peopleInCompartment1Region1.size());
		final PersonId selectedPerson = peopleInCompartment1Region1.get(index);

		/*
		 * Select amount to move/create
		 */
		final long firstResourceAmount = 1000;
		final long secondResourceAmount = 250;
		final long thirdResourceAmount = 400;

		/*
		 * Derive resulting expected resource balances for the region
		 */
		final long firstExpectedResourceLevel = firstResourceAmount;
		final long secondExpectedResourceLevel = firstExpectedResourceLevel - secondResourceAmount;
		final long thirdExpectedResourceLevel = secondExpectedResourceLevel - thirdResourceAmount;

		/*
		 * Time 1 : Region 1 starts observation of Region 1 Resource R
		 */
		taskPlanContainer.addTaskPlan(TestRegionId.REGION_1, testTime++, (environment) -> {
			environment.observeRegionResourceChange(true, TestRegionId.REGION_1, selectedResourceId);
		});

		/*
		 * Time 2 : Compartment 1 starts observation of Region 1 Resource R
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			environment.observeRegionResourceChange(true, TestRegionId.REGION_1, selectedResourceId);
		});

		/*
		 * Time 3 : Region 1 changes its Resource R level by adding resource
		 */
		taskPlanContainer.addTaskPlan(TestRegionId.REGION_1, testTime++, (environment) -> {
			environment.addResourceToRegion(selectedResourceId, TestRegionId.REGION_1, firstResourceAmount);
		});

		/*
		 * Time 4 : Global Component 1 starts observation of Region 1 Resource R
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			environment.observeRegionResourceChange(true, TestRegionId.REGION_1, selectedResourceId);
		});

		/*
		 * Time 5 : Global Component 1 changes Region 1 Resource R level by
		 * removing resource
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			environment.removeResourceFromRegion(selectedResourceId, TestRegionId.REGION_1, secondResourceAmount);
		});

		/*
		 * Time 6 : Region 1 stops observation of Region 1 Resource R
		 */
		taskPlanContainer.addTaskPlan(TestRegionId.REGION_1, testTime++, (environment) -> {
			environment.observeRegionResourceChange(false, TestRegionId.REGION_1, selectedResourceId);
		});

		/*
		 * Time 7 : Compartment 1 changes Region 1 Resource R level by
		 * transferring resource to person
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			environment.transferResourceToPerson(selectedResourceId, selectedPerson, thirdResourceAmount);
		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			// if the region id is null
			assertModelException(() -> environment.observeRegionResourceChange(false, null, TestResourceId.RESOURCE1), SimulationErrorType.NULL_REGION_ID);
			// if the region is unknown
			assertModelException(() -> environment.observeRegionResourceChange(false, TestRegionId.getUnknownRegionId(), TestResourceId.RESOURCE1), SimulationErrorType.UNKNOWN_REGION_ID);
			// if the resource id is null
			assertModelException(() -> environment.observeRegionResourceChange(false, TestRegionId.REGION_1, null), SimulationErrorType.NULL_RESOURCE_ID);
			// if the resource is unknown
			assertModelException(() -> environment.observeRegionResourceChange(false, TestRegionId.REGION_1, TestResourceId.getUnknownResourceId()), SimulationErrorType.UNKNOWN_RESOURCE_ID);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		final Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		/*
		 * Expected observations
		 *
		 * Region 1: second resource change --> demonstrates Post Conditions 1,
		 * 3 and 4
		 */
		expectedObservations.add(new MultiKey(5.0, TestRegionId.REGION_1, ObservationType.REGION_RESOURCE, TestRegionId.REGION_1, selectedResourceId, secondExpectedResourceLevel));

		/*
		 * Compartment 1: first and second resource change --> demonstrates Post
		 * Conditions 1 and 4
		 */
		expectedObservations.add(new MultiKey(3.0, TestCompartmentId.COMPARTMENT_1, ObservationType.REGION_RESOURCE, TestRegionId.REGION_1, selectedResourceId, firstExpectedResourceLevel));

		expectedObservations.add(new MultiKey(5.0, TestCompartmentId.COMPARTMENT_1, ObservationType.REGION_RESOURCE, TestRegionId.REGION_1, selectedResourceId, secondExpectedResourceLevel));

		/*
		 * Global Component 1: third resource change --> demonstrates Post
		 * Conditions 1 and 2
		 */
		expectedObservations.add(new MultiKey(7.0, TestGlobalComponentId.GLOBAL_COMPONENT_1, ObservationType.REGION_RESOURCE, TestRegionId.REGION_1, selectedResourceId, thirdExpectedResourceLevel));
		/*
		 * All others: no observations --> demonstrates Post Condition 2
		 */

		final Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);

	}

	/**
	 * Tests
	 * {@link EnvironmentImpl#observeResourcePropertyChange(boolean, ResourceId, ResourcePropertyId)}
	 *
	 */
	@Test
	@UnitTestMethod(name = "observeResourcePropertyChange", args = { boolean.class, ResourceId.class, ResourcePropertyId.class })
	public void testObserveResourcePropertyChange() {
		/*
		 * We test for the post conditions by first having the components
		 * execute a series time-separated plans and then examining the
		 * observations recorded by each component. Precondition tests are added
		 * at the end.
		 *
		 * Actions
		 *
		 * Time 1 : Compartment 1 starts observation of Resource Property P
		 *
		 * Time 2 : Global Component 1 starts observation of Resource Property P
		 *
		 * Time 3 : Global Component 1 changes Resource Property P value
		 *
		 * Time 4 : Compartment 1 stops observation of Resource Property P
		 *
		 * Time 5 : Region 1 starts observation of Resource Property P
		 *
		 * Time 6 : Global Component 2 changes Resource Property P value
		 *
		 * Expected observations
		 *
		 * Compartment 1: first property change --> demonstrates Post Conditions
		 * 1 and 3
		 *
		 * Global Component 1: second property change demonstrates Post
		 * Conditions 1 and 4
		 *
		 * Region 1: second property change --> demonstrates Post Conditions 1
		 * and 2
		 *
		 * All others: no observations --> demonstrates Post Condition 2
		 */
		final long seed = SEED_PROVIDER.getSeedValue(1);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.TRUE, randomGenerator);

		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		/*
		 * Establish a non-boolean property so that we can have two distinct
		 * values different from the current value.
		 */
		ResourceId candidateResourceId = null;
		ResourcePropertyId candidatePropertyId = null;
		mainloop: for (TestResourceId testResourceId : TestResourceId.values()) {
			candidateResourceId = testResourceId;
			for (final ResourcePropertyId resourcePropertyId : testResourceId.getResourcePropertyIds()) {
				final PropertyDefinition propertyDefinition = scenario.getResourcePropertyDefinition(testResourceId, resourcePropertyId);
				if (propertyDefinition.getType() != Boolean.class) {
					candidatePropertyId = resourcePropertyId;
					break mainloop;
				}
			}
		}
		assertNotNull(candidateResourceId);
		assertNotNull(candidatePropertyId);

		final ResourcePropertyId selectedResourcePropertyId = candidatePropertyId;
		final ResourceId selectedResourceId = candidateResourceId;

		final PropertyDefinition propertyDefinition = scenario.getResourcePropertyDefinition(selectedResourceId, selectedResourcePropertyId);
		assertTrue(propertyDefinition.getDefaultValue().isPresent());
		final Object currentPropertyValue = propertyDefinition.getDefaultValue().get();
		Object propertyValue1 = null;
		while (currentPropertyValue.equals(propertyValue1) || (propertyValue1 == null)) {
			propertyValue1 = generatePropertyValue(propertyDefinition, randomGenerator);
		}
		assertNotNull(propertyValue1);
		assertFalse(propertyValue1.equals(currentPropertyValue));
		Object propertyValue2 = null;
		while (currentPropertyValue.equals(propertyValue2) || propertyValue1.equals(propertyValue2) || (propertyValue2 == null)) {
			propertyValue2 = generatePropertyValue(propertyDefinition, randomGenerator);
		}
		assertNotNull(propertyValue2);
		assertFalse(propertyValue2.equals(currentPropertyValue));
		assertFalse(propertyValue2.equals(propertyValue1));

		final Object firstPropertyValue = propertyValue1;
		final Object secondPropertyValue = propertyValue2;

		/*
		 * Time 1 : Compartment 1 starts observation of Resource Property P
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			environment.observeResourcePropertyChange(true, selectedResourceId, selectedResourcePropertyId);
		});

		/*
		 * Time 2 : Global Component 1 starts observation of Resource Property P
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			environment.observeResourcePropertyChange(true, selectedResourceId, selectedResourcePropertyId);
		});

		/*
		 * Time 3 : Global Component 1 changes Resource Property P value
		 */

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			environment.setResourcePropertyValue(selectedResourceId, selectedResourcePropertyId, firstPropertyValue);
		});

		/*
		 * Time 4 : Compartment 1 stops observation of Resource Property P
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			environment.observeResourcePropertyChange(false, selectedResourceId, selectedResourcePropertyId);
		});

		/*
		 * Time 5 : Region 1 starts observation of Resource Property P
		 */
		taskPlanContainer.addTaskPlan(TestRegionId.REGION_1, testTime++, (environment) -> {
			environment.observeResourcePropertyChange(true, selectedResourceId, selectedResourcePropertyId);
		});

		/*
		 * Time 6 : Global Component 2 changes Resource Property P value
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, testTime++, (environment) -> {
			environment.setResourcePropertyValue(selectedResourceId, selectedResourcePropertyId, secondPropertyValue);
		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, testTime++, (environment) -> {
			ResourceId resourceId = TestResourceId.RESOURCE1;
			ResourcePropertyId resourcePropertyId = TestResourceId.RESOURCE1.getResourcePropertyIds()[0];

			// if the resource id is null
			assertModelException(() -> environment.observeResourcePropertyChange(true, null, resourcePropertyId), SimulationErrorType.NULL_RESOURCE_ID);
			// if the resource is unknown
			assertModelException(() -> environment.observeResourcePropertyChange(true, TestResourceId.getUnknownResourceId(), resourcePropertyId), SimulationErrorType.UNKNOWN_RESOURCE_ID);
			// if the property id is null
			assertModelException(() -> environment.observeResourcePropertyChange(true, resourceId, null), SimulationErrorType.NULL_RESOURCE_PROPERTY_ID);
			// if the property is unknown
			assertModelException(() -> environment.observeResourcePropertyChange(true, resourceId, TestResourceId.getUnknownResourcePropertyId()), SimulationErrorType.UNKNOWN_RESOURCE_PROPERTY_ID);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		final Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		/*
		 * Compartment 1: first property change --> demonstrates Post Conditions
		 * 1 and 3
		 */

		expectedObservations.add(new MultiKey(3.0, TestCompartmentId.COMPARTMENT_1, ObservationType.RESOURCE_PROPERTY, selectedResourceId, selectedResourcePropertyId, firstPropertyValue));

		/*
		 * Global Component 1: second property change demonstrates Post
		 * Conditions 1 and 4
		 */

		expectedObservations.add(new MultiKey(6.0, TestGlobalComponentId.GLOBAL_COMPONENT_1, ObservationType.RESOURCE_PROPERTY, selectedResourceId, selectedResourcePropertyId, secondPropertyValue));

		/*
		 * Region 1: second property change --> demonstrates Post Conditions 1
		 * and 2
		 */
		expectedObservations.add(new MultiKey(6.0, TestRegionId.REGION_1, ObservationType.RESOURCE_PROPERTY, selectedResourceId, selectedResourcePropertyId, secondPropertyValue));

		/*
		 * All others: no observations --> demonstrates Post Condition 2
		 */

		/*
		 * All others: no observations --> demonstrates Post Condition 2
		 */
		final Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);

	}

	/**
	 * Tests {@link EnvironmentImpl#observeStageOfferChange(boolean)}
	 */

	@Test
	@UnitTestMethod(name = "observeStageOfferChange", args = { boolean.class})
	public void testObserveStageOfferChange() {
		/*
		 * We test for the post conditions by first having the components
		 * execute a series time-separated plans and then examining the
		 * observations recorded by each component. Precondition tests are added
		 * at the end.
		 *
		 * Actions
		 *
		 * Time 1 : Materials Producer 1 creates Stage S and starts observation
		 * of State S offer state
		 *
		 * Time 2 : Compartment 1 starts observation of Stage S offer state
		 *
		 * Time 3 : Compartment 2 starts observation of Stage S offer state
		 *
		 * Time 4 : Materials Producer 1 offers Stage S
		 *
		 * Time 5 : Compartment 2 stops observation of Stage S
		 *
		 * Time 6 : Materials Producer 1 retract offer of Stage S
		 *
		 * Expected observations
		 *
		 * Compartment 1: first and second offers demonstrates post condition 1
		 *
		 * Compartment 2: first transfer: demonstrates post conditions 1 and 3
		 *
		 * Materials Producer 1: sees no offers: demonstrates post condition 4
		 *
		 * All others: no observations --> demonstrates Post Condition 2
		 *
		 */
		final long seed = SEED_PROVIDER.getSeedValue(2);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		/*
		 * Time 1 : Materials Producer 1 creates Stage S and starts observation
		 * of State S offer state
		 *
		 */
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			final BatchId batchId1 = environment.createBatch(TestMaterialId.MATERIAL_5, 200);
			final BatchId batchId2 = environment.createBatch(TestMaterialId.MATERIAL_4, 100);
			final StageId stageId = environment.createStage();
			assertEquals(stageId, new StageId(0));
			environment.moveBatchToStage(batchId1, stageId);
			environment.moveBatchToStage(batchId2, stageId);
		});

		/*
		 * Time 2 : Compartment 1 starts observation of Stage S offer state
		 *
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			environment.observeStageOfferChange(true);
		});

		/*
		 * Time 3 : Compartment 2 starts observation of Stage S offer state
		 *
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.observeStageOfferChange(true);
		});

		/*
		 * Time 4 : Materials Producer 1 offers Stage S
		 *
		 */
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			environment.setStageOffer(new StageId(0), true);
		});

		/*
		 * Time 5 : Compartment 2 stops observation of Stage S
		 *
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.observeStageOfferChange(false);
		});
		/*
		 * Time 6 : Materials Producer 1 retract offer of Stage S
		 *
		 */
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			environment.setStageOffer(new StageId(0), false);
		});

		/*
		 * Precondition tests -- no precondition tests
		 */

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		final Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		/*
		 * Expected observations
		 */
		/*
		 * Compartment 1: first transfer: second transfer demonstrates post
		 * condition 1
		 *
		 */
		expectedObservations.add(new MultiKey(4.0, TestCompartmentId.COMPARTMENT_1, ObservationType.STAGE_OFFER, new StageId(0)));
		expectedObservations.add(new MultiKey(6.0, TestCompartmentId.COMPARTMENT_1, ObservationType.STAGE_OFFER, new StageId(0)));

		/*
		 * Compartment 2: first transfer: demonstrates post conditions 1 and 3
		 *
		 */
		expectedObservations.add(new MultiKey(4.0, TestCompartmentId.COMPARTMENT_2, ObservationType.STAGE_OFFER, new StageId(0)));

		final Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);

	}

	/**
	 * Tests
	 * {@link EnvironmentImpl#observeStageOfferChangeByStageId(boolean, StageId)}
	 *
	 */

	@Test
	@UnitTestMethod(name = "observeStageOfferChangeByStageId", args = { boolean.class, StageId.class})
	public void testObserveStageOfferChangeByStageId() {
		/*
		 * We test for the post conditions by first having the components
		 * execute a series time-separated plans and then examining the
		 * observations recorded by each component. Precondition tests are added
		 * at the end.
		 *
		 * Actions
		 *
		 * Time 1 : Materials Producer 1 creates Stage S and starts observation
		 * of State S offer state
		 *
		 * Time 2 : Compartment 1 starts observation of Stage S offer state
		 *
		 * Time 3 : Compartment 2 starts observation of Stage S offer state
		 *
		 * Time 4 : Materials Producer 1 offers Stage S
		 *
		 * Time 5 : Compartment 2 stops observation of Stage S
		 *
		 * Time 6 : Materials Producer 1 retract offer of Stage S
		 *
		 * Expected observations
		 *
		 * Compartment 1: first and second offers demonstrates post condition 1
		 *
		 * Compartment 2: first transfer: demonstrates post conditions 1 and 3
		 *
		 * Materials Producer 1: sees no offers: demonstrates post condition 4
		 *
		 * All others: no observations --> demonstrates Post Condition 2
		 *
		 */
		final long seed = SEED_PROVIDER.getSeedValue(3);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		/*
		 * Time 1 : Materials Producer 1 creates Stage S and starts observation
		 * of State S offer state
		 *
		 */
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			final BatchId batchId1 = environment.createBatch(TestMaterialId.MATERIAL_5, 200);
			final BatchId batchId2 = environment.createBatch(TestMaterialId.MATERIAL_4, 100);
			final StageId stageId = environment.createStage();
			assertEquals(stageId, new StageId(0));
			environment.moveBatchToStage(batchId1, stageId);
			environment.moveBatchToStage(batchId2, stageId);
		});

		/*
		 * Time 2 : Compartment 1 starts observation of Stage S offer state
		 *
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			environment.observeStageOfferChangeByStageId(true, new StageId(0));
		});

		/*
		 * Time 3 : Compartment 2 starts observation of Stage S offer state
		 *
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.observeStageOfferChangeByStageId(true, new StageId(0));
		});

		/*
		 * Time 4 : Materials Producer 1 offers Stage S
		 *
		 */
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			environment.setStageOffer(new StageId(0), true);
		});

		/*
		 * Time 5 : Compartment 2 stops observation of Stage S
		 *
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.observeStageOfferChangeByStageId(false, new StageId(0));
		});

		/*
		 * Time 6 : Materials Producer 1 retract offer of Stage S
		 *
		 */
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			environment.setStageOffer(new StageId(0), false);
		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			// if the stage id is null
			assertModelException(() -> environment.observeStageOfferChangeByStageId(false, null), SimulationErrorType.NULL_STAGE_ID);
			// if the stage is unknown
			assertModelException(() -> environment.observeStageOfferChangeByStageId(false, new StageId(-1)), SimulationErrorType.UNKNOWN_STAGE_ID);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		final Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		/*
		 * Expected observations
		 */
		/*
		 * Compartment 1: first transfer: second transfer demonstrates post
		 * condition 1
		 *
		 */
		expectedObservations.add(new MultiKey(4.0, TestCompartmentId.COMPARTMENT_1, ObservationType.STAGE_OFFER, new StageId(0)));
		expectedObservations.add(new MultiKey(6.0, TestCompartmentId.COMPARTMENT_1, ObservationType.STAGE_OFFER, new StageId(0)));

		/*
		 * Compartment 2: first transfer: demonstrates post conditions 1 and 3
		 *
		 */
		expectedObservations.add(new MultiKey(4.0, TestCompartmentId.COMPARTMENT_2, ObservationType.STAGE_OFFER, new StageId(0)));

		final Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);

	}

	/**
	 * Tests {@link EnvironmentImpl#observeStageTransfer(boolean)}
	 *
	 */

	@Test
	@UnitTestMethod(name = "observeStageTransfer", args = { boolean.class})
	public void testObserveStageTransfer() {
		/*
		 * We test for the post conditions by first having the components
		 * execute a series time-separated plans and then examining the
		 * observations recorded by each component. Precondition tests are added
		 * at the end.
		 *
		 * Actions
		 *
		 * Time 1 : Materials Producer 1 creates Stage S
		 *
		 * Time 2 : Compartment 1 starts observation of Stage S
		 *
		 * Time 3 : Compartment 2 starts observation of Stage S
		 *
		 * Time 4 : Global Component 2 starts observation of Stage S
		 *
		 * Time 5 : Global Component 2 transfers Stage S to Materials Producer 2
		 *
		 * Time 6 : Materials Producer 2 offers Stage S
		 *
		 * Time 7 : Compartment 2 stops observation of Stage S
		 *
		 * Time 8 : Global Component 1 transfers Stage S to Materials Producer 3
		 *
		 * Expected observations
		 *
		 * Materials Producer 1:
		 *
		 * Compartment 1: first and second transfer demonstrates post condition
		 * 1
		 *
		 * Compartment 2: first transfer: demonstrates post conditions 1 and 3
		 *
		 * Global Component 2:second transfer: demonstrates post conditions 1
		 * and 4
		 *
		 * All others: no observations --> demonstrates Post Condition 2
		 *
		 */
		final long seed = SEED_PROVIDER.getSeedValue(4);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		/*
		 * Time 1 : Materials Producer 1 creates Stage S
		 *
		 */
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			final BatchId batchId1 = environment.createBatch(TestMaterialId.MATERIAL_5, 200);
			final BatchId batchId2 = environment.createBatch(TestMaterialId.MATERIAL_4, 100);
			final StageId stageId = environment.createStage();
			assertEquals(stageId, new StageId(0));
			environment.moveBatchToStage(batchId1, stageId);
			environment.moveBatchToStage(batchId2, stageId);
			environment.setStageOffer(stageId, true);
		});

		/*
		 * Time 2 : Compartment 1 starts observation of Stage S
		 *
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			environment.observeStageTransfer(true);
		});

		/*
		 * Time 3 : Compartment 2 starts observation of Stage S
		 *
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.observeStageTransfer(true);
		});

		/*
		 * Time 4 : Global Component 2 starts observation of Stage S
		 *
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, testTime++, (environment) -> {
			environment.observeStageTransfer(true);
		});

		/*
		 * Time 5 : Global Component 2 transfers Stage S to Material Producer 2
		 *
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, testTime++, (environment) -> {
			environment.transferOfferedStageToMaterialsProducer(new StageId(0), TestMaterialsProducerId.MATERIALS_PRODUCER_2);
		});

		/*
		 * Time 6 : Materials Producer 2 offers Stage S
		 *
		 */
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_2, testTime++, (environment) -> {
			environment.setStageOffer(new StageId(0), true);
		});

		/*
		 * Time 7 : Compartment 2 stops observation of Stage S
		 *
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.observeStageTransfer(false);
		});

		/*
		 * Time 8 : Global Component 1 transfers Stage S to Materials Producer 3
		 *
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			environment.transferOfferedStageToMaterialsProducer(new StageId(0), TestMaterialsProducerId.MATERIALS_PRODUCER_3);
		});

		/*
		 * Precondition tests
		 */
		// no preconditions to test

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		final Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		/*
		 * Expected observations
		 */

		/*
		 * Compartment 1: first transfer: second transfer demonstrates post
		 * condition 1
		 *
		 */
		expectedObservations.add(new MultiKey(5.0, TestCompartmentId.COMPARTMENT_1, ObservationType.STAGE_TRANSFER, new StageId(0),TestMaterialsProducerId.MATERIALS_PRODUCER_1,TestMaterialsProducerId.MATERIALS_PRODUCER_2));
		expectedObservations.add(new MultiKey(8.0, TestCompartmentId.COMPARTMENT_1, ObservationType.STAGE_TRANSFER, new StageId(0),TestMaterialsProducerId.MATERIALS_PRODUCER_2,TestMaterialsProducerId.MATERIALS_PRODUCER_3));

		/*
		 * Compartment 2: first transfer: demonstrates post conditions 1 and 3
		 *
		 */
		expectedObservations.add(new MultiKey(5.0, TestCompartmentId.COMPARTMENT_2, ObservationType.STAGE_TRANSFER, new StageId(0),TestMaterialsProducerId.MATERIALS_PRODUCER_1,TestMaterialsProducerId.MATERIALS_PRODUCER_2));

		/*
		 * Global Component 2:second transfer: demonstrates post conditions 1
		 * and 4
		 *
		 */
		expectedObservations.add(new MultiKey(8.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.STAGE_TRANSFER, new StageId(0),TestMaterialsProducerId.MATERIALS_PRODUCER_2,TestMaterialsProducerId.MATERIALS_PRODUCER_3));

		final Set<MultiKey> actualObservations = observationContainer.getObservations();
			
		assertEquals(expectedObservations, actualObservations);

	}

	/**
	 * Tests {@link EnvironmentImpl#observeStageTransferByStageId(boolean, StageId)}
	 *
	 */

	@Test
	@UnitTestMethod(name = "observeStageTransferByStageId", args = { boolean.class, StageId.class})
	public void testObserveStageTransferByStageId() {
		/*
		 * We test for the post conditions by first having the components
		 * execute a series time-separated plans and then examining the
		 * observations recorded by each component. Precondition tests are added
		 * at the end.
		 *
		 * Actions
		 *
		 * Time 1 : Materials Producer 1 creates Stage S
		 *
		 * Time 2 : Compartment 1 starts observation of Stage S
		 *
		 * Time 3 : Compartment 2 starts observation of Stage S
		 *
		 * Time 4 : Global Component 2 starts observation of Stage S
		 *
		 * Time 5 : Global Component 2 transfers Stage S to Materials Producer 2
		 *
		 * Time 6 : Materials Producer 2 offers Stage S
		 *
		 * Time 7 : Compartment 2 stops observation of Stage S
		 *
		 * Time 8 : Global Component 1 transfers Stage S to Materials Producer 3
		 *
		 * Expected observations
		 *
		 * Materials Producer 1:
		 *
		 * Compartment 1: first and second transfer demonstrates post condition
		 * 1
		 *
		 * Compartment 2: first transfer: demonstrates post conditions 1 and 3
		 *
		 * Global Component 2:second transfer: demonstrates post conditions 1
		 * and 4
		 *
		 * All others: no observations --> demonstrates Post Condition 2
		 *
		 */
		final long seed = SEED_PROVIDER.getSeedValue(5);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		/*
		 * Time 1 : Materials Producer 1 creates Stage S
		 *
		 */
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {
			final BatchId batchId1 = environment.createBatch(TestMaterialId.MATERIAL_5, 200);
			final BatchId batchId2 = environment.createBatch(TestMaterialId.MATERIAL_4, 100);
			final StageId stageId = environment.createStage();
			assertEquals(stageId, new StageId(0));
			environment.moveBatchToStage(batchId1, stageId);
			environment.moveBatchToStage(batchId2, stageId);
			environment.setStageOffer(stageId, true);
		});

		/*
		 * Time 2 : Compartment 1 starts observation of Stage S
		 *
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			environment.observeStageTransferByStageId(true, new StageId(0));
		});

		/*
		 * Time 3 : Compartment 2 starts observation of Stage S
		 *
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.observeStageTransferByStageId(true, new StageId(0));
		});

		/*
		 * Time 4 : Global Component 2 starts observation of Stage S
		 *
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, testTime++, (environment) -> {
			environment.observeStageTransferByStageId(true, new StageId(0));
		});

		/*
		 * Time 5 : Global Component 2 transfers Stage S to Material Producer 2
		 *
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, testTime++, (environment) -> {
			environment.transferOfferedStageToMaterialsProducer(new StageId(0), TestMaterialsProducerId.MATERIALS_PRODUCER_2);
		});

		/*
		 * Time 6 : Materials Producer 2 offers Stage S
		 *
		 */
		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_2, testTime++, (environment) -> {
			environment.setStageOffer(new StageId(0), true);
		});

		/*
		 * Time 7 : Compartment 2 stops observation of Stage S
		 *
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			environment.observeStageTransferByStageId(false, new StageId(0));
		});

		/*
		 * Time 8 : Global Component 1 transfers Stage S to Materials Producer 3
		 *
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			environment.transferOfferedStageToMaterialsProducer(new StageId(0), TestMaterialsProducerId.MATERIALS_PRODUCER_3);
		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			// if the stage id is null
			assertModelException(() -> environment.observeStageTransferByStageId(false, null), SimulationErrorType.NULL_STAGE_ID);
			// if the stage is unknown
			assertModelException(() -> environment.observeStageTransferByStageId(false, new StageId(-1)), SimulationErrorType.UNKNOWN_STAGE_ID);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		final Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		/*
		 * Expected observations
		 */

		/*
		 * Compartment 1: first transfer: second transfer demonstrates post
		 * condition 1
		 *
		 */
		expectedObservations.add(new MultiKey(5.0, TestCompartmentId.COMPARTMENT_1, ObservationType.STAGE_TRANSFER, new StageId(0),TestMaterialsProducerId.MATERIALS_PRODUCER_1,TestMaterialsProducerId.MATERIALS_PRODUCER_2));
		expectedObservations.add(new MultiKey(8.0, TestCompartmentId.COMPARTMENT_1, ObservationType.STAGE_TRANSFER, new StageId(0),TestMaterialsProducerId.MATERIALS_PRODUCER_2,TestMaterialsProducerId.MATERIALS_PRODUCER_3));

		/*
		 * Compartment 2: first transfer: demonstrates post conditions 1 and 3
		 *
		 */
		expectedObservations.add(new MultiKey(5.0, TestCompartmentId.COMPARTMENT_2, ObservationType.STAGE_TRANSFER, new StageId(0),TestMaterialsProducerId.MATERIALS_PRODUCER_1,TestMaterialsProducerId.MATERIALS_PRODUCER_2));

		/*
		 * Global Component 2:second transfer: demonstrates post conditions 1
		 * and 4
		 *
		 */
		expectedObservations.add(new MultiKey(8.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.STAGE_TRANSFER, new StageId(0),TestMaterialsProducerId.MATERIALS_PRODUCER_2,TestMaterialsProducerId.MATERIALS_PRODUCER_3));

		final Set<MultiKey> actualObservations = observationContainer.getObservations();
		
		assertEquals(expectedObservations, actualObservations);

	}

	
}
