package gcm.automated;

import static gcm.automated.support.EnvironmentSupport.addObservationContainer;
import static gcm.automated.support.EnvironmentSupport.addStandardComponentsAndTypes;
import static gcm.automated.support.EnvironmentSupport.addStandardPeople;
import static gcm.automated.support.EnvironmentSupport.addStandardTrackingAndScenarioId;
import static gcm.automated.support.EnvironmentSupport.addTaskPlanContainer;
import static gcm.automated.support.EnvironmentSupport.assertAllPlansExecuted;
import static gcm.automated.support.EnvironmentSupport.getRandomGenerator;
import static gcm.automated.support.EnvironmentSupport.getReplication;
import static gcm.automated.support.ExceptionAssertion.assertModelException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.LinkedHashSet;
import java.util.Set;

import org.apache.commons.math3.random.RandomGenerator;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import gcm.automated.support.EnvironmentSupport;
import gcm.automated.support.ObservationContainer;
import gcm.automated.support.SeedProvider;
import gcm.automated.support.TaskPlanContainer;
import gcm.automated.support.TestGlobalComponentId;
import gcm.automated.support.TestGroupTypeId;
import gcm.replication.Replication;
import gcm.scenario.GroupId;
import gcm.scenario.GroupTypeId;
import gcm.scenario.PersonId;
import gcm.scenario.Scenario;
import gcm.scenario.ScenarioBuilder;
import gcm.scenario.UnstructuredScenarioBuilder;
import gcm.simulation.EnvironmentImpl;
import gcm.simulation.ObservationType;
import gcm.simulation.Simulation;
import gcm.simulation.SimulationErrorType;
import gcm.util.MultiKey;
import gcm.util.annotations.UnitTest;

@UnitTest(target = EnvironmentImpl.class)

public class AT_EnvironmentImpl_17 {

	private static SeedProvider SEED_PROVIDER;

	@BeforeClass
	public static void beforeClass() {
		SEED_PROVIDER = new SeedProvider(EnvironmentSupport.getMetaSeed(17));
	}

	/**
	 * Internal test(not part of public tests) to show that there are no large
	 * gaps in the seed cases generated by the SeedProvider.
	 */
	@AfterClass
	public static void afterClass() {
		//System.out.println(SEED_PROVIDER.generateUnusedSeedReport());
	}

	/**
	 * Tests
	 * {@linkplain EnvironmentImpl#observeGroupArrivalByGroup(boolean, GroupId)}
	 */
	@Test
	public void testObserveGroupArrivalByGroup() {

		/*
		 * 
		 * Time 1 : GLOBAL_COMPONENT_1 adds two groups
		 * 
		 * Time 2 : GLOBAL_COMPONENT_2 starts observing group 0
		 * 
		 * Time 3 : GLOBAL_COMPONENT_3 starts observing group 0
		 * 
		 * Time 4 : GLOBAL_COMPONENT_1 adds person 0 to group 0
		 * 
		 * Time 5 : GLOBAL_COMPONENT_3 stops observing group 0
		 * 
		 * Time 6 : GLOBAL_COMPONENT_1 adds person 1 to group 0
		 * 
		 * Time 7 : GLOBAL_COMPONENT_2 adds person 2 to group 0
		 * 
		 * Expected observations
		 *
		 * GLOBAL_COMPONENT_2: observes person 0 and person 1 --> demonstrates
		 * PostCondition 1 and 4
		 * 
		 * GLOBAL_COMPONENT_3: observes person 0 --> demonstrates PostCondition
		 * 1 and 3
		 * 
		 * All others: no observations --> demonstrates Post Condition 2
		 */

		long seed = SEED_PROVIDER.getSeedValue(0);
		RandomGenerator randomGenerator = getRandomGenerator(seed);
		Replication replication = getReplication(randomGenerator);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		Scenario scenario = scenarioBuilder.build();

		int taskTime = 0;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			assertModelException(() -> environment.observeGroupArrivalByGroup(true, null), SimulationErrorType.NULL_GROUP_ID);
			assertModelException(() -> environment.observeGroupArrivalByGroup(true, new GroupId(10)), SimulationErrorType.UNKNOWN_GROUP_ID);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_3);
			assertEquals(0, groupId.getValue());
			groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(1, groupId.getValue());
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			GroupId groupId = new GroupId(0);
			environment.observeGroupArrivalByGroup(true, groupId);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			GroupId groupId = new GroupId(0);
			environment.observeGroupArrivalByGroup(true, groupId);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			PersonId personId = new PersonId(0);
			GroupId groupId = new GroupId(0);
			environment.addPersonToGroup(personId, groupId);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			GroupId groupId = new GroupId(0);
			environment.observeGroupArrivalByGroup(false, groupId);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			PersonId personId = new PersonId(1);
			GroupId groupId = new GroupId(0);
			environment.addPersonToGroup(personId, groupId);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			PersonId personId = new PersonId(2);
			GroupId groupId = new GroupId(0);
			environment.addPersonToGroup(personId, groupId);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		Set<MultiKey> expectedObservations = new LinkedHashSet<>();
		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PERSON_ARRIVAL, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_3, ObservationType.GROUP_PERSON_ARRIVAL, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(6.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PERSON_ARRIVAL, new GroupId(0), new PersonId(1)));

		Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);

	}

	/**
	 * Tests {@linkplain EnvironmentImpl#observeGroupArrivalByPerson(boolean,
	 * PersonId)
	 */
	@Test
	public void testObserveGroupArrivalByPerson() {
		/*
		 * 
		 * Time 1: GLOBAL_COMPONENT_1 add groups
		 * 
		 * Time 2: GLOBAL_COMPONENT_2 starts observing person 1
		 * 
		 * Time 3: GLOBAL_COMPONENT_3 starts observing person 1
		 * 
		 * Time 4: GLOBAL_COMPONENT_1 adds person 0 to group 0
		 * 
		 * Time 5: GLOBAL_COMPONENT_3 stops observing person 1
		 * 
		 * Time 6 GLOBAL_COMPONENT_1 adds person 0 to group 1
		 * 
		 * Time 7 GLOBAL_COMPONENT_4 starts observing person 1
		 * 
		 * Time 8 GLOBAL_COMPONENT_2 adds person 0 to group 2
		 * 
		 * Expected observations
		 *
		 * GLOBAL_COMPONENT_2: (Time 4) observes person 0 added to group 0
		 * 
		 * GLOBAL_COMPONENT_2: (Time 6) observes person 0 added to group 1 -->
		 * demonstrates PostCondition 1 and 4
		 * 
		 * GLOBAL_COMPONENT_3: (Time 4) observes person 0 added to group 0 -->
		 * demonstrates PostCondition 1 and 3
		 * 
		 * GLOBAL_COMPONENT_4: (Time 8) observes person 0 added to group 2 -->
		 * demonstrates PostCondition 1
		 * 
		 * 
		 * All others: no observations --> demonstrates Post Condition 2
		 * 
		 */

		long seed = SEED_PROVIDER.getSeedValue(1);

		RandomGenerator randomGenerator = getRandomGenerator(seed);
		Replication replication = getReplication(randomGenerator);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		Scenario scenario = scenarioBuilder.build();

		int taskTime = 0;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			assertModelException(() -> environment.observeGroupArrivalByPerson(true, null), SimulationErrorType.NULL_PERSON_ID);
			assertModelException(() -> environment.observeGroupArrivalByPerson(true, new PersonId(10000)), SimulationErrorType.UNKNOWN_PERSON_ID);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_3);
			assertEquals(0, groupId.getValue());

			groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(1, groupId.getValue());

			groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(2, groupId.getValue());

			groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(3, groupId.getValue());

		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			PersonId personId = new PersonId(0);
			environment.observeGroupArrivalByPerson(true, personId);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			PersonId personId = new PersonId(0);
			environment.observeGroupArrivalByPerson(true, personId);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			PersonId personId = new PersonId(0);
			GroupId groupId = new GroupId(0);
			environment.addPersonToGroup(personId, groupId);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			PersonId personId = new PersonId(0);
			environment.observeGroupArrivalByPerson(false, personId);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			PersonId personId = new PersonId(0);
			GroupId groupId = new GroupId(1);
			environment.addPersonToGroup(personId, groupId);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_4, taskTime++, (environment) -> {
			PersonId personId = new PersonId(0);
			environment.observeGroupArrivalByPerson(true, personId);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			PersonId personId = new PersonId(0);
			GroupId groupId = new GroupId(2);
			environment.addPersonToGroup(personId, groupId);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PERSON_ARRIVAL, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_3, ObservationType.GROUP_PERSON_ARRIVAL, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(6.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PERSON_ARRIVAL, new GroupId(1), new PersonId(0)));
		expectedObservations.add(new MultiKey(8.0, TestGlobalComponentId.GLOBAL_COMPONENT_4, ObservationType.GROUP_PERSON_ARRIVAL, new GroupId(2), new PersonId(0)));

		Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);

	}

	/**
	 * Tests {@linkplain
	 * EnvironmentImpl#observeGroupArrivalByGroupAndPerson(boolean, GroupId,
	 * PersonId)
	 */
	@Test
	public void testObserveGroupArrivalByGroupAndPerson() {

		/*
		 * 
		 * 
		 * Time 0 : GLOBAL_COMPONENT_1 adds group 0
		 * 
		 * Time 1 : GLOBAL_COMPONENT_2 starts observing person 0 joining group 0
		 *
		 * Time 2 : GLOBAL_COMPONENT_3 starts observing person 0 joining group 0
		 * 
		 * Time 3 : GLOBAL_COMPONENT_1 adds person 0 to group 0
		 * 
		 * Time 4 : GLOBAL_COMPONENT_3 stops observing person 0 joining group 0
		 * 
		 * Time 5 : GLOBAL_COMPONENT_1 removes person 0 from group 0
		 * 
		 * Time 6 : GLOBAL_COMPONENT_1 adds person 0 to group 0
		 * 
		 * Time 7 : GLOBAL_COMPONENT_1 removes person 0 from group 0
		 * 
		 * Time 8 : GLOBAL_COMPONENT_4 starts observing person 0 joining group 0
		 * 
		 * Time 9 : GLOBAL_COMPONENT_2 adds person 0 to group 0
		 * 
		 * 
		 * Expected observations
		 *
		 *
		 * GLOBAL_COMPONENT_2:(Time 3) observes person 0 added to group 0
		 * 
		 * GLOBAL_COMPONENT_2:(Time 6) observes person 0 added to group 0 -->
		 * demonstrates PostConditions 1 and 4
		 * 
		 * GLOBAL_COMPONENT_3:(Time 3) observes person 0 added to group 0 -->
		 * demonstrates PostConditions 1 and 3
		 * 
		 * GLOBAL_COMPONENT_4:(Time 9) observes person 0 added to group 0 -->
		 * demonstrates PostCondition 1
		 * 
		 * All others: no observations --> demonstrates Post Condition 2
		 */

		long seed = SEED_PROVIDER.getSeedValue(2);

		RandomGenerator randomGenerator = getRandomGenerator(seed);
		Replication replication = getReplication(randomGenerator);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		Scenario scenario = scenarioBuilder.build();

		int taskTime = 0;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_3);
			assertEquals(0, groupId.getValue());
			PersonId personId = new PersonId(0);
			assertTrue(environment.personExists(personId));

			assertModelException(() -> environment.observeGroupArrivalByGroupAndPerson(true, groupId, null), SimulationErrorType.NULL_PERSON_ID);
			assertModelException(() -> environment.observeGroupArrivalByGroupAndPerson(true, groupId, new PersonId(10000)), SimulationErrorType.UNKNOWN_PERSON_ID);
			assertModelException(() -> environment.observeGroupArrivalByGroupAndPerson(true, null, personId), SimulationErrorType.NULL_GROUP_ID);
			assertModelException(() -> environment.observeGroupArrivalByGroupAndPerson(true, new GroupId(10000), personId), SimulationErrorType.UNKNOWN_GROUP_ID);

		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			PersonId personId = new PersonId(0);
			GroupId groupId = new GroupId(0);
			environment.observeGroupArrivalByGroupAndPerson(true, groupId, personId);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			PersonId personId = new PersonId(0);
			GroupId groupId = new GroupId(0);
			environment.observeGroupArrivalByGroupAndPerson(true, groupId, personId);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			PersonId personId = new PersonId(0);
			GroupId groupId = new GroupId(0);
			environment.addPersonToGroup(personId, groupId);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			PersonId personId = new PersonId(0);
			GroupId groupId = new GroupId(0);
			environment.observeGroupArrivalByGroupAndPerson(false, groupId, personId);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			PersonId personId = new PersonId(0);
			GroupId groupId = new GroupId(0);
			environment.removePersonFromGroup(personId, groupId);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			PersonId personId = new PersonId(0);
			GroupId groupId = new GroupId(0);
			environment.addPersonToGroup(personId, groupId);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			PersonId personId = new PersonId(0);
			GroupId groupId = new GroupId(0);
			environment.removePersonFromGroup(personId, groupId);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_4, taskTime++, (environment) -> {
			PersonId personId = new PersonId(0);
			GroupId groupId = new GroupId(0);
			environment.observeGroupArrivalByGroupAndPerson(true, groupId, personId);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			PersonId personId = new PersonId(0);
			GroupId groupId = new GroupId(0);
			environment.addPersonToGroup(personId, groupId);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		expectedObservations.add(new MultiKey(3.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PERSON_ARRIVAL, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(3.0, TestGlobalComponentId.GLOBAL_COMPONENT_3, ObservationType.GROUP_PERSON_ARRIVAL, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(6.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PERSON_ARRIVAL, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(9.0, TestGlobalComponentId.GLOBAL_COMPONENT_4, ObservationType.GROUP_PERSON_ARRIVAL, new GroupId(0), new PersonId(0)));

		Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);

	}

	/**
	 * Tests {@linkplain EnvironmentImpl#observeGroupArrivalByType(boolean,
	 * GroupTypeId)
	 */
	@Test
	public void testObserveGroupArrivalByType() {
		/*
		 * 
		 * Time 1 : GLOBAL_COMPONENT_1 adds group 0 at type 1, adds group 1 as
		 * type 2 and adds group 2 as type 1
		 * 
		 * Time 2 : GLOBAL_COMPONENT_2 starts observing group arrivals for
		 * groups of type 1
		 * 
		 * Time 3 : GLOBAL_COMPONENT_3 starts observing group arrivals for
		 * groups of type 2
		 * 
		 * Time 4 : GLOBAL_COMPONENT_1 adds person 0 to group 0 and adds person
		 * 1 to group 1
		 * 
		 * Time 5 : GLOBAL_COMPONENT_3 stops observing group arrivals for groups
		 * of type 2
		 * 
		 * Time 6 : GLOBAL_COMPONENT_4 starts observing group arrivals for
		 * groups of type 1
		 * 
		 * Time 7 : GLOBAL_COMPONENT_1 adds person 1 to group 0
		 * 
		 * Time 8 : GLOBAL_COMPONENT_2 adds person 2 to group 2
		 * 
		 * Time 9 : GLOBAL_COMPONENT_1 adds person 3 to group 1
		 * 
		 * Expected observations
		 *
		 *
		 * GLOBAL_COMPONENT_2:(Time 4) observes person 0 added to group 0
		 * 
		 * GLOBAL_COMPONENT_2:(Time 7) observes person 1 added to group 0 -->
		 * demonstrates PostConditions 1 and 4
		 * 
		 * GLOBAL_COMPONENT_3:(Time 4) observes person 1 added to group 1 -->
		 * demonstrates PostConditions 1 and 3
		 * 
		 * GLOBAL_COMPONENT_4:(Time 7) observes person 1 added to group 0
		 * 
		 * GLOBAL_COMPONENT_4:(Time 8) observes person 2 added to group 2 -->
		 * demonstrates PostCondition 1
		 * 
		 * 
		 * All others: no observations --> demonstrates Post Condition 2
		 */

		long seed = SEED_PROVIDER.getSeedValue(3);

		RandomGenerator randomGenerator = getRandomGenerator(seed);
		Replication replication = getReplication(randomGenerator);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		Scenario scenario = scenarioBuilder.build();

		int taskTime = 0;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			assertModelException(() -> environment.observeGroupArrivalByType(true, null), SimulationErrorType.NULL_GROUP_TYPE_ID);
			assertModelException(() -> environment.observeGroupArrivalByType(true, TestGroupTypeId.getUnknownGroupTypeId()), SimulationErrorType.UNKNOWN_GROUP_TYPE_ID);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(0, groupId.getValue());

			groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_2);
			assertEquals(1, groupId.getValue());

			groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(2, groupId.getValue());

		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.observeGroupArrivalByType(true, TestGroupTypeId.GROUP_TYPE_1);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupArrivalByType(true, TestGroupTypeId.GROUP_TYPE_2);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			PersonId personId = new PersonId(0);
			GroupId groupId = new GroupId(0);
			environment.addPersonToGroup(personId, groupId);

			personId = new PersonId(1);
			groupId = new GroupId(1);
			environment.addPersonToGroup(personId, groupId);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupArrivalByType(false, TestGroupTypeId.GROUP_TYPE_2);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_4, taskTime++, (environment) -> {
			environment.observeGroupArrivalByType(true, TestGroupTypeId.GROUP_TYPE_1);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			PersonId personId = new PersonId(1);
			GroupId groupId = new GroupId(0);
			environment.addPersonToGroup(personId, groupId);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			PersonId personId = new PersonId(2);
			GroupId groupId = new GroupId(2);
			environment.addPersonToGroup(personId, groupId);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			PersonId personId = new PersonId(3);
			GroupId groupId = new GroupId(1);
			environment.addPersonToGroup(personId, groupId);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PERSON_ARRIVAL, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_3, ObservationType.GROUP_PERSON_ARRIVAL, new GroupId(1), new PersonId(1)));
		expectedObservations.add(new MultiKey(7.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PERSON_ARRIVAL, new GroupId(0), new PersonId(1)));
		expectedObservations.add(new MultiKey(7.0, TestGlobalComponentId.GLOBAL_COMPONENT_4, ObservationType.GROUP_PERSON_ARRIVAL, new GroupId(0), new PersonId(1)));
		expectedObservations.add(new MultiKey(8.0, TestGlobalComponentId.GLOBAL_COMPONENT_4, ObservationType.GROUP_PERSON_ARRIVAL, new GroupId(2), new PersonId(2)));

		Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);

	}

	/**
	 * Tests {@linkplain EnvironmentImpl#observeGroupArrivalByTypeAndPerson(boolean,
	 * GroupTypeId, PersonId)
	 */
	@Test
	public void testObserveGroupArrivalByTypeAndPerson() {
		/*
		 * Time 1 : GLOBAL_COMPONENT_1 adds groups 0, 1 and 2
		 *
		 * Time 2 : GLOBAL_COMPONENT_2 starts group arrival observations for
		 * group type 1 and person 0
		 * 
		 * Time 3 : GLOBAL_COMPONENT_3 starts group arrival observations for
		 * group type 1 and person 0
		 * 
		 * Time 4 : GLOBAL_COMPONENT_1 adds person 0 to group 0
		 * 
		 * Time 5 : GLOBAL_COMPONENT_3 stops group arrival observations for
		 * group type 1 and person 0
		 * 
		 * Time 6 : GLOBAL_COMPONENT_1 adds person 0 to group 1
		 * 
		 * Time 7 : GLOBAL_COMPONENT_4 starts group arrival observations for
		 * group type 1 and person 0
		 * 
		 * Time 8 : GLOBAL_COMPONENT_2 adds person 0 to group 2
		 * 
		 * Expected observations
		 *
		 * GLOBAL_COMPONENT_2:(Time 4) observes person 0 added to group 0
		 * 
		 * GLOBAL_COMPONENT_2:(Time 6) observes person 0 added to group 1 -->
		 * demonstrates PostConditions 1 and 4
		 * 
		 * GLOBAL_COMPONENT_3:(Time 4) observes person 0 added to group 0 -->
		 * demonstrates PostConditions 1 and 3
		 * 
		 * GLOBAL_COMPONENT_4:(Time 8) observes person 0 added to group 2 -->
		 * demonstrates PostCondition 1
		 * 
		 * All others: no observations --> demonstrates Post Condition 2
		 */

		long seed = SEED_PROVIDER.getSeedValue(4);

		RandomGenerator randomGenerator = getRandomGenerator(seed);
		Replication replication = getReplication(randomGenerator);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		Scenario scenario = scenarioBuilder.build();

		int taskTime = 0;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			assertModelException(() -> environment.observeGroupArrivalByTypeAndPerson(true, null, new PersonId(0)), SimulationErrorType.NULL_GROUP_TYPE_ID);
			assertModelException(() -> environment.observeGroupArrivalByTypeAndPerson(true, TestGroupTypeId.getUnknownGroupTypeId(), new PersonId(0)), SimulationErrorType.UNKNOWN_GROUP_TYPE_ID);
			assertModelException(() -> environment.observeGroupArrivalByTypeAndPerson(true, TestGroupTypeId.GROUP_TYPE_1, null), SimulationErrorType.NULL_PERSON_ID);
			assertModelException(() -> environment.observeGroupArrivalByTypeAndPerson(true, TestGroupTypeId.GROUP_TYPE_1, new PersonId(10000)), SimulationErrorType.UNKNOWN_PERSON_ID);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(0, groupId.getValue());

			groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(1, groupId.getValue());

			groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(2, groupId.getValue());

		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.observeGroupArrivalByTypeAndPerson(true, TestGroupTypeId.GROUP_TYPE_1, new PersonId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupArrivalByTypeAndPerson(true, TestGroupTypeId.GROUP_TYPE_1, new PersonId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			PersonId personId = new PersonId(0);
			GroupId groupId = new GroupId(0);
			environment.addPersonToGroup(personId, groupId);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupArrivalByTypeAndPerson(false, TestGroupTypeId.GROUP_TYPE_1, new PersonId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			PersonId personId = new PersonId(0);
			GroupId groupId = new GroupId(1);
			environment.addPersonToGroup(personId, groupId);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_4, taskTime++, (environment) -> {
			environment.observeGroupArrivalByTypeAndPerson(true, TestGroupTypeId.GROUP_TYPE_1, new PersonId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			PersonId personId = new PersonId(0);
			GroupId groupId = new GroupId(2);
			environment.addPersonToGroup(personId, groupId);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PERSON_ARRIVAL, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_3, ObservationType.GROUP_PERSON_ARRIVAL, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(6.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PERSON_ARRIVAL, new GroupId(1), new PersonId(0)));
		expectedObservations.add(new MultiKey(8.0, TestGlobalComponentId.GLOBAL_COMPONENT_4, ObservationType.GROUP_PERSON_ARRIVAL, new GroupId(2), new PersonId(0)));

		Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);

	}

	/**
	 * Tests {@linkplain EnvironmentImpl#observeGroupConstruction(boolean)
	 */
	@Test
	public void testObserveGroupConstruction() {
		/*
		 * 
		 * Time 0 : GLOBAL_COMPONENT_2 starts group construction observation
		 * 
		 * Time 1 : GLOBAL_COMPONENT_3 starts group construction observation
		 * 
		 * Time 2 : GLOBAL_COMPONENT_1 creates group 0
		 * 
		 * Time 3 : GLOBAL_COMPONENT_3 stops group construction observation
		 * 
		 * Time 4 : GLOBAL_COMPONENT_1 creates group 1
		 * 
		 * Time 5 : GLOBAL_COMPONENT_4 starts group construction observation
		 * 
		 * Time 6 : GLOBAL_COMPONENT_2 creates group 2
		 * 
		 * Expected observations
		 * 
		 * GLOBAL_COMPONENT_2:(Time 2) observes group 0 construction
		 * 
		 * GLOBAL_COMPONENT_2:(Time 4) observes group 1 construction -->
		 * demonstrates PostConditions 1 and 4
		 * 
		 * GLOBAL_COMPONENT_3:(Time 2) observes group 0 construction -->
		 * demonstrates PostConditions 1 and 3
		 * 
		 * GLOBAL_COMPONENT_4:(Time 6) observes group 2 construction -->
		 * demonstrates PostCondition 1
		 * 
		 * All others: no observations --> demonstrates Post Condition 2
		 */

		long seed = SEED_PROVIDER.getSeedValue(5);

		RandomGenerator randomGenerator = getRandomGenerator(seed);
		Replication replication = getReplication(randomGenerator);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		Scenario scenario = scenarioBuilder.build();

		int taskTime = 0;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.observeGroupConstruction(true);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupConstruction(true);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(0, groupId.getValue());
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupConstruction(false);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_2);
			assertEquals(1, groupId.getValue());
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_4, taskTime++, (environment) -> {
			environment.observeGroupConstruction(true);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_3);
			assertEquals(2, groupId.getValue());
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		expectedObservations.add(new MultiKey(2.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_CONSTRUCTION, new GroupId(0)));
		expectedObservations.add(new MultiKey(2.0, TestGlobalComponentId.GLOBAL_COMPONENT_3, ObservationType.GROUP_CONSTRUCTION, new GroupId(0)));
		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_CONSTRUCTION, new GroupId(1)));
		expectedObservations.add(new MultiKey(6.0, TestGlobalComponentId.GLOBAL_COMPONENT_4, ObservationType.GROUP_CONSTRUCTION, new GroupId(2)));

		Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);

	}

	/**
	 * Tests {@linkplain EnvironmentImpl#observeGroupConstructionByType(boolean,
	 * GroupTypeId)
	 */
	@Test
	public void testObserveGroupConstructionByType() {
		/*
		 * 
		 * Time 1 : GLOBAL_COMPONENT_2 starts observing construction of groups
		 * of type 1
		 * 
		 * Time 2 : GLOBAL_COMPONENT_3 starts observing construction of groups
		 * of type 1
		 * 
		 * Time 3 : GLOBAL_COMPONENT_1 adds group 0
		 * 
		 * Time 4 : GLOBAL_COMPONENT_3 stops observing construction of groups of
		 * type 1
		 *
		 * Time 5 : GLOBAL_COMPONENT_1 adds group 1
		 * 
		 * Time 6 : GLOBAL_COMPONENT_4 starts observing construction of groups
		 * of type 1
		 * 
		 * Time 7 : GLOBAL_COMPONENT_2 adds group 2
		 * 
		 * Expected observations
		 * 
		 * GLOBAL_COMPONENT_2:(Time 3) observes group 0 construction
		 * 
		 * GLOBAL_COMPONENT_2:(Time 5) observes group 1 construction -->
		 * demonstrates PostConditions 1 and 4
		 * 
		 * GLOBAL_COMPONENT_3:(Time 3) observes group 0 construction -->
		 * demonstrates PostConditions 1 and 3
		 * 
		 * GLOBAL_COMPONENT_4:(Time 7) observes group 2 construction -->
		 * demonstrates PostCondition 1
		 * 
		 * All others: no observations --> demonstrates Post Condition 2
		 */

		long seed = SEED_PROVIDER.getSeedValue(6);

		RandomGenerator randomGenerator = getRandomGenerator(seed);
		Replication replication = getReplication(randomGenerator);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		Scenario scenario = scenarioBuilder.build();

		int taskTime = 0;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			assertModelException(() -> environment.observeGroupConstructionByType(true, null), SimulationErrorType.NULL_GROUP_TYPE_ID);
			assertModelException(() -> environment.observeGroupConstructionByType(true, TestGroupTypeId.getUnknownGroupTypeId()), SimulationErrorType.UNKNOWN_GROUP_TYPE_ID);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.observeGroupConstructionByType(true, TestGroupTypeId.GROUP_TYPE_1);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupConstructionByType(true, TestGroupTypeId.GROUP_TYPE_1);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(0, groupId.getValue());
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupConstructionByType(false, TestGroupTypeId.GROUP_TYPE_1);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(1, groupId.getValue());
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_4, taskTime++, (environment) -> {
			environment.observeGroupConstructionByType(true, TestGroupTypeId.GROUP_TYPE_1);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(2, groupId.getValue());
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		expectedObservations.add(new MultiKey(3.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_CONSTRUCTION, new GroupId(0)));
		expectedObservations.add(new MultiKey(3.0, TestGlobalComponentId.GLOBAL_COMPONENT_3, ObservationType.GROUP_CONSTRUCTION, new GroupId(0)));
		expectedObservations.add(new MultiKey(5.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_CONSTRUCTION, new GroupId(1)));
		expectedObservations.add(new MultiKey(7.0, TestGlobalComponentId.GLOBAL_COMPONENT_4, ObservationType.GROUP_CONSTRUCTION, new GroupId(2)));

		Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);

	}

	/**
	 * Tests {@linkplain EnvironmentImpl#observeGroupDeparture(boolean)
	 */
	@Test
	public void testObserveGroupDeparture() {
		/*
		 * Time 0 : GLOBAL_COMPONENT_1 adds group 0
		 * 
		 * Time 1 : GLOBAL_COMPONENT_2 starts observing group departures
		 * 
		 * Time 2 : GLOBAL_COMPONENT_3 starts observing group departures
		 * 
		 * Time 3 : GLOBAL_COMPONENT_1 adds person 0 to group 0
		 * 
		 * Time 4 : GLOBAL_COMPONENT_1 removes person 0 from group 0
		 * 
		 * Time 5 : GLOBAL_COMPONENT_3 stops observing group departures
		 * 
		 * Time 6 : GLOBAL_COMPONENT_1 adds person 0 to group 0
		 * 
		 * Time 7 : GLOBAL_COMPONENT_1 removes person 0 from group 0
		 * 
		 * Time 8 : GLOBAL_COMPONENT_4 starts observing group departures
		 * 
		 * Time 9 : GLOBAL_COMPONENT_2 adds person 0 to group 0
		 * 
		 * Time 10 : GLOBAL_COMPONENT_2 removes person 0 from group 0
		 * 
		 * Expected observations
		 * 
		 * GLOBAL_COMPONENT_2:(Time 4) observes person 0 depart group 0
		 * 
		 * GLOBAL_COMPONENT_2:(Time 7) observes person 0 depart group 0 -->
		 * demonstrates PostConditions 1 and 4
		 * 
		 * GLOBAL_COMPONENT_3:(Time 4) observes person 0 depart group 0 -->
		 * demonstrates PostConditions 1 and 3
		 * 
		 * GLOBAL_COMPONENT_4:(Time 10) observes person 0 depart group 0 -->
		 * demonstrates PostCondition 1
		 * 
		 * All others: no observations --> demonstrates Post Condition 2
		 */

		long seed = SEED_PROVIDER.getSeedValue(7);

		RandomGenerator randomGenerator = getRandomGenerator(seed);
		Replication replication = getReplication(randomGenerator);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		Scenario scenario = scenarioBuilder.build();

		int taskTime = 0;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(0, groupId.getValue());
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.observeGroupDeparture(true);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupDeparture(true);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			PersonId personId = new PersonId(0);
			environment.addPersonToGroup(personId, new GroupId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			PersonId personId = new PersonId(0);
			environment.removePersonFromGroup(personId, new GroupId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupDeparture(false);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			PersonId personId = new PersonId(0);
			environment.addPersonToGroup(personId, new GroupId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			PersonId personId = new PersonId(0);
			environment.removePersonFromGroup(personId, new GroupId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_4, taskTime++, (environment) -> {
			environment.observeGroupDeparture(true);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			PersonId personId = new PersonId(0);
			environment.addPersonToGroup(personId, new GroupId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			PersonId personId = new PersonId(0);
			environment.removePersonFromGroup(personId, new GroupId(0));
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_3, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(7.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(10.0, TestGlobalComponentId.GLOBAL_COMPONENT_4, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(0), new PersonId(0)));

		Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);

	}

	
}
