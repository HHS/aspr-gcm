package gcm.automated;

import static gcm.automated.support.EnvironmentSupport.addObservationContainer;
import static gcm.automated.support.EnvironmentSupport.addStandardComponentsAndTypes;
import static gcm.automated.support.EnvironmentSupport.addStandardPeople;
import static gcm.automated.support.EnvironmentSupport.addStandardTrackingAndScenarioId;
import static gcm.automated.support.EnvironmentSupport.addTaskPlanContainer;
import static gcm.automated.support.EnvironmentSupport.assertAllPlansExecuted;
import static gcm.automated.support.EnvironmentSupport.getRandomGenerator;
import static gcm.automated.support.EnvironmentSupport.getReplication;
import static gcm.automated.support.ExceptionAssertion.assertModelException;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.LinkedHashSet;
import java.util.Set;

import org.apache.commons.math3.random.RandomGenerator;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import gcm.automated.support.EnvironmentSupport;
import gcm.automated.support.ObservationContainer;
import gcm.automated.support.SeedProvider;
import gcm.automated.support.TaskPlanContainer;
import gcm.automated.support.TestGlobalComponentId;
import gcm.automated.support.TestGroupTypeId;
import gcm.replication.Replication;
import gcm.scenario.GroupId;
import gcm.scenario.GroupTypeId;
import gcm.scenario.PersonId;
import gcm.scenario.Scenario;
import gcm.scenario.ScenarioBuilder;
import gcm.scenario.UnstructuredScenarioBuilder;
import gcm.simulation.EnvironmentImpl;
import gcm.simulation.ObservationType;
import gcm.simulation.Simulation;
import gcm.simulation.SimulationErrorType;
import gcm.util.MultiKey;
import gcm.util.annotations.UnitTest;
import gcm.util.annotations.UnitTestMethod;

@UnitTest(target = EnvironmentImpl.class)

public class AT_EnvironmentImpl_18 {

	private static SeedProvider SEED_PROVIDER;

	@BeforeAll
	public static void beforeClass() {
		SEED_PROVIDER = new SeedProvider(EnvironmentSupport.getMetaSeed(18));
	}

	/**
	 * Internal test(not part of public tests) to show that there are no large
	 * gaps in the seed cases generated by the SeedProvider.
	 */
	@AfterAll
	public static void afterClass() {
		// System.out.println(SEED_PROVIDER.generateUnusedSeedReport());
	}

	/**
	 * Tests
	 * {@linkplain EnvironmentImpl#observeGroupDepartureByGroup(boolean, GroupId)}
	 */
	@Test
	@UnitTestMethod(name = "observeGroupDepartureByGroup", args = { boolean.class, GroupId.class })
	public void testObserveGroupDepartureByGroup() {
		/*
		 *
		 * Time 1 : GLOBAL_COMPONENT_1 adds group 0 and group 1
		 *
		 * Time 2 : GLOBAL_COMPONENT_2 starts observing group 0
		 * 
		 * Time 3 : GLOBAL_COMPONENT_3 starts observing group 0
		 * 
		 * Time 4 : GLOBAL_COMPONENT_1 adds person 0 to group 0 and adds person
		 * 1 to group 1
		 * 
		 * Time 5 : GLOBAL_COMPONENT_1 removes person 0 from group 0 and removes
		 * person 1 from group 1
		 * 
		 * Time 6 : GLOBAL_COMPONENT_3 stops observing group 0
		 * 
		 * Time 7 : GLOBAL_COMPONENT_1 adds person 0 to group 0 and adds person
		 * 1 to group 1
		 * 
		 * Time 8 : GLOBAL_COMPONENT_1 removes person 0 from group 0 and removes
		 * person 1 from group 1
		 * 
		 * Time 9 : GLOBAL_COMPONENT_4 starts observing group 0
		 * 
		 * Time 10 : GLOBAL_COMPONENT_2 adds person 0 to group 0 and adds person
		 * 1 to group 1
		 * 
		 * Time 11 : GLOBAL_COMPONENT_2 removes person 0 from group 0 and
		 * removes person 1 from group 1
		 * 
		 * 
		 * Expected observations
		 * 
		 * GLOBAL_COMPONENT_2:(Time 5) observes person 0 depart group 0
		 * 
		 * GLOBAL_COMPONENT_2:(Time 8) observes person 0 depart group 0 -->
		 * demonstrates PostConditions 1 and 4
		 * 
		 * GLOBAL_COMPONENT_3:(Time 5) observes person 0 depart group 0 -->
		 * demonstrates PostConditions 1 and 3
		 * 
		 * GLOBAL_COMPONENT_4:(Time 11) observes person 0 depart group 0 -->
		 * demonstrates PostCondition 1
		 * 
		 * All others: no observations --> demonstrates Post Condition 2
		 */

		long seed = SEED_PROVIDER.getSeedValue(0);

		RandomGenerator randomGenerator = getRandomGenerator(seed);
		Replication replication = getReplication(randomGenerator);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		Scenario scenario = scenarioBuilder.build();

		int taskTime = 0;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			assertModelException(() -> environment.observeGroupDepartureByGroup(true, null), SimulationErrorType.NULL_GROUP_ID);
			assertModelException(() -> environment.observeGroupDepartureByGroup(true, new GroupId(10000)), SimulationErrorType.UNKNOWN_GROUP_ID);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(0, groupId.getValue());

			groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(1, groupId.getValue());
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.observeGroupDepartureByGroup(true, new GroupId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupDepartureByGroup(true, new GroupId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.addPersonToGroup(new PersonId(0), new GroupId(0));
			environment.addPersonToGroup(new PersonId(1), new GroupId(1));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.removePersonFromGroup(new PersonId(0), new GroupId(0));
			environment.removePersonFromGroup(new PersonId(1), new GroupId(1));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupDepartureByGroup(false, new GroupId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.addPersonToGroup(new PersonId(0), new GroupId(0));
			environment.addPersonToGroup(new PersonId(1), new GroupId(1));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.removePersonFromGroup(new PersonId(0), new GroupId(0));
			environment.removePersonFromGroup(new PersonId(1), new GroupId(1));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_4, taskTime++, (environment) -> {
			environment.observeGroupDepartureByGroup(true, new GroupId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.addPersonToGroup(new PersonId(0), new GroupId(0));
			environment.addPersonToGroup(new PersonId(1), new GroupId(1));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.removePersonFromGroup(new PersonId(0), new GroupId(0));
			environment.removePersonFromGroup(new PersonId(1), new GroupId(1));
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		expectedObservations.add(new MultiKey(5.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(5.0, TestGlobalComponentId.GLOBAL_COMPONENT_3, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(8.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(11.0, TestGlobalComponentId.GLOBAL_COMPONENT_4, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(0), new PersonId(0)));

		Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);

	}

	/**
	 * Tests
	 * {@linkplain EnvironmentImpl#observeGroupDepartureByGroupAndPerson(boolean, GroupId, PersonId)}
	 */
	@Test
	@UnitTestMethod(name = "observeGroupDepartureByGroupAndPerson", args = { boolean.class, GroupId.class, PersonId.class })
	public void testObserveGroupDepartureByGroupAndPerson() {
		/*
		 * 
		 * Time 0 : GLOBAL_COMPONENT_1 adds group 0
		 * 
		 * Time 1 : GLOBAL_COMPONENT_2 starts observing person 0 enter group 0
		 * 
		 * Time 2 : GLOBAL_COMPONENT_3 starts observing person 0 enter group 0
		 * 
		 * Time 3 : GLOBAL_COMPONENT_1 adds person 0 to group 0 and person 1 to
		 * group 0
		 * 
		 * Time 4 : GLOBAL_COMPONENT_1 removes person 0 from group 0 and person
		 * 1 from group 0
		 * 
		 * Time 5 : GLOBAL_COMPONENT_3 stops observing person 0 enter group 0
		 * 
		 * Time 6 : GLOBAL_COMPONENT_1 adds person 0 to group 0 and person 1 to
		 * group 0
		 * 
		 * Time 7 : GLOBAL_COMPONENT_1 removes person 0 from group 0 and person
		 * 1 from group 0
		 *
		 * Time 8 : GLOBAL_COMPONENT_4 starts observing person 0 enter group 0
		 * 
		 * Time 9 : GLOBAL_COMPONENT_2 adds person 0 to group 0 and person 1 to
		 * group 0
		 * 
		 * Time 10 : GLOBAL_COMPONENT_2 removes person 0 from group 0 and person
		 * 1 from group 0
		 * 
		 * Expected observations
		 * 
		 * GLOBAL_COMPONENT_2:(Time 4) observes person 0 depart group 0
		 * 
		 * GLOBAL_COMPONENT_2:(Time 7) observes person 0 depart group 0 -->
		 * demonstrates PostConditions 1 and 4
		 * 
		 * GLOBAL_COMPONENT_3:(Time 4) observes person 0 depart group 0 -->
		 * demonstrates PostConditions 1 and 3
		 * 
		 * GLOBAL_COMPONENT_4:(Time 10) observes person 0 depart group 0 -->
		 * demonstrates PostCondition 1
		 * 
		 * All others: no observations --> demonstrates Post Condition 2
		 */

		long seed = SEED_PROVIDER.getSeedValue(1);

		RandomGenerator randomGenerator = getRandomGenerator(seed);
		Replication replication = getReplication(randomGenerator);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		Scenario scenario = scenarioBuilder.build();

		int taskTime = 0;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(0, groupId.getValue());

			assertModelException(() -> environment.observeGroupDepartureByGroupAndPerson(true, null, new PersonId(0)), SimulationErrorType.NULL_GROUP_ID);
			assertModelException(() -> environment.observeGroupDepartureByGroupAndPerson(true, new GroupId(10000), new PersonId(0)), SimulationErrorType.UNKNOWN_GROUP_ID);
			assertModelException(() -> environment.observeGroupDepartureByGroupAndPerson(true, new GroupId(0), null), SimulationErrorType.NULL_PERSON_ID);
			assertModelException(() -> environment.observeGroupDepartureByGroupAndPerson(true, new GroupId(0), new PersonId(10000)), SimulationErrorType.UNKNOWN_PERSON_ID);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.observeGroupDepartureByGroupAndPerson(true, new GroupId(0), new PersonId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupDepartureByGroupAndPerson(true, new GroupId(0), new PersonId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.addPersonToGroup(new PersonId(0), new GroupId(0));
			environment.addPersonToGroup(new PersonId(1), new GroupId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.removePersonFromGroup(new PersonId(0), new GroupId(0));
			environment.removePersonFromGroup(new PersonId(1), new GroupId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupDepartureByGroupAndPerson(false, new GroupId(0), new PersonId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.addPersonToGroup(new PersonId(0), new GroupId(0));
			environment.addPersonToGroup(new PersonId(1), new GroupId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.removePersonFromGroup(new PersonId(0), new GroupId(0));
			environment.removePersonFromGroup(new PersonId(1), new GroupId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_4, taskTime++, (environment) -> {
			environment.observeGroupDepartureByGroupAndPerson(true, new GroupId(0), new PersonId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.addPersonToGroup(new PersonId(0), new GroupId(0));
			environment.addPersonToGroup(new PersonId(1), new GroupId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.removePersonFromGroup(new PersonId(0), new GroupId(0));
			environment.removePersonFromGroup(new PersonId(1), new GroupId(0));
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_3, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(7.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(10.0, TestGlobalComponentId.GLOBAL_COMPONENT_4, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(0), new PersonId(0)));

		Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);

	}

	/**
	 * Tests
	 * {@linkplain EnvironmentImpl#observeGroupDepartureByPerson(boolean, PersonId)}
	 */
	@Test
	@UnitTestMethod(name = "observeGroupDepartureByPerson", args = { boolean.class, PersonId.class })
	public void testObserveGroupDepartureByPerson() {
		/*
		 * 
		 * Time 1 : GLOBAL_COMPONENT_1 adds group 0 and group 1
		 * 
		 * Time 2 : GLOBAL_COMPONENT_2 starts observation of person 0
		 * 
		 * Time 3 : GLOBAL_COMPONENT_3 starts observation of person 0
		 * 
		 * Time 4 : GLOBAL_COMPONENT_1 adds person 0 to group 0 and adds person
		 * 1 to group 0
		 * 
		 * Time 5 : GLOBAL_COMPONENT_1 removes person 0 from group 0 and removes
		 * person 1 from group 0
		 * 
		 * Time 6 : GLOBAL_COMPONENT_3 stops observation of person 0
		 * 
		 * Time 7 : GLOBAL_COMPONENT_1 adds person 0 to group 1 and adds person
		 * 1 to group 1
		 * 
		 * Time 8 : GLOBAL_COMPONENT_1 removes person 0 from group 1 and removes
		 * person 1 from group 1
		 * 
		 * Time 9 : GLOBAL_COMPONENT_4 starts observation of person 0
		 * 
		 * Time 10 : GLOBAL_COMPONENT_2 adds person 0 to group 0 and adds person
		 * 1 to group 0
		 * 
		 * Time 11 : GLOBAL_COMPONENT_2 removes person 0 from group 0 and
		 * removes person 1 from group 0
		 * 
		 * 
		 * Expected observations
		 * 
		 * GLOBAL_COMPONENT_2:(Time 5) observes person 0 depart group 0
		 * 
		 * GLOBAL_COMPONENT_2:(Time 8) observes person 0 depart group 1 -->
		 * demonstrates PostConditions 1 and 4
		 * 
		 * GLOBAL_COMPONENT_3:(Time 5) observes person 0 depart group 0 -->
		 * demonstrates PostConditions 1 and 3
		 * 
		 * GLOBAL_COMPONENT_4:(Time 11) observes person 0 depart group 0 -->
		 * demonstrates PostCondition 1
		 *
		 * 
		 * All others: no observations --> demonstrates Post Condition 2
		 */

		long seed = SEED_PROVIDER.getSeedValue(2);

		RandomGenerator randomGenerator = getRandomGenerator(seed);
		Replication replication = getReplication(randomGenerator);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		Scenario scenario = scenarioBuilder.build();

		int taskTime = 0;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			assertModelException(() -> environment.observeGroupDepartureByPerson(true, null), SimulationErrorType.NULL_PERSON_ID);
			assertModelException(() -> environment.observeGroupDepartureByPerson(true, new PersonId(10000)), SimulationErrorType.UNKNOWN_PERSON_ID);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(0, groupId.getValue());

			groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(1, groupId.getValue());
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.observeGroupDepartureByPerson(true, new PersonId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupDepartureByPerson(true, new PersonId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.addPersonToGroup(new PersonId(0), new GroupId(0));
			environment.addPersonToGroup(new PersonId(1), new GroupId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.removePersonFromGroup(new PersonId(0), new GroupId(0));
			environment.removePersonFromGroup(new PersonId(1), new GroupId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupDepartureByPerson(false, new PersonId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.addPersonToGroup(new PersonId(0), new GroupId(1));
			environment.addPersonToGroup(new PersonId(1), new GroupId(1));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.removePersonFromGroup(new PersonId(0), new GroupId(1));
			environment.removePersonFromGroup(new PersonId(1), new GroupId(1));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_4, taskTime++, (environment) -> {
			environment.observeGroupDepartureByPerson(true, new PersonId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.addPersonToGroup(new PersonId(0), new GroupId(0));
			environment.addPersonToGroup(new PersonId(1), new GroupId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.removePersonFromGroup(new PersonId(0), new GroupId(0));
			environment.removePersonFromGroup(new PersonId(1), new GroupId(0));
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		expectedObservations.add(new MultiKey(5.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(5.0, TestGlobalComponentId.GLOBAL_COMPONENT_3, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(8.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(1), new PersonId(0)));
		expectedObservations.add(new MultiKey(11.0, TestGlobalComponentId.GLOBAL_COMPONENT_4, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(0), new PersonId(0)));

		Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);

	}

	/**
	 * Tests
	 * {@linkplain EnvironmentImpl#observeGroupDepartureByType(boolean, GroupTypeId)}
	 */
	@Test
	@UnitTestMethod(name = "observeGroupDepartureByType", args = { boolean.class, GroupTypeId.class })
	public void testObserveGroupDepartureByType() {
		/*
		 * 
		 * Time 1 : GLOBAL_COMPONENT_1 adds group 0 and group 1 as type 1 and
		 * adds group 2 as type 2
		 * 
		 * Time 2 : GLOBAL_COMPONENT_2 starts observing departures from groups
		 * of type 1
		 * 
		 * Time 3 : GLOBAL_COMPONENT_3 starts observing departures from groups
		 * of type 1
		 * 
		 * Time 4 : GLOBAL_COMPONENT_1 adds person 0 to group 0, adds person 1
		 * to group 1 and adds person 2 to group 2
		 * 
		 * Time 5 : GLOBAL_COMPONENT_1 removes person 0 from group 0, removes
		 * person 1 from group 1 and removes person 2 from group 2
		 * 
		 * Time 6 : GLOBAL_COMPONENT_3 stops observing departures from groups of
		 * type 1
		 * 
		 * Time 7 : GLOBAL_COMPONENT_1 adds person 0 to group 0, adds person 1
		 * to group 1 and adds person 2 to group 2
		 * 
		 * Time 8: GLOBAL_COMPONENT_1 removes person 0 from group 0, removes
		 * person 1 from group 1 and removes person 2 from group 2
		 * 
		 * Time 9 : GLOBAL_COMPONENT_4 starts observing departures from groups
		 * of type 1
		 * 
		 * Time 10 : GLOBAL_COMPONENT_2 adds person 0 to group 0, adds person 1
		 * to group 1 and adds person 2 to group 2
		 * 
		 * Time 11 : GLOBAL_COMPONENT_2 removes person 0 from group 0, removes
		 * person 1 from group 1 and removes person 2 from group 2
		 * 
		 * Expected observations
		 * 
		 * GLOBAL_COMPONENT_2:(Time 5) observes person 0 depart group 0 and
		 * person 1 depart group 1
		 * 
		 * GLOBAL_COMPONENT_2:(Time 8) observes person 0 depart group 0 and
		 * person 1 depart group 1 --> demonstrates PostConditions 1 and 4
		 * 
		 * GLOBAL_COMPONENT_3:(Time 5) observes person 0 depart group 0 and
		 * person 1 depart group 1 --> demonstrates PostConditions 1 and 3
		 * 
		 * GLOBAL_COMPONENT_4:(Time 11) observes person 0 depart group 0 and
		 * person 1 depart group 1 --> demonstrates PostCondition 1
		 * 
		 * All others: no observations --> demonstrates Post Condition 2
		 */
		long seed = SEED_PROVIDER.getSeedValue(3);

		RandomGenerator randomGenerator = getRandomGenerator(seed);
		Replication replication = getReplication(randomGenerator);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		Scenario scenario = scenarioBuilder.build();

		int taskTime = 0;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			assertModelException(() -> environment.observeGroupDepartureByType(true, null), SimulationErrorType.NULL_GROUP_TYPE_ID);
			assertModelException(() -> environment.observeGroupDepartureByType(true, TestGroupTypeId.getUnknownGroupTypeId()), SimulationErrorType.UNKNOWN_GROUP_TYPE_ID);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(0, groupId.getValue());

			groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(1, groupId.getValue());

			groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_2);
			assertEquals(2, groupId.getValue());
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.observeGroupDepartureByType(true, TestGroupTypeId.GROUP_TYPE_1);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupDepartureByType(true, TestGroupTypeId.GROUP_TYPE_1);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.addPersonToGroup(new PersonId(0), new GroupId(0));
			environment.addPersonToGroup(new PersonId(1), new GroupId(1));
			environment.addPersonToGroup(new PersonId(2), new GroupId(2));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.removePersonFromGroup(new PersonId(0), new GroupId(0));
			environment.removePersonFromGroup(new PersonId(1), new GroupId(1));
			environment.removePersonFromGroup(new PersonId(2), new GroupId(2));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupDepartureByType(false, TestGroupTypeId.GROUP_TYPE_1);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.addPersonToGroup(new PersonId(0), new GroupId(0));
			environment.addPersonToGroup(new PersonId(1), new GroupId(1));
			environment.addPersonToGroup(new PersonId(2), new GroupId(2));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.removePersonFromGroup(new PersonId(0), new GroupId(0));
			environment.removePersonFromGroup(new PersonId(1), new GroupId(1));
			environment.removePersonFromGroup(new PersonId(2), new GroupId(2));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_4, taskTime++, (environment) -> {
			environment.observeGroupDepartureByType(true, TestGroupTypeId.GROUP_TYPE_1);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.addPersonToGroup(new PersonId(0), new GroupId(0));
			environment.addPersonToGroup(new PersonId(1), new GroupId(1));
			environment.addPersonToGroup(new PersonId(2), new GroupId(2));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.removePersonFromGroup(new PersonId(0), new GroupId(0));
			environment.removePersonFromGroup(new PersonId(1), new GroupId(1));
			environment.removePersonFromGroup(new PersonId(2), new GroupId(2));
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		expectedObservations.add(new MultiKey(5.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(5.0, TestGlobalComponentId.GLOBAL_COMPONENT_3, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(5.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(1), new PersonId(1)));
		expectedObservations.add(new MultiKey(5.0, TestGlobalComponentId.GLOBAL_COMPONENT_3, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(1), new PersonId(1)));
		expectedObservations.add(new MultiKey(8.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(8.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(1), new PersonId(1)));
		expectedObservations.add(new MultiKey(11.0, TestGlobalComponentId.GLOBAL_COMPONENT_4, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(11.0, TestGlobalComponentId.GLOBAL_COMPONENT_4, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(1), new PersonId(1)));

		Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);
	}

	/**
	 * Tests
	 * {@linkplain EnvironmentImpl#observeGroupDepartureByTypeAndPerson(boolean, GroupTypeId, PersonId)}
	 */
	@Test
	@UnitTestMethod(name = "observeGroupDepartureByTypeAndPerson", args = { boolean.class, GroupTypeId.class, PersonId.class })
	public void testObserveGroupDepartureByTypeAndPerson() {
		/*
		 * 
		 * Time 1 : GLOBAL_COMPONENT_1 adds group 0 and group 1 as type 1 and
		 * adds group 2 as type 2
		 * 
		 * Time 2 : GLOBAL_COMPONENT_2 starts observing departures of person 0
		 * from groups of type 1
		 * 
		 * Time 3 : GLOBAL_COMPONENT_3 starts observing departures of person 0
		 * from groups of type 1
		 * 
		 * Time 4 : GLOBAL_COMPONENT_1 adds person 0 to groups 0, 1 and 2
		 * 
		 * Time 5 : GLOBAL_COMPONENT_1 removes person 0 from groups 0, 1 and 2
		 * 
		 * Time 6 : GLOBAL_COMPONENT_3 stops observing person 0 departures from
		 * groups of type 1
		 * 
		 * Time 7 : GLOBAL_COMPONENT_1 adds person 0 to groups 0, 1 and 2
		 * 
		 * Time 8: GLOBAL_COMPONENT_1 removes person 0 from groups 0, 1 and 2
		 * 
		 * Time 9 : GLOBAL_COMPONENT_4 starts observing person 0 departures from
		 * groups of type 1
		 * 
		 * Time 10 : GLOBAL_COMPONENT_2 adds person 0 to groups 0, 1 and 2
		 * 
		 * Time 11 : GLOBAL_COMPONENT_2 removes person 0 from groups 0, 1 and 2
		 * 
		 * Expected observations
		 * 
		 * GLOBAL_COMPONENT_2:(Time 5) observes person 0 depart from groups 0
		 * and 1
		 * 
		 * GLOBAL_COMPONENT_2:(Time 8) observes person 0 depart from groups 0
		 * and 1 --> demonstrates PostConditions 1 and 4
		 * 
		 * GLOBAL_COMPONENT_3:(Time 5) observes person 0 depart from groups 0
		 * and 1 --> demonstrates PostConditions 1 and 3
		 * 
		 * GLOBAL_COMPONENT_4:(Time 11) observes person 0 depart from groups 0
		 * and 1 --> demonstrates PostCondition 1
		 * 
		 * 
		 * All others: no observations --> demonstrates Post Condition 2
		 */
		long seed = SEED_PROVIDER.getSeedValue(4);

		RandomGenerator randomGenerator = getRandomGenerator(seed);
		Replication replication = getReplication(randomGenerator);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		Scenario scenario = scenarioBuilder.build();

		int taskTime = 0;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			assertModelException(() -> environment.observeGroupDepartureByTypeAndPerson(true, null, new PersonId(0)), SimulationErrorType.NULL_GROUP_TYPE_ID);
			assertModelException(() -> environment.observeGroupDepartureByTypeAndPerson(true, TestGroupTypeId.getUnknownGroupTypeId(), new PersonId(0)), SimulationErrorType.UNKNOWN_GROUP_TYPE_ID);
			assertModelException(() -> environment.observeGroupDepartureByTypeAndPerson(true, TestGroupTypeId.GROUP_TYPE_1, null), SimulationErrorType.NULL_PERSON_ID);
			assertModelException(() -> environment.observeGroupDepartureByTypeAndPerson(true, TestGroupTypeId.GROUP_TYPE_1, new PersonId(10000)), SimulationErrorType.UNKNOWN_PERSON_ID);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(0, groupId.getValue());

			groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(1, groupId.getValue());

			groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_2);
			assertEquals(2, groupId.getValue());
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.observeGroupDepartureByTypeAndPerson(true, TestGroupTypeId.GROUP_TYPE_1, new PersonId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupDepartureByTypeAndPerson(true, TestGroupTypeId.GROUP_TYPE_1, new PersonId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.addPersonToGroup(new PersonId(0), new GroupId(0));
			environment.addPersonToGroup(new PersonId(0), new GroupId(1));
			environment.addPersonToGroup(new PersonId(0), new GroupId(2));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.removePersonFromGroup(new PersonId(0), new GroupId(0));
			environment.removePersonFromGroup(new PersonId(0), new GroupId(1));
			environment.removePersonFromGroup(new PersonId(0), new GroupId(2));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupDepartureByTypeAndPerson(false, TestGroupTypeId.GROUP_TYPE_1, new PersonId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.addPersonToGroup(new PersonId(0), new GroupId(0));
			environment.addPersonToGroup(new PersonId(0), new GroupId(1));
			environment.addPersonToGroup(new PersonId(0), new GroupId(2));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.removePersonFromGroup(new PersonId(0), new GroupId(0));
			environment.removePersonFromGroup(new PersonId(0), new GroupId(1));
			environment.removePersonFromGroup(new PersonId(0), new GroupId(2));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_4, taskTime++, (environment) -> {
			environment.observeGroupDepartureByTypeAndPerson(true, TestGroupTypeId.GROUP_TYPE_1, new PersonId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.addPersonToGroup(new PersonId(0), new GroupId(0));
			environment.addPersonToGroup(new PersonId(0), new GroupId(1));
			environment.addPersonToGroup(new PersonId(0), new GroupId(2));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.removePersonFromGroup(new PersonId(0), new GroupId(0));
			environment.removePersonFromGroup(new PersonId(0), new GroupId(1));
			environment.removePersonFromGroup(new PersonId(0), new GroupId(2));
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		expectedObservations.add(new MultiKey(5.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(5.0, TestGlobalComponentId.GLOBAL_COMPONENT_3, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(5.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(1), new PersonId(0)));
		expectedObservations.add(new MultiKey(5.0, TestGlobalComponentId.GLOBAL_COMPONENT_3, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(1), new PersonId(0)));
		expectedObservations.add(new MultiKey(8.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(8.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(1), new PersonId(0)));
		expectedObservations.add(new MultiKey(11.0, TestGlobalComponentId.GLOBAL_COMPONENT_4, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(11.0, TestGlobalComponentId.GLOBAL_COMPONENT_4, ObservationType.GROUP_PERSON_DEPARTURE, new GroupId(1), new PersonId(0)));

		Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);
	}

	/**
	 * Tests {@linkplain EnvironmentImpl#observeGroupDestruction(boolean)}
	 */
	@Test
	@UnitTestMethod(name = "observeGroupDestruction", args = { boolean.class })
	public void testObserveGroupDestruction() {
		/*
		 * 
		 * Time 0 : GLOBAL_COMPONENT_1 adds groups 0, 1, and 2
		 * 
		 * Time 1 : GLOBAL_COMPONENT_2 starts observing group destruction
		 * 
		 * Time 2 : GLOBAL_COMPONENT_3 starts observing group destruction
		 * 
		 * Time 3 : GLOBAL_COMPONENT_1 removes groups 0
		 * 
		 * Time 4 : GLOBAL_COMPONENT_3 stops observing group destruction
		 * 
		 * Time 5 : GLOBAL_COMPONENT_1 removes groups 1
		 * 
		 * Time 6 : GLOBAL_COMPONENT_4 starts observing group destruction
		 * 
		 * Time 7 : GLOBAL_COMPONENT_2 removes group 2
		 * 
		 * Expected observations
		 * 
		 * GLOBAL_COMPONENT_2:(Time 3) observes destruction of group 0
		 * 
		 * GLOBAL_COMPONENT_2:(Time 4) observes destruction of group 1 -->
		 * demonstrates PostConditions 1 and 4
		 * 
		 * GLOBAL_COMPONENT_3:(Time 5) observes destruction of group 0 -->
		 * demonstrates PostConditions 1 and 3
		 * 
		 * GLOBAL_COMPONENT_4:(Time 7) observes destruction of group 2 -->
		 * demonstrates PostCondition 1
		 * 
		 * All others: no observations --> demonstrates Post Condition 2
		 */
		long seed = SEED_PROVIDER.getSeedValue(5);

		RandomGenerator randomGenerator = getRandomGenerator(seed);
		Replication replication = getReplication(randomGenerator);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		Scenario scenario = scenarioBuilder.build();

		int taskTime = 0;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(0, groupId.getValue());

			groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(1, groupId.getValue());

			groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_2);
			assertEquals(2, groupId.getValue());
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.observeGroupDestruction(true);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupDestruction(true);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.removeGroup(new GroupId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupDestruction(false);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.removeGroup(new GroupId(1));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_4, taskTime++, (environment) -> {
			environment.observeGroupDestruction(true);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.removeGroup(new GroupId(2));
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		expectedObservations.add(new MultiKey(3.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_DESTRUCTION, new GroupId(0)));
		expectedObservations.add(new MultiKey(3.0, TestGlobalComponentId.GLOBAL_COMPONENT_3, ObservationType.GROUP_DESTRUCTION, new GroupId(0)));
		expectedObservations.add(new MultiKey(5.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_DESTRUCTION, new GroupId(1)));
		expectedObservations.add(new MultiKey(7.0, TestGlobalComponentId.GLOBAL_COMPONENT_4, ObservationType.GROUP_DESTRUCTION, new GroupId(2)));

		Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);
	}

	/**
	 * Tests
	 * {@linkplain EnvironmentImpl#observeGroupDestructionByGroup(boolean, GroupId)}
	 */
	@Test
	@UnitTestMethod(name = "observeGroupDestructionByGroup", args = { boolean.class, GroupId.class })
	public void testObserveGroupDestructionByGroup() {
		/*
		 * 
		 * Time 1 : GLOBAL_COMPONENT_1 adds groups 0, 1, and 2
		 * 
		 * Time 2 : GLOBAL_COMPONENT_2 starts observing group destruction for
		 * groups 0, 1 and 2
		 * 
		 * Time 3 : GLOBAL_COMPONENT_3 starts observing group destruction for
		 * groups 0, 1 and 2
		 * 
		 * Time 4 : GLOBAL_COMPONENT_1 removes groups 0
		 * 
		 * Time 5 : GLOBAL_COMPONENT_3 stops observing group destruction for
		 * groups 1 and 2
		 * 
		 * Time 6 : GLOBAL_COMPONENT_1 removes groups 1
		 * 
		 * Time 7 : GLOBAL_COMPONENT_4 starts observing group destruction for
		 * group 2
		 * 
		 * Time 8 : GLOBAL_COMPONENT_2 removes group 2
		 * 
		 * Expected observations
		 * 
		 * GLOBAL_COMPONENT_2:(Time 4) observes destruction of group 0
		 * 
		 * GLOBAL_COMPONENT_2:(Time 6) observes destruction of group 1 -->
		 * demonstrates PostConditions 1 and 4
		 * 
		 * GLOBAL_COMPONENT_3:(Time 4) observes destruction of group 0 -->
		 * demonstrates PostConditions 1 and 3
		 * 
		 * GLOBAL_COMPONENT_4:(Time 8) observes destruction of group 2 -->
		 * demonstrates PostCondition 1
		 * 
		 * All others: no observations --> demonstrates Post Condition 2
		 */
		long seed = SEED_PROVIDER.getSeedValue(6);

		RandomGenerator randomGenerator = getRandomGenerator(seed);
		Replication replication = getReplication(randomGenerator);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		Scenario scenario = scenarioBuilder.build();

		int taskTime = 0;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			assertModelException(() -> environment.observeGroupDestructionByGroup(true, null), SimulationErrorType.NULL_GROUP_ID);
			assertModelException(() -> environment.observeGroupDestructionByGroup(true, new GroupId(10000)), SimulationErrorType.UNKNOWN_GROUP_ID);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(0, groupId.getValue());

			groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(1, groupId.getValue());

			groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_2);
			assertEquals(2, groupId.getValue());
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.observeGroupDestructionByGroup(true, new GroupId(0));
			environment.observeGroupDestructionByGroup(true, new GroupId(1));
			environment.observeGroupDestructionByGroup(true, new GroupId(2));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupDestructionByGroup(true, new GroupId(0));
			environment.observeGroupDestructionByGroup(true, new GroupId(1));
			environment.observeGroupDestructionByGroup(true, new GroupId(2));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.removeGroup(new GroupId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupDestructionByGroup(false, new GroupId(1));
			environment.observeGroupDestructionByGroup(false, new GroupId(2));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.removeGroup(new GroupId(1));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_4, taskTime++, (environment) -> {
			environment.observeGroupDestructionByGroup(true, new GroupId(2));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.removeGroup(new GroupId(2));
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_DESTRUCTION, new GroupId(0)));
		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_3, ObservationType.GROUP_DESTRUCTION, new GroupId(0)));
		expectedObservations.add(new MultiKey(6.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_DESTRUCTION, new GroupId(1)));
		expectedObservations.add(new MultiKey(8.0, TestGlobalComponentId.GLOBAL_COMPONENT_4, ObservationType.GROUP_DESTRUCTION, new GroupId(2)));

		Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);
	}

}
