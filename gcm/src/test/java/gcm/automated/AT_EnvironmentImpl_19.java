package gcm.automated;

import static gcm.automated.support.EnvironmentSupport.addObservationContainer;
import static gcm.automated.support.EnvironmentSupport.addStandardComponentsAndTypes;
import static gcm.automated.support.EnvironmentSupport.addStandardPeople;
import static gcm.automated.support.EnvironmentSupport.addStandardPropertyDefinitions;
import static gcm.automated.support.EnvironmentSupport.addStandardTrackingAndScenarioId;
import static gcm.automated.support.EnvironmentSupport.addTaskPlanContainer;
import static gcm.automated.support.EnvironmentSupport.assertAllPlansExecuted;
import static gcm.automated.support.EnvironmentSupport.generatePropertyValue;
import static gcm.automated.support.EnvironmentSupport.getRandomGenerator;
import static gcm.automated.support.EnvironmentSupport.getReplication;
import static gcm.automated.support.ExceptionAssertion.assertModelException;
import static gcm.simulation.Filter.compartment;
import static gcm.simulation.Filter.property;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

import org.apache.commons.math3.random.RandomGenerator;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import gcm.automated.support.EnvironmentSupport;
import gcm.automated.support.EnvironmentSupport.PropertyAssignmentPolicy;
import gcm.automated.support.ObservationContainer;
import gcm.automated.support.SeedProvider;
import gcm.automated.support.TaskPlanContainer;
import gcm.automated.support.TestGlobalComponentId;
import gcm.automated.support.TestGroupTypeId;
import gcm.automated.support.TestPersonPropertyId;
import gcm.replication.Replication;
import gcm.scenario.CompartmentId;
import gcm.scenario.GroupId;
import gcm.scenario.GroupPropertyId;
import gcm.scenario.GroupTypeId;
import gcm.scenario.PersonId;
import gcm.scenario.PropertyDefinition;
import gcm.scenario.Scenario;
import gcm.scenario.ScenarioBuilder;
import gcm.scenario.UnstructuredScenarioBuilder;
import gcm.simulation.EnvironmentImpl;
import gcm.simulation.Equality;
import gcm.simulation.ObservationType;
import gcm.simulation.Simulation;
import gcm.simulation.SimulationErrorType;
import gcm.util.MultiKey;
import gcm.util.annotations.UnitTest;
import gcm.util.annotations.UnitTestMethod;

@UnitTest(target = EnvironmentImpl.class)

public class AT_EnvironmentImpl_19 {

	private static SeedProvider SEED_PROVIDER;

	@BeforeClass
	public static void beforeClass() {
		SEED_PROVIDER = new SeedProvider(EnvironmentSupport.getMetaSeed(19));
	}

	/**
	 * Internal test(not part of public tests) to show that there are no large
	 * gaps in the seed cases generated by the SeedProvider.
	 */
	@AfterClass
	public static void afterClass() {
		// System.out.println(SEED_PROVIDER.generateUnusedSeedReport());
	}

	/**
	 * Tests
	 * {@linkplain EnvironmentImpl#observeGroupDestructionByType(boolean, GroupTypeId)}
	 */
	@Test
	@UnitTestMethod(name = "observeGroupDestructionByType", args = { boolean.class, GroupTypeId.class})
	public void testObserveGroupDestructionByType() {
		/*
		 * 
		 * Time 1 : GLOBAL_COMPONENT_1 adds groups 0, 1, and 2
		 * 
		 * Time 2 : GLOBAL_COMPONENT_2 starts observing group destruction for
		 * groups of type 1
		 * 
		 * Time 3 : GLOBAL_COMPONENT_3 starts observing group destruction for
		 * groups of type 1
		 * 
		 * Time 4 : GLOBAL_COMPONENT_1 removes groups 0
		 * 
		 * Time 5 : GLOBAL_COMPONENT_3 stops observing group destruction for
		 * groups of type 1
		 * 
		 * Time 6 : GLOBAL_COMPONENT_1 removes groups 1
		 * 
		 * Time 7 : GLOBAL_COMPONENT_4 starts observing group destruction for
		 * groups of type 1
		 * 
		 * Time 8 : GLOBAL_COMPONENT_2 removes group 2
		 * 
		 * Expected observations
		 * 
		 * GLOBAL_COMPONENT_2:(Time 4) observes destruction of group 0
		 * 
		 * GLOBAL_COMPONENT_2:(Time 6) observes destruction of group 1 -->
		 * demonstrates PostConditions 1 and 4
		 * 
		 * GLOBAL_COMPONENT_3:(Time 4) observes destruction of group 0 -->
		 * demonstrates PostConditions 1 and 3
		 * 
		 * GLOBAL_COMPONENT_4:(Time 8) observes destruction of group 2 -->
		 * demonstrates PostCondition 1
		 * 
		 * All others: no observations --> demonstrates Post Condition 2
		 */
		long seed = SEED_PROVIDER.getSeedValue(0);

		RandomGenerator randomGenerator = getRandomGenerator(seed);
		Replication replication = getReplication(randomGenerator);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		Scenario scenario = scenarioBuilder.build();

		int taskTime = 0;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			assertModelException(() -> environment.observeGroupDestructionByType(true, null), SimulationErrorType.NULL_GROUP_TYPE_ID);
			assertModelException(() -> environment.observeGroupDestructionByType(true, TestGroupTypeId.getUnknownGroupTypeId()), SimulationErrorType.UNKNOWN_GROUP_TYPE_ID);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(0, groupId.getValue());

			groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(1, groupId.getValue());

			groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(2, groupId.getValue());
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.observeGroupDestructionByType(true, TestGroupTypeId.GROUP_TYPE_1);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupDestructionByType(true, TestGroupTypeId.GROUP_TYPE_1);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.removeGroup(new GroupId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupDestructionByType(false, TestGroupTypeId.GROUP_TYPE_1);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.removeGroup(new GroupId(1));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_4, taskTime++, (environment) -> {
			environment.observeGroupDestructionByType(true, TestGroupTypeId.GROUP_TYPE_1);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.removeGroup(new GroupId(2));
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_DESTRUCTION, new GroupId(0)));
		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_3, ObservationType.GROUP_DESTRUCTION, new GroupId(0)));
		expectedObservations.add(new MultiKey(6.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_DESTRUCTION, new GroupId(1)));
		expectedObservations.add(new MultiKey(8.0, TestGlobalComponentId.GLOBAL_COMPONENT_4, ObservationType.GROUP_DESTRUCTION, new GroupId(2)));

		Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);
	}

	/**
	 * Tests {@linkplain EnvironmentImpl#observeGroupPropertyChange(boolean)
	 */
	@Test
	@UnitTestMethod(name = "observeGroupPropertyChange", args = { boolean.class})
	public void testObserveGroupPropertyChange() {
		/*
		 * 
		 * Time 0 : GLOBAL_COMPONENT_1 adds groups 0, 1
		 * 
		 * Time 1 : GLOBAL_COMPONENT_2 starts observing group property changes
		 * for groups of type 1
		 * 
		 * Time 2 : GLOBAL_COMPONENT_3 starts observing group property changes
		 * for groups of type 1
		 * 
		 * Time 3 : GLOBAL_COMPONENT_1 sets property 0 of group 0
		 * 
		 * Time 4 : GLOBAL_COMPONENT_3 stops observing group property changes
		 * 
		 * Time 5 : GLOBAL_COMPONENT_1 sets property 1 of group 1
		 * 
		 * Time 6 : GLOBAL_COMPONENT_4 starts observing group property changes
		 * 
		 * Time 7 : GLOBAL_COMPONENT_2 sets property 0 of group 1
		 *
		 * Expected observations
		 * 
		 * GLOBAL_COMPONENT_2:(Time 3) observes property 0 of group 0 change
		 * 
		 * GLOBAL_COMPONENT_2:(Time 5) observes property 1 of group 1 change -->
		 * demonstrates PostConditions 1 and 4
		 * 
		 * GLOBAL_COMPONENT_3:(Time 3) observes property 0 of group 0 change -->
		 * demonstrates PostConditions 1 and 3
		 * 
		 * GLOBAL_COMPONENT_4:(Time 7) observes property 0 of group 1 change -->
		 * demonstrates PostCondition 1
		 * 
		 * All others: no observations --> demonstrates Post Condition 2
		 */
		long seed = SEED_PROVIDER.getSeedValue(1);

		RandomGenerator randomGenerator = getRandomGenerator(seed);
		Replication replication = getReplication(randomGenerator);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);

		Map<Object, PropertyDefinition> forcedPropertyDefinitions = new LinkedHashMap<>();

		GroupPropertyId groupPropertyId_0 = TestGroupTypeId.GROUP_TYPE_1.getGroupPropertyIds()[0];
		GroupPropertyId groupPropertyId_1 = TestGroupTypeId.GROUP_TYPE_1.getGroupPropertyIds()[1];
		PropertyDefinition propertyDefinition = PropertyDefinition	.builder()//
																	.setType(Integer.class)//
																	.setDefaultValue(0)//
																	.build();
		forcedPropertyDefinitions.put(groupPropertyId_0, propertyDefinition);

		propertyDefinition = PropertyDefinition	.builder()//
												.setType(String.class)//
												.setDefaultValue("default")//
												.build();

		forcedPropertyDefinitions.put(groupPropertyId_1, propertyDefinition);

		addStandardPropertyDefinitions(scenarioBuilder, forcedPropertyDefinitions, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		Scenario scenario = scenarioBuilder.build();

		int taskTime = 0;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(0, groupId.getValue());

			groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(1, groupId.getValue());
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.observeGroupPropertyChange(true);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupPropertyChange(true);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.setGroupPropertyValue(new GroupId(0), groupPropertyId_0, 1);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupPropertyChange(false);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.setGroupPropertyValue(new GroupId(1), groupPropertyId_1, "cat");
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_4, taskTime++, (environment) -> {
			environment.observeGroupPropertyChange(true);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.setGroupPropertyValue(new GroupId(1), groupPropertyId_0, 100);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		expectedObservations.add(new MultiKey(3.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PROPERTY, new GroupId(0), groupPropertyId_0));
		expectedObservations.add(new MultiKey(3.0, TestGlobalComponentId.GLOBAL_COMPONENT_3, ObservationType.GROUP_PROPERTY, new GroupId(0), groupPropertyId_0));
		expectedObservations.add(new MultiKey(5.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PROPERTY, new GroupId(1), groupPropertyId_1));
		expectedObservations.add(new MultiKey(7.0, TestGlobalComponentId.GLOBAL_COMPONENT_4, ObservationType.GROUP_PROPERTY, new GroupId(1), groupPropertyId_0));

		Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);
	}

	/**
	 * Tests {@linkplain EnvironmentImpl#observeGroupPropertyChangeByGroup(boolean, GroupId)}
	 */
	@Test
	@UnitTestMethod(name = "observeGroupPropertyChangeByGroup", args = { boolean.class, GroupId.class})
	public void testObserveGroupPropertyChangeByGroup() {
		/*
		 * 
		 * Time 1 : GLOBAL_COMPONENT_1 adds groups 0, 1
		 * 
		 * Time 2 : GLOBAL_COMPONENT_2 starts observing group property changes
		 * for group 0
		 * 
		 * Time 3 : GLOBAL_COMPONENT_3 starts observing group property changes
		 * for group 1
		 * 
		 * Time 4 : GLOBAL_COMPONENT_1 sets property 0 of group 1 and property 1
		 * of group 0
		 * 
		 * Time 5 : GLOBAL_COMPONENT_3 stops observing group property changes
		 * for group 1
		 * 
		 * Time 6 : GLOBAL_COMPONENT_1 sets property 0 of group 0 and property 1
		 * of group 1
		 * 
		 * Time 7 : GLOBAL_COMPONENT_4 starts observing group property changes
		 * for group 0
		 * 
		 * Time 8 : GLOBAL_COMPONENT_2 sets property 0 of group 0
		 * 
		 * Expected observations
		 * 
		 * GLOBAL_COMPONENT_2:(Time 4) observes property 1 of group 0 change
		 * 
		 * GLOBAL_COMPONENT_2:(Time 6) observes property 0 of group 0 change -->
		 * demonstrates PostConditions 1 and 4
		 * 
		 * GLOBAL_COMPONENT_3:(Time 4) observes property 0 of group 1 change -->
		 * demonstrates PostConditions 1 and 3
		 * 
		 * GLOBAL_COMPONENT_4:(Time 8) observes property 0 of group 0 change -->
		 * demonstrates PostCondition 1
		 *
		 * 
		 * All others: no observations --> demonstrates Post Condition 2
		 */
		long seed = SEED_PROVIDER.getSeedValue(2);

		RandomGenerator randomGenerator = getRandomGenerator(seed);
		Replication replication = getReplication(randomGenerator);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);

		Map<Object, PropertyDefinition> forcedPropertyDefinitions = new LinkedHashMap<>();

		GroupPropertyId groupPropertyId_0 = TestGroupTypeId.GROUP_TYPE_1.getGroupPropertyIds()[0];
		GroupPropertyId groupPropertyId_1 = TestGroupTypeId.GROUP_TYPE_1.getGroupPropertyIds()[1];
		PropertyDefinition propertyDefinition = PropertyDefinition	.builder()//
																	.setType(Integer.class)//
																	.setDefaultValue(0)//
																	.build();

		forcedPropertyDefinitions.put(groupPropertyId_0, propertyDefinition);

		propertyDefinition = PropertyDefinition	.builder()//
												.setType(String.class)//
												.setDefaultValue("default")//
												.build();

		forcedPropertyDefinitions.put(groupPropertyId_1, propertyDefinition);

		addStandardPropertyDefinitions(scenarioBuilder, forcedPropertyDefinitions, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		Scenario scenario = scenarioBuilder.build();

		int taskTime = 0;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			assertModelException(() -> environment.observeGroupPropertyChangeByGroup(true, null), SimulationErrorType.NULL_GROUP_ID);
			assertModelException(() -> environment.observeGroupPropertyChangeByGroup(true, new GroupId(10000)), SimulationErrorType.UNKNOWN_GROUP_ID);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(0, groupId.getValue());

			groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(1, groupId.getValue());
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.observeGroupPropertyChangeByGroup(true, new GroupId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupPropertyChangeByGroup(true, new GroupId(1));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.setGroupPropertyValue(new GroupId(1), groupPropertyId_0, 1);
			environment.setGroupPropertyValue(new GroupId(0), groupPropertyId_1, "dog");
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupPropertyChangeByGroup(false, new GroupId(1));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.setGroupPropertyValue(new GroupId(0), groupPropertyId_0, 2);
			environment.setGroupPropertyValue(new GroupId(1), groupPropertyId_1, "cat");
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_4, taskTime++, (environment) -> {
			environment.observeGroupPropertyChangeByGroup(true, new GroupId(0));
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.setGroupPropertyValue(new GroupId(0), groupPropertyId_0, 100);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_3, ObservationType.GROUP_PROPERTY, new GroupId(1), groupPropertyId_0));
		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PROPERTY, new GroupId(0), groupPropertyId_1));
		expectedObservations.add(new MultiKey(6.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PROPERTY, new GroupId(0), groupPropertyId_0));
		expectedObservations.add(new MultiKey(8.0, TestGlobalComponentId.GLOBAL_COMPONENT_4, ObservationType.GROUP_PROPERTY, new GroupId(0), groupPropertyId_0));

		Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);
	}

	/**
	 * Tests {@linkplain
	 * EnvironmentImpl#observeGroupPropertyChangeByGroupAndProperty(boolean, GroupId, GroupPropertyId)}
	 */
	@Test
	@UnitTestMethod(name = "observeGroupPropertyChangeByGroupAndProperty", args = { boolean.class, GroupId.class, GroupPropertyId.class})
	public void testObserveGroupPropertyChangeByGroupAndProperty() {
		/*
		 * Time 0 : GLOBAL_COMPONENT_1 adds groups 0
		 * 
		 * Time 1 : GLOBAL_COMPONENT_1 adds groups 1
		 * 
		 * Time 2 : GLOBAL_COMPONENT_2 starts observing group property 0 changes
		 * for group 0
		 * 
		 * Time 3 : GLOBAL_COMPONENT_3 starts observing group property 1 changes
		 * for group 1
		 * 
		 * Time 4 : GLOBAL_COMPONENT_1 sets property 0 of group 0 and property 1
		 * of group 1
		 * 
		 * Time 5 : GLOBAL_COMPONENT_3 stops observing group property 1 changes
		 * for group 1
		 * 
		 * Time 6 : GLOBAL_COMPONENT_1 sets property 1 of group 0 and property 0
		 * of group 1
		 * 
		 * Time 7 : GLOBAL_COMPONENT_4 starts observing group property 0 changes
		 * for group 0
		 * 
		 * Time 8 : GLOBAL_COMPONENT_2 sets property 0 of group 0
		 * 
		 * Expected observations
		 * 
		 * GLOBAL_COMPONENT_2:(Time 4) observes property 0 of group 0 change
		 * 
		 * GLOBAL_COMPONENT_3:(Time 4) observes property 1 of group 1 change -->
		 * demonstrates PostConditions 1 and 3
		 * 
		 * GLOBAL_COMPONENT_4:(Time 8) observes property 0 of group 0 change -->
		 * demonstrates PostCondition 1
		 * 
		 * All others: no observations --> demonstrates Post Condition 2
		 */
		long seed = SEED_PROVIDER.getSeedValue(3);

		RandomGenerator randomGenerator = getRandomGenerator(seed);
		Replication replication = getReplication(randomGenerator);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);

		Map<Object, PropertyDefinition> forcedPropertyDefinitions = new LinkedHashMap<>();

		GroupPropertyId groupPropertyId_0 = TestGroupTypeId.GROUP_TYPE_1.getGroupPropertyIds()[0];
		GroupPropertyId groupPropertyId_1 = TestGroupTypeId.GROUP_TYPE_1.getGroupPropertyIds()[1];
		PropertyDefinition propertyDefinition = PropertyDefinition	.builder()//
																	.setType(Integer.class)//
																	.setDefaultValue(0)//
																	.build();
		forcedPropertyDefinitions.put(groupPropertyId_0, propertyDefinition);

		propertyDefinition = PropertyDefinition	.builder()//
												.setType(String.class)//
												.setDefaultValue("default")//
												.build();
		forcedPropertyDefinitions.put(groupPropertyId_1, propertyDefinition);

		addStandardPropertyDefinitions(scenarioBuilder, forcedPropertyDefinitions, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		Scenario scenario = scenarioBuilder.build();

		int taskTime = 0;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(0, groupId.getValue());

			assertModelException(() -> environment.observeGroupPropertyChangeByGroupAndProperty(true, null, groupPropertyId_0), SimulationErrorType.NULL_GROUP_ID);
			assertModelException(() -> environment.observeGroupPropertyChangeByGroupAndProperty(true, new GroupId(10000), groupPropertyId_0), SimulationErrorType.UNKNOWN_GROUP_ID);
			assertModelException(() -> environment.observeGroupPropertyChangeByGroupAndProperty(true, groupId, null), SimulationErrorType.NULL_GROUP_PROPERTY_ID);
			assertModelException(() -> environment.observeGroupPropertyChangeByGroupAndProperty(true, groupId, TestGroupTypeId.getUnknownGroupPropertyId()),
					SimulationErrorType.UNKNOWN_GROUP_PROPERTY_ID);

		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(1, groupId.getValue());
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.observeGroupPropertyChangeByGroupAndProperty(true, new GroupId(0), groupPropertyId_0);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupPropertyChangeByGroupAndProperty(true, new GroupId(1), groupPropertyId_1);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.setGroupPropertyValue(new GroupId(0), groupPropertyId_0, 1);
			environment.setGroupPropertyValue(new GroupId(1), groupPropertyId_1, "dog");
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupPropertyChangeByGroupAndProperty(false, new GroupId(1), groupPropertyId_1);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.setGroupPropertyValue(new GroupId(0), groupPropertyId_1, "cat");
			environment.setGroupPropertyValue(new GroupId(1), groupPropertyId_0, 2);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_4, taskTime++, (environment) -> {
			environment.observeGroupPropertyChangeByGroupAndProperty(true, new GroupId(0), groupPropertyId_0);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.setGroupPropertyValue(new GroupId(0), groupPropertyId_0, 2);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PROPERTY, new GroupId(0), groupPropertyId_0));
		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_3, ObservationType.GROUP_PROPERTY, new GroupId(1), groupPropertyId_1));
		expectedObservations.add(new MultiKey(8.0, TestGlobalComponentId.GLOBAL_COMPONENT_4, ObservationType.GROUP_PROPERTY, new GroupId(0), groupPropertyId_0));

		Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);
	}

	/**
	 * Tests {@linkplain EnvironmentImpl#observeGroupPropertyChangeByType(boolean, GroupTypeId)}
	 */
	@Test
	@UnitTestMethod(name = "observeGroupPropertyChangeByType", args = { boolean.class, GroupTypeId.class})
	public void testObserveGroupPropertyChangeByType() {
		/*
		 * Time 1 : GLOBAL_COMPONENT_1 adds groups 0 and 1
		 * 
		 * Time 2 : GLOBAL_COMPONENT_2 starts observing group property changes
		 * for groups of type 1
		 * 
		 * Time 3 : GLOBAL_COMPONENT_3 starts observing group property changes
		 * for groups of type 1
		 * 
		 * Time 4 : GLOBAL_COMPONENT_1 sets property 0 of group 0 and property 1
		 * of group 1
		 * 
		 * Time 5 : GLOBAL_COMPONENT_3 stops observing group property changes
		 * for groups of type 1
		 * 
		 * Time 6 : GLOBAL_COMPONENT_1 sets property 1 of group 0 and property 0
		 * of group 1
		 * 
		 * Time 7 : GLOBAL_COMPONENT_4 starts observing group property changes
		 * for groups of type 1
		 * 
		 * Time 8 : GLOBAL_COMPONENT_2 sets property 0 of group 0
		 * 
		 * 
		 * Expected observations
		 * 
		 * GLOBAL_COMPONENT_2:(Time 4) observes property 0 of group 0 change
		 * 
		 * GLOBAL_COMPONENT_2:(Time 4) observes property 1 of group 1 change
		 * 
		 * GLOBAL_COMPONENT_2:(Time 6) observes property 1 of group 0 change
		 * 
		 * GLOBAL_COMPONENT_2:(Time 6) observes property 0 of group 1 change-->
		 * demonstrates PostConditions 1 and 4
		 * 
		 * GLOBAL_COMPONENT_3:(Time 4) observes property 0 of group 0 change
		 * 
		 * GLOBAL_COMPONENT_3:(Time 4) observes property 1 of group 1 change -->
		 * demonstrates PostConditions 1 and 3
		 * 
		 * GLOBAL_COMPONENT_4:(Time 8) observes property 0 of group 0 change -->
		 * demonstrates PostCondition 1
		 * 
		 * All others: no observations --> demonstrates Post Condition 2
		 */
		long seed = SEED_PROVIDER.getSeedValue(4);

		RandomGenerator randomGenerator = getRandomGenerator(seed);
		Replication replication = getReplication(randomGenerator);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);

		Map<Object, PropertyDefinition> forcedPropertyDefinitions = new LinkedHashMap<>();

		GroupPropertyId groupPropertyId_0 = TestGroupTypeId.GROUP_TYPE_1.getGroupPropertyIds()[0];
		GroupPropertyId groupPropertyId_1 = TestGroupTypeId.GROUP_TYPE_1.getGroupPropertyIds()[1];

		PropertyDefinition propertyDefinition = PropertyDefinition	.builder()//
																	.setType(Integer.class)//
																	.setDefaultValue(0)//
																	.build();

		forcedPropertyDefinitions.put(groupPropertyId_0, propertyDefinition);

		propertyDefinition = PropertyDefinition	.builder()//
												.setType(String.class)//
												.setDefaultValue("default")//
												.build();
		forcedPropertyDefinitions.put(groupPropertyId_1, propertyDefinition);

		addStandardPropertyDefinitions(scenarioBuilder, forcedPropertyDefinitions, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		Scenario scenario = scenarioBuilder.build();

		int taskTime = 0;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			assertModelException(() -> environment.observeGroupPropertyChangeByType(true, null), SimulationErrorType.NULL_GROUP_TYPE_ID);
			assertModelException(() -> environment.observeGroupPropertyChangeByType(true, TestGroupTypeId.getUnknownGroupTypeId()), SimulationErrorType.UNKNOWN_GROUP_TYPE_ID);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(0, groupId.getValue());

			groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(1, groupId.getValue());
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.observeGroupPropertyChangeByType(true, TestGroupTypeId.GROUP_TYPE_1);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupPropertyChangeByType(true, TestGroupTypeId.GROUP_TYPE_1);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.setGroupPropertyValue(new GroupId(0), groupPropertyId_0, 1);
			environment.setGroupPropertyValue(new GroupId(1), groupPropertyId_1, "dog");
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupPropertyChangeByType(false, TestGroupTypeId.GROUP_TYPE_1);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.setGroupPropertyValue(new GroupId(0), groupPropertyId_1, "cat");
			environment.setGroupPropertyValue(new GroupId(1), groupPropertyId_0, 2);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_4, taskTime++, (environment) -> {
			environment.observeGroupPropertyChangeByType(true, TestGroupTypeId.GROUP_TYPE_1);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.setGroupPropertyValue(new GroupId(0), groupPropertyId_0, 2);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PROPERTY, new GroupId(0), groupPropertyId_0));
		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_3, ObservationType.GROUP_PROPERTY, new GroupId(0), groupPropertyId_0));
		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PROPERTY, new GroupId(1), groupPropertyId_1));
		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_3, ObservationType.GROUP_PROPERTY, new GroupId(1), groupPropertyId_1));
		expectedObservations.add(new MultiKey(6.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PROPERTY, new GroupId(0), groupPropertyId_1));
		expectedObservations.add(new MultiKey(6.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PROPERTY, new GroupId(1), groupPropertyId_0));
		expectedObservations.add(new MultiKey(8.0, TestGlobalComponentId.GLOBAL_COMPONENT_4, ObservationType.GROUP_PROPERTY, new GroupId(0), groupPropertyId_0));

		Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);
	}

	/**
	 * Tests {@linkplain
	 * EnvironmentImpl#observeGroupPropertyChangeByTypeAndProperty(boolean, GroupTypeId, GroupPropertyId)}
	 */
	@Test
	@UnitTestMethod(name = "observeGroupPropertyChangeByTypeAndProperty", args = { boolean.class, GroupTypeId.class, GroupPropertyId.class})
	public void testObserveGroupPropertyChangeByTypeAndProperty() {
		/*
		 * Time 1 : GLOBAL_COMPONENT_1 adds groups 0 and 1
		 * 
		 * Time 2 : GLOBAL_COMPONENT_2 starts observing group property 0 changes
		 * for groups of type 1
		 * 
		 * Time 3 : GLOBAL_COMPONENT_3 starts observing group property 0 changes
		 * for groups of type 1
		 * 
		 * Time 4 : GLOBAL_COMPONENT_1 sets property 0 of group 0 and property 0
		 * 
		 * Time 5 : GLOBAL_COMPONENT_3 stops observing group property changes
		 * for groups of type 1 and property 0
		 * 
		 * Time 6 : GLOBAL_COMPONENT_1 sets property 1 of group 1 and property 0
		 * 
		 * Time 7 : GLOBAL_COMPONENT_4 starts observing group property 0 changes
		 * for groups of type 1
		 * 
		 * Time 8 : GLOBAL_COMPONENT_2 sets property 0 of group 0
		 * 
		 * Expected observations
		 * 
		 * GLOBAL_COMPONENT_2:(Time 4) observes property 0 of group 0 change
		 * 
		 * GLOBAL_COMPONENT_2:(Time 6) observes property 0 of group 1 change-->
		 * demonstrates PostConditions 1 and 4
		 * 
		 * GLOBAL_COMPONENT_3:(Time 4) observes property 0 of group 0 change -->
		 * demonstrates PostConditions 1 and 3
		 * 
		 * GLOBAL_COMPONENT_4:(Time 8) observes property 0 of group 0 change -->
		 * demonstrates PostCondition 1
		 * 
		 * All others: no observations --> demonstrates Post Condition 2
		 */
		long seed = SEED_PROVIDER.getSeedValue(5);

		RandomGenerator randomGenerator = getRandomGenerator(seed);
		Replication replication = getReplication(randomGenerator);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);

		Map<Object, PropertyDefinition> forcedPropertyDefinitions = new LinkedHashMap<>();

		GroupPropertyId groupPropertyId_0 = TestGroupTypeId.GROUP_TYPE_1.getGroupPropertyIds()[0];
		GroupPropertyId groupPropertyId_1 = TestGroupTypeId.GROUP_TYPE_1.getGroupPropertyIds()[1];

		PropertyDefinition propertyDefinition = PropertyDefinition	.builder()//
																	.setType(Integer.class)//
																	.setDefaultValue(0)//
																	.build();
		forcedPropertyDefinitions.put(groupPropertyId_0, propertyDefinition);

		propertyDefinition = PropertyDefinition	.builder()//
												.setType(String.class)//
												.setDefaultValue("default")//
												.build();
		forcedPropertyDefinitions.put(groupPropertyId_1, propertyDefinition);

		addStandardPropertyDefinitions(scenarioBuilder, forcedPropertyDefinitions, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		Scenario scenario = scenarioBuilder.build();

		int taskTime = 0;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			assertModelException(() -> environment.observeGroupPropertyChangeByTypeAndProperty(true, null, groupPropertyId_0), SimulationErrorType.NULL_GROUP_TYPE_ID);
			assertModelException(() -> environment.observeGroupPropertyChangeByTypeAndProperty(true, TestGroupTypeId.getUnknownGroupTypeId(), groupPropertyId_0),
					SimulationErrorType.UNKNOWN_GROUP_TYPE_ID);
			assertModelException(() -> environment.observeGroupPropertyChangeByTypeAndProperty(true, TestGroupTypeId.GROUP_TYPE_1, null), SimulationErrorType.NULL_GROUP_PROPERTY_ID);
			assertModelException(() -> environment.observeGroupPropertyChangeByTypeAndProperty(true, TestGroupTypeId.GROUP_TYPE_1, TestGroupTypeId.getUnknownGroupPropertyId()),
					SimulationErrorType.UNKNOWN_GROUP_PROPERTY_ID);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(0, groupId.getValue());

			groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(1, groupId.getValue());
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.observeGroupPropertyChangeByTypeAndProperty(true, TestGroupTypeId.GROUP_TYPE_1, groupPropertyId_0);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupPropertyChangeByTypeAndProperty(true, TestGroupTypeId.GROUP_TYPE_1, groupPropertyId_0);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.setGroupPropertyValue(new GroupId(0), groupPropertyId_0, 1);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, taskTime++, (environment) -> {
			environment.observeGroupPropertyChangeByTypeAndProperty(false, TestGroupTypeId.GROUP_TYPE_1, groupPropertyId_0);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, taskTime++, (environment) -> {
			environment.setGroupPropertyValue(new GroupId(1), groupPropertyId_0, 2);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_4, taskTime++, (environment) -> {
			environment.observeGroupPropertyChangeByTypeAndProperty(true, TestGroupTypeId.GROUP_TYPE_1, groupPropertyId_0);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, taskTime++, (environment) -> {
			environment.setGroupPropertyValue(new GroupId(0), groupPropertyId_0, 100);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PROPERTY, new GroupId(0), groupPropertyId_0));
		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_3, ObservationType.GROUP_PROPERTY, new GroupId(0), groupPropertyId_0));
		expectedObservations.add(new MultiKey(6.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PROPERTY, new GroupId(1), groupPropertyId_0));
		expectedObservations.add(new MultiKey(8.0, TestGlobalComponentId.GLOBAL_COMPONENT_4, ObservationType.GROUP_PROPERTY, new GroupId(0), groupPropertyId_0));

		Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);
	}

	/**
	 * Test of {@link EnvironmentImpl#init(gcm.simulation.Context)}
	 */
	@Test
	public void testInit() {
		// Implicitly tested by all other tests that use a simulation instance
	}

	/**
	 * Test of {@link EnvironmentImpl#observeGroupArrival(boolean)}
	 */
	@Test
	@UnitTestMethod(name = "observeGroupArrival", args = { boolean.class})
	public void testObserveGroupArrival() {
		/*
		 * We test for the post conditions by first having the components
		 * execute a series time-separated plans and then examining the
		 * observations recorded by each component. Precondition tests are added
		 * at the end.
		 *
		 * Actions
		 *
		 * Time 1 : Global Component 1 starts observing group arrivals
		 * 
		 * Time 2 : Global Component 2 starts observing group arrivals
		 *
		 * Time 3 : Global Component 2 moves person 0 to group 0
		 *
		 * Time 4 : Global Component 3 moves person 2 into group 0
		 *
		 * Time 5 : Global Component 1 stops observing group arrivals
		 *
		 * Time 6 : Global Component 2 moves person 1 to group 0
		 * 
		 * Expected observations
		 *
		 * Global Component 1: person 0: demonstrates post conditions 1 and 3
		 *
		 * Global Component 2: person 2 : demonstrates post condition 1 and 4
		 *
		 * All others: no observations --> demonstrates Post Condition 2
		 * 
		 */
		final long seed = SEED_PROVIDER.getSeedValue(6);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		ObservationContainer observationContainer = addObservationContainer(scenarioBuilder);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> environment.observeGroupArrival(true));

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, testTime++, (environment) -> environment.observeGroupArrival(true));

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, testTime++, (environment) -> {
			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			assertEquals(0, groupId.getValue());

			PersonId personId = new PersonId(0);
			assertTrue(environment.personExists(personId));

			environment.addPersonToGroup(personId, groupId);
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_3, testTime++, (environment) -> {

			GroupId groupId = new GroupId(0);
			assertTrue(environment.groupExists(groupId));

			PersonId personId = new PersonId(2);
			assertTrue(environment.personExists(personId));

			environment.addPersonToGroup(personId, groupId);

		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> environment.observeGroupArrival(false));

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_2, testTime++, (environment) -> {
			PersonId personId = new PersonId(1);
			assertTrue(environment.personExists(personId));

			GroupId groupId = new GroupId(0);
			assertTrue(environment.groupExists(groupId));

			environment.addPersonToGroup(personId, groupId);
		});

		// No precondition tests

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		final Set<MultiKey> expectedObservations = new LinkedHashSet<>();

		/*
		 * Expected observations
		 */

		expectedObservations.add(new MultiKey(3.0, TestGlobalComponentId.GLOBAL_COMPONENT_1, ObservationType.GROUP_PERSON_ARRIVAL, new GroupId(0), new PersonId(0)));
		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_1, ObservationType.GROUP_PERSON_ARRIVAL, new GroupId(0), new PersonId(2)));
		expectedObservations.add(new MultiKey(4.0, TestGlobalComponentId.GLOBAL_COMPONENT_2, ObservationType.GROUP_PERSON_ARRIVAL, new GroupId(0), new PersonId(2)));

		final Set<MultiKey> actualObservations = observationContainer.getObservations();

		assertEquals(expectedObservations, actualObservations);

	}

	/**
	 * Tests {@link EnvironmentImpl#personExists(PersonId)}
	 */
	@Test
	@UnitTestMethod(name = "personExists", args = { PersonId.class})
	public void testPersonExists() {
		/*
		 * Assert that each person id that we expect returns true from
		 * invocations of personExists. Also test that person id values that do
		 * not correspond to an expected person id, asserting that personExists
		 * returns false.
		 */

		final long seed = SEED_PROVIDER.getSeedValue(7);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			assertFalse(environment.personExists(new PersonId(-1)));
			final Set<PersonId> peopleIds = scenario.getPeopleIds();
			assertFalse(environment.personExists(new PersonId(peopleIds.size())));
			for (final PersonId personId : peopleIds) {
				assertTrue(environment.personExists(personId));
			}
		});
		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests {@link EnvironmentImpl#personIsInPopulationIndex(PersonId, Object)}
	 */
	@Test
	@UnitTestMethod(name = "personIsInPopulationIndex", args = { PersonId.class, Object.class})
	public void testPersonIsInPopulationIndex() {
		/*
		 * Show that we can verify a person's membership in a population index.
		 */
		final long seed = SEED_PROVIDER.getSeedValue(8);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.TRUE, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		final Object key = new Object();

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			// Make sure that we have randomized values for person property
			// 1 for all the people
			for (final PersonId personId : environment.getPeople()) {
				final PropertyDefinition propertyDefinition = environment.getPersonPropertyDefinition(TestPersonPropertyId.PERSON_PROPERTY_1);
				final Object currentValue = environment.getPersonPropertyValue(personId, TestPersonPropertyId.PERSON_PROPERTY_1);
				/*
				 * Derive a new value that is not the same as the current value
				 * so that when we assert that the new value is now in place we
				 * are not actually seeing the old value.
				 */
				final Object newValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());

				/*
				 * Set the value
				 */
				if (!currentValue.equals(newValue)) {
					environment.setPersonPropertyValue(personId, TestPersonPropertyId.PERSON_PROPERTY_1, newValue);
				}

			}
			/*
			 * Organize all people into a map by compartment id and property
			 * value.
			 *
			 * <CompartmentId,PropertyValue,People>
			 */
			final Map<CompartmentId, Map<Comparable<?>, Set<PersonId>>> peopleInCompartmentWithProperty = new LinkedHashMap<>();

			/*
			 * Make sure there are a few people
			 */
			assertTrue(scenario.getPeopleIds().size() > 10);

			final Set<Object> personPropertyValueEncountered = new LinkedHashSet<>();

			for (final PersonId personId : scenario.getPeopleIds()) {
				final CompartmentId compartmentId = scenario.getPersonCompartment(personId);
				final Comparable<?> personPropertyValue = environment.getPersonPropertyValue(personId, TestPersonPropertyId.PERSON_PROPERTY_1);
				personPropertyValueEncountered.add(personPropertyValue);
				Map<Comparable<?>, Set<PersonId>> map = peopleInCompartmentWithProperty.get(compartmentId);
				if (map == null) {
					map = new LinkedHashMap<>();
					peopleInCompartmentWithProperty.put(compartmentId, map);
				}
				Set<PersonId> set = map.get(personPropertyValue);
				if (set == null) {
					set = new LinkedHashSet<>();
					map.put(personPropertyValue, set);
				}
				set.add(personId);
			}

			/*
			 * Make sure that the people have more that one property value
			 */
			assertTrue(personPropertyValueEncountered.size() > 1);

			/*
			 * Add a population index for each <compartment, property value>
			 * pair
			 */
			for (final CompartmentId compartmentId : peopleInCompartmentWithProperty.keySet()) {
				final Map<Comparable<?>, Set<PersonId>> map = peopleInCompartmentWithProperty.get(compartmentId);
				for (final Comparable<?> propertyValue : map.keySet()) {
					MultiKey multiKey = new MultiKey(compartmentId, propertyValue);
					environment.addPopulationIndex(compartment(compartmentId).and(property(TestPersonPropertyId.PERSON_PROPERTY_1, Equality.EQUAL, propertyValue)), multiKey);
				}
			}

			/*
			 * Show that a person's membership in each index is correct
			 */

			for (final CompartmentId compartmentId : peopleInCompartmentWithProperty.keySet()) {
				final Map<Comparable<?>, Set<PersonId>> map = peopleInCompartmentWithProperty.get(compartmentId);
				for (final Comparable<?> propertyValue : map.keySet()) {
					final Set<PersonId> expectedPeopleInIndex = peopleInCompartmentWithProperty.get(compartmentId).get(propertyValue);
					for (final PersonId personId : scenario.getPeopleIds()) {
						MultiKey multiKey = new MultiKey(compartmentId, propertyValue);
						final boolean personInIndex = environment.personIsInPopulationIndex(personId, multiKey);
						assertEquals(expectedPeopleInIndex.contains(personId), personInIndex);
					}
				}
			}

			/*
			 * Remove the population indexes to clear the way for other tests
			 */
			for (final CompartmentId compartmentId : peopleInCompartmentWithProperty.keySet()) {
				final Map<Comparable<?>, Set<PersonId>> map = peopleInCompartmentWithProperty.get(compartmentId);
				for (final Comparable<?> propertyValue : map.keySet()) {
					MultiKey multiKey = new MultiKey(compartmentId, propertyValue);
					environment.removePopulationIndex(multiKey);
				}
			}

		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			// if the key is null
			assertModelException(() -> environment.personIsInPopulationIndex(new PersonId(1), null), SimulationErrorType.NULL_POPULATION_INDEX_KEY);

			// if the key does not correspond to an existing population
			assertModelException(() -> environment.personIsInPopulationIndex(new PersonId(1), new Object()), SimulationErrorType.UNKNOWN_POPULATION_INDEX_KEY);

			// if the person is null
			assertModelException(() -> environment.personIsInPopulationIndex(null, key), SimulationErrorType.NULL_PERSON_ID);

			// if the person is unknown
			assertModelException(() -> environment.personIsInPopulationIndex(new PersonId(-1), key), SimulationErrorType.UNKNOWN_PERSON_ID);

		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

	}

}
