package gcm.test.automated;

import static gcm.simulation.Filter.compartment;
import static gcm.simulation.Filter.region;
import static gcm.test.support.EnvironmentSupport.addStandardComponentsAndTypes;
import static gcm.test.support.EnvironmentSupport.addStandardPeople;
import static gcm.test.support.EnvironmentSupport.addStandardPropertyDefinitions;
import static gcm.test.support.EnvironmentSupport.addStandardTrackingAndScenarioId;
import static gcm.test.support.EnvironmentSupport.addTaskPlanContainer;
import static gcm.test.support.EnvironmentSupport.assertAllPlansExecuted;
import static gcm.test.support.EnvironmentSupport.generateIncompatiblePropertyValue;
import static gcm.test.support.EnvironmentSupport.generatePropertyValue;
import static gcm.test.support.EnvironmentSupport.getRandomGenerator;
import static gcm.test.support.EnvironmentSupport.getReplication;
import static gcm.test.support.ExceptionAssertion.assertModelException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.List;
import java.util.Optional;
import java.util.Set;

import org.apache.commons.math3.random.RandomGenerator;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import gcm.replication.Replication;
import gcm.scenario.CompartmentId;
import gcm.scenario.GroupId;
import gcm.scenario.GroupPropertyId;
import gcm.scenario.GroupTypeId;
import gcm.scenario.PersonId;
import gcm.scenario.PersonPropertyId;
import gcm.scenario.PropertyDefinition;
import gcm.scenario.RegionId;
import gcm.scenario.Scenario;
import gcm.scenario.ScenarioBuilder;
import gcm.scenario.UnstructuredScenarioBuilder;
import gcm.simulation.Environment;
import gcm.simulation.EnvironmentImpl;
import gcm.simulation.Filter;
import gcm.simulation.Simulation;
import gcm.simulation.SimulationErrorType;
import gcm.test.support.EnvironmentSupport;
import gcm.test.support.SeedProvider;
import gcm.test.support.TaskPlanContainer;
import gcm.test.support.TestCompartmentId;
import gcm.test.support.TestGlobalComponentId;
import gcm.test.support.TestGlobalPropertyId;
import gcm.test.support.TestGroupTypeId;
import gcm.test.support.TestMaterialsProducerId;
import gcm.test.support.TestMaterialsProducerPropertyId;
import gcm.test.support.TestPersonPropertyId;
import gcm.test.support.TestRegionId;
import gcm.test.support.TestRegionPropertyId;
import gcm.test.support.EnvironmentSupport.PropertyAssignmentPolicy;
import gcm.util.annotations.UnitTest;

@UnitTest(target = EnvironmentImpl.class)

public class AT_EnvironmentImpl_21 {

	private static SeedProvider SEED_PROVIDER;

	@BeforeClass
	public static void beforeClass() {
		SEED_PROVIDER = new SeedProvider(EnvironmentSupport.getMetaSeed(21));
	}

	/**
	 * Internal test(not part of public tests) to show that there are no large
	 * gaps in the seed cases generated by the SeedProvider.
	 */
	@AfterClass
	public static void afterClass() {
		//System.out.println(SEED_PROVIDER.generateUnusedSeedReport());
	}

	/**
	 * Tests
	 * {@link Environment#setGlobalPropertyValue(gcm.scenario.GlobalPropertyId, Object)}
	 */
	@Test
	public void testSetGlobalPropertyValue() {
		/*
		 * For each global property definition, show that the current value is
		 * the default value we expect from the property definition. Then show
		 * that after we change the value.
		 */

		long seed = SEED_PROVIDER.getSeedValue(0);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.TRUE, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			for (final TestGlobalPropertyId propertyID : TestGlobalPropertyId.values()) {
				/*
				 * We first assert that the current value of the property is the
				 * default for the definition.
				 */

				final PropertyDefinition propertyDefinition = environment.getGlobalPropertyDefinition(propertyID);
				assertTrue(propertyDefinition.getDefaultValue().isPresent());
				final Object expectedPropertyValue = propertyDefinition.getDefaultValue().get();
				final Object actualPropertyValue = environment.getGlobalPropertyValue(propertyID);
				assertEquals(expectedPropertyValue, actualPropertyValue);

				Object updatedPropertyValue = null;
				while ((updatedPropertyValue == null) || updatedPropertyValue.equals(actualPropertyValue)) {
					updatedPropertyValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());
				}
				environment.setGlobalPropertyValue(propertyID, updatedPropertyValue);
				final Object retrievedPropertyValue = environment.getGlobalPropertyValue(propertyID);
				assertEquals(updatedPropertyValue, retrievedPropertyValue);
			}

		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			final PropertyDefinition propertyDefinition = environment.getGlobalPropertyDefinition(TestGlobalPropertyId.Global_Property_1);
			final Object propertyValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());
			final Object inconsistentPropertyValue = generateIncompatiblePropertyValue(propertyDefinition, environment.getRandomGenerator());
			// if the property id is null
			assertModelException(() -> environment.setGlobalPropertyValue(null, propertyValue), SimulationErrorType.NULL_GLOBAL_PROPERTY_ID);
			// if the property id is unknown
			assertModelException(() -> environment.setGlobalPropertyValue(TestGlobalPropertyId.getUnknownGlobalPropertyId(), propertyValue), SimulationErrorType.UNKNOWN_GLOBAL_PROPERTY_ID);
			// if the value is null
			assertModelException(() -> environment.setGlobalPropertyValue(TestGlobalPropertyId.Global_Property_1, null), SimulationErrorType.NULL_GLOBAL_PROPERTY_VALUE);
			// if the value is incompatible with the defined type for
			// the property
			assertModelException(() -> environment.setGlobalPropertyValue(TestGlobalPropertyId.Global_Property_1, inconsistentPropertyValue), SimulationErrorType.INCOMPATIBLE_VALUE);

		});

		taskPlanContainer.addTaskPlan(TestRegionId.REGION_1, testTime++, (environment) -> {

			final PropertyDefinition propertyDefinition = environment.getGlobalPropertyDefinition(TestGlobalPropertyId.Global_Property_1);
			final Object propertyValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());

			// if the invoker is not a global component
			assertModelException(() -> environment.setGlobalPropertyValue(TestGlobalPropertyId.Global_Property_1, propertyValue), SimulationErrorType.COMPONENT_LACKS_PERMISSION);

		});

		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			final PropertyDefinition propertyDefinition = environment.getGlobalPropertyDefinition(TestGlobalPropertyId.Global_Property_1);
			final Object propertyValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());
			// if the invoker is not a global component
			assertModelException(() -> environment.setGlobalPropertyValue(TestGlobalPropertyId.Global_Property_1, propertyValue), SimulationErrorType.COMPONENT_LACKS_PERMISSION);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		/*
		 * We will need to create a new TestPlanExecutor instance where all
		 * property definitions have been defined to not allow override values.
		 */

		seed = SEED_PROVIDER.getSeedValue(1);
		randomGenerator = getRandomGenerator(seed);

		scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.FALSE, randomGenerator);

		taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		scenario = scenarioBuilder.build();

		replication = getReplication(randomGenerator);

		testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			final PropertyDefinition propertyDefinition = environment.getGlobalPropertyDefinition(TestGlobalPropertyId.Global_Property_1);
			final Object propertyValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());
			// if the property has been defined as immutable
			assertModelException(() -> environment.setGlobalPropertyValue(TestGlobalPropertyId.Global_Property_1, propertyValue), SimulationErrorType.IMMUTABLE_VALUE);

		});

		simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

	}

	/**
	 * Tests
	 * {@link Environment#setGroupPropertyValue(GroupId, GroupPropertyId, Object)}
	 */
	@Test
	public void testSetGroupPropertyValue() {
		/*
		 * For each group type id and group property definition, set a new
		 * property value. Test that the value we set is now reflected in the
		 * simulation.
		 */
		long seed = SEED_PROVIDER.getSeedValue(2);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.TRUE, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			final Set<GroupTypeId> groupTypeIds = environment.getGroupTypeIds();
			assertTrue(groupTypeIds.size() > 0);
			for (final GroupTypeId groupTypeId : groupTypeIds) {
				final GroupId groupId = environment.addGroup(groupTypeId);
				final Set<GroupPropertyId> groupPropertyIds = environment.getGroupPropertyIds(groupTypeId);
				assertTrue(groupPropertyIds.size() > 0);
				for (final GroupPropertyId groupPropertyId : groupPropertyIds) {
					final PropertyDefinition propertyDefinition = environment.getGroupPropertyDefinition(groupTypeId, groupPropertyId);
					final Object currentValue = environment.getGroupPropertyValue(groupId, groupPropertyId);
					/*
					 * Derive a new value that is not the same as the current
					 * value so that when we assert that the new value is now in
					 * place we are not actually seeing the old value.
					 */
					Object newValue = null;
					while (true) {
						newValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());
						if (!newValue.equals(currentValue)) {
							break;
						}
					}
					/*
					 * Set the value
					 */
					environment.setGroupPropertyValue(groupId, groupPropertyId, newValue);
					/*
					 * Test that the values agree
					 */
					final Object updatedValue = environment.getGroupPropertyValue(groupId, groupPropertyId);
					assertEquals(newValue, updatedValue);
				}
			}
			assertEquals(1, environment.getTime(), 0);

		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			// make sure that we have an existing property and group to show
			// the precondition tests are valid
			assertTrue(environment.groupExists(new GroupId(0)));
			final GroupPropertyId groupPropertyId = environment.getGroupPropertyIds(TestGroupTypeId.GROUP_TYPE_1).iterator().next();
			assertNotNull(groupPropertyId);
			final PropertyDefinition propertyDefinition = environment.getGroupPropertyDefinition(TestGroupTypeId.GROUP_TYPE_1, groupPropertyId);
			final Object propertyValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());
			final Object inconpatiblePropertyValue = generateIncompatiblePropertyValue(propertyDefinition, environment.getRandomGenerator());

			// if property id is null
			assertModelException(() -> environment.setGroupPropertyValue(new GroupId(0), null, propertyValue), SimulationErrorType.NULL_GROUP_PROPERTY_ID);
			// if property id is unknown
			assertModelException(() -> environment.setGroupPropertyValue(new GroupId(0), TestGroupTypeId.getUnknownGroupPropertyId(), propertyValue), SimulationErrorType.UNKNOWN_GROUP_PROPERTY_ID);
			// if the group id is null
			assertModelException(() -> environment.setGroupPropertyValue(null, groupPropertyId, propertyValue), SimulationErrorType.NULL_GROUP_ID);
			// if the group id is unknown
			assertModelException(() -> environment.setGroupPropertyValue(new GroupId(-1), groupPropertyId, propertyValue), SimulationErrorType.UNKNOWN_GROUP_ID);
			// if the value is null
			assertModelException(() -> environment.setGroupPropertyValue(new GroupId(0), groupPropertyId, null), SimulationErrorType.NULL_GROUP_PROPERTY_VALUE);
			// if the value is incompatible with the defined type for
			// the property
			assertModelException(() -> environment.setGroupPropertyValue(new GroupId(0), groupPropertyId, inconpatiblePropertyValue), SimulationErrorType.INCOMPATIBLE_VALUE);

		});

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_1, testTime++, (environment) -> {

			final GroupPropertyId groupPropertyId = environment.getGroupPropertyIds(TestGroupTypeId.GROUP_TYPE_1).iterator().next();
			assertNotNull(groupPropertyId);
			final PropertyDefinition propertyDefinition = environment.getGroupPropertyDefinition(TestGroupTypeId.GROUP_TYPE_1, groupPropertyId);
			final Object propertyValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());

			// if the component is not a global combonent
			assertModelException(() -> environment.setGroupPropertyValue(new GroupId(0), groupPropertyId, propertyValue), SimulationErrorType.COMPONENT_LACKS_PERMISSION);

		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		seed = SEED_PROVIDER.getSeedValue(3);
		randomGenerator = getRandomGenerator(seed);

		scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.FALSE, randomGenerator);

		taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		scenario = scenarioBuilder.build();

		replication = getReplication(randomGenerator);

		testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);
			final GroupPropertyId groupPropertyId = environment.getGroupPropertyIds(TestGroupTypeId.GROUP_TYPE_1).iterator().next();
			assertNotNull(groupPropertyId);
			final PropertyDefinition propertyDefinition = environment.getGroupPropertyDefinition(TestGroupTypeId.GROUP_TYPE_1, groupPropertyId);
			final Object propertyValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());

			// if the property has been defined as immutable
			assertModelException(() -> environment.setGroupPropertyValue(groupId, groupPropertyId, propertyValue), SimulationErrorType.IMMUTABLE_VALUE);

		});

		simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

	}

	/**
	 * Tests
	 * {@link Environment#setMaterialsProducerPropertyValue(gcm.scenario.MaterialsProducerId, gcm.scenario.MaterialsProducerPropertyId, Object)}
	 */
	@Test
	public void testSetMaterialsProducerPropertyValue() {
		/*
		 * For each materials producer and materials producer property
		 * definition, set a new property value. Test that the value we set is
		 * now reflected in the simulation.
		 */

		long seed = SEED_PROVIDER.getSeedValue(4);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.TRUE, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			for (final TestMaterialsProducerId testMaterialsProducerId : TestMaterialsProducerId.values()) {
				for (final TestMaterialsProducerPropertyId testMaterialsProducerPropertyId : TestMaterialsProducerPropertyId.values()) {
					final PropertyDefinition propertyDefinition = environment.getMaterialsProducerPropertyDefinition(testMaterialsProducerPropertyId);
					final Object currentValue = environment.getMaterialsProducerPropertyValue(testMaterialsProducerId, testMaterialsProducerPropertyId);
					/*
					 * Derive a new value that is not the same as the current
					 * value so that when we assert that the new value is now in
					 * place we are not actually seeing the old value.
					 */
					Object newValue = null;
					while (true) {
						newValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());
						if (!newValue.equals(currentValue)) {
							break;
						}
					}
					/*
					 * Set the value
					 */
					environment.setMaterialsProducerPropertyValue(testMaterialsProducerId, testMaterialsProducerPropertyId, newValue);
					/*
					 * Test that the values agree
					 */
					final Object updatedValue = environment.getMaterialsProducerPropertyValue(testMaterialsProducerId, testMaterialsProducerPropertyId);
					assertEquals(newValue, updatedValue);
				}
			}
			assertEquals(1, environment.getTime(), 0);

		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			final PropertyDefinition propertyDefinition = environment.getMaterialsProducerPropertyDefinition(TestMaterialsProducerPropertyId.MATERIALS_PRODUCER_PROPERTY_1);
			final Object propertyValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());
			final Object inconpatiblePropertyValue = generateIncompatiblePropertyValue(propertyDefinition, environment.getRandomGenerator());

			// if the materials producer id is null
			assertModelException(() -> environment.setMaterialsProducerPropertyValue(null, TestMaterialsProducerPropertyId.MATERIALS_PRODUCER_PROPERTY_1, propertyValue),
					SimulationErrorType.NULL_MATERIALS_PRODUCER_ID);
			// if the materials producer id is unknown
			assertModelException(() -> environment.setMaterialsProducerPropertyValue(TestMaterialsProducerId.getUnknownMaterialsProducerId(),
					TestMaterialsProducerPropertyId.MATERIALS_PRODUCER_PROPERTY_1, propertyValue), SimulationErrorType.UNKNOWN_MATERIALS_PRODUCER_ID);
			// if the property id is null
			assertModelException(() -> environment.setMaterialsProducerPropertyValue(TestMaterialsProducerId.MATERIALS_PRODUCER_1, null, propertyValue),
					SimulationErrorType.NULL_MATERIALS_PRODUCER_PROPERTY_ID);
			// if the property id is unknown
			assertModelException(() -> environment.setMaterialsProducerPropertyValue(TestMaterialsProducerId.MATERIALS_PRODUCER_1,
					TestMaterialsProducerPropertyId.getUnknownMaterialsProducerPropertyId(), propertyValue), SimulationErrorType.UNKNOWN_MATERIALS_PRODUCER_PROPERTY_ID);
			// if the value is null
			assertModelException(() -> environment.setMaterialsProducerPropertyValue(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialsProducerPropertyId.MATERIALS_PRODUCER_PROPERTY_1, null),
					SimulationErrorType.NULL_MATERIALS_PRODUCER_PROPERTY_VALUE);
			// if the value is incompatible with the defined type for
			// the property
			assertModelException(() -> environment.setMaterialsProducerPropertyValue(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialsProducerPropertyId.MATERIALS_PRODUCER_PROPERTY_1,
					inconpatiblePropertyValue), SimulationErrorType.INCOMPATIBLE_VALUE);

		});

		taskPlanContainer.addTaskPlan(TestMaterialsProducerId.MATERIALS_PRODUCER_2, testTime++, (environment) -> {

			final PropertyDefinition propertyDefinition = environment.getMaterialsProducerPropertyDefinition(TestMaterialsProducerPropertyId.MATERIALS_PRODUCER_PROPERTY_1);
			final Object propertyValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());

			// if the invoker is not a global component or the given
			// materials producer
			assertModelException(
					() -> environment.setMaterialsProducerPropertyValue(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialsProducerPropertyId.MATERIALS_PRODUCER_PROPERTY_1, propertyValue),
					SimulationErrorType.COMPONENT_LACKS_PERMISSION);

		});

		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {

			final PropertyDefinition propertyDefinition = environment.getMaterialsProducerPropertyDefinition(TestMaterialsProducerPropertyId.MATERIALS_PRODUCER_PROPERTY_1);
			final Object propertyValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());

			// if the invoker is not a global component or the given
			// region
			assertModelException(
					() -> environment.setMaterialsProducerPropertyValue(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialsProducerPropertyId.MATERIALS_PRODUCER_PROPERTY_1, propertyValue),
					SimulationErrorType.COMPONENT_LACKS_PERMISSION);

		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		seed = SEED_PROVIDER.getSeedValue(5);
		randomGenerator = getRandomGenerator(seed);

		scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.FALSE, randomGenerator);

		taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		scenario = scenarioBuilder.build();

		replication = getReplication(randomGenerator);

		testTime = 1;

		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {

			final PropertyDefinition propertyDefinition = environment.getMaterialsProducerPropertyDefinition(TestMaterialsProducerPropertyId.MATERIALS_PRODUCER_PROPERTY_1);
			final Object propertyValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());

			// if the property has been defined as immutable
			assertModelException(
					() -> environment.setMaterialsProducerPropertyValue(TestMaterialsProducerId.MATERIALS_PRODUCER_1, TestMaterialsProducerPropertyId.MATERIALS_PRODUCER_PROPERTY_1, propertyValue),
					SimulationErrorType.IMMUTABLE_VALUE);

		});

		simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

	}

	/**
	 * Tests {@link Environment#setPersonCompartment(PersonId, CompartmentId)}
	 */
	@Test
	public void testSetPersonCompartment() {
		/*
		 * Move each person the next compartment and assert that the person is
		 * where we expect them to be.
		 */
		final long seed = SEED_PROVIDER.getSeedValue(6);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			/*
			 * Make sure that there are actually people in the simulation so
			 * that test is actually testing something
			 */
			final List<PersonId> people = environment.getPeople();

			assertTrue(people.size() > 0);
			/*
			 * Move every person to the next region
			 */
			for (final PersonId personId : people) {

				/*
				 * Set the region for the person to the next region
				 */
				TestCompartmentId testCompartmentId = environment.getPersonCompartment(personId);
				testCompartmentId = testCompartmentId.next();
				environment.setPersonCompartment(personId, testCompartmentId);

				/*
				 * Finally show that we still agree with the environment on the
				 * person's compartment
				 */
				assertEquals(testCompartmentId, environment.getPersonCompartment(personId));
			}
		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			final Object key = new Object();
			final Filter filter = 					
					compartment(TestCompartmentId.COMPARTMENT_1).and(
					region(TestRegionId.REGION_1));					

			environment.addPopulationIndex(filter, key);
			Optional<PersonId> optional = environment.getRandomIndexedPerson(key);

			assertTrue(optional.isPresent());
			final PersonId personId = optional.get();

			// if the person id is null
			assertModelException(() -> environment.setPersonCompartment(null, TestCompartmentId.COMPARTMENT_2), SimulationErrorType.NULL_PERSON_ID);
			// if the person id is unknown
			assertModelException(() -> environment.setPersonCompartment(new PersonId(-1), TestCompartmentId.COMPARTMENT_2), SimulationErrorType.UNKNOWN_PERSON_ID);
			// if the compartment id is null
			assertModelException(() -> environment.setPersonCompartment(personId, null), SimulationErrorType.NULL_COMPARTMENT_ID);
			// if the compartment id is unknown
			assertModelException(() -> environment.setPersonCompartment(personId, TestCompartmentId.getUnknownCompartmentId()), SimulationErrorType.UNKNOWN_COMPARTMENT_ID);
			// if the compartment is the current compartment for the person
			assertModelException(() -> environment.setPersonCompartment(personId, TestCompartmentId.COMPARTMENT_1), SimulationErrorType.SAME_COMPARTMENT);

			environment.removePopulationIndex(key);
		});

		/*
		 * Show that region 1 cannot move a person in compartment 1 even though
		 * that person is in region 1
		 */
		taskPlanContainer.addTaskPlan(TestRegionId.REGION_1, testTime++, (environment) -> {

			final Object key = new Object();
			final Filter filter = 				
					compartment(TestCompartmentId.COMPARTMENT_1).and(
					region(TestRegionId.REGION_1));
					
					
			environment.addPopulationIndex(filter, key);
			Optional<PersonId> optional = environment.getRandomIndexedPerson(key);
			assertTrue(optional.isPresent());
			final PersonId personId = optional.get();

			// if the invoker is not a global component or the
			// person's current compartment
			assertModelException(() -> environment.setPersonCompartment(personId, TestCompartmentId.COMPARTMENT_2), SimulationErrorType.COMPONENT_LACKS_PERMISSION);

			environment.removePopulationIndex(key);
		});

		/*
		 * Show that compartment 2 cannot move a person in compartment 1
		 */
		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {
			final Object key = new Object();
			final Filter filter =					
					compartment(TestCompartmentId.COMPARTMENT_1).and(
					region(TestRegionId.REGION_1));
					
					
			environment.addPopulationIndex(filter, key);
			Optional<PersonId> optional = environment.getRandomIndexedPerson(key);
			assertTrue(optional.isPresent());
			final PersonId personId = optional.get();

			// if the invoker is not a global component or the
			// person's current compartment
			assertModelException(() -> environment.setPersonCompartment(personId, TestCompartmentId.COMPARTMENT_2), SimulationErrorType.COMPONENT_LACKS_PERMISSION);

			environment.removePopulationIndex(key);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests
	 * {@link Environment#setPersonPropertyValue(PersonId, PersonPropertyId, Object)}
	 */
	@Test
	public void testSetPersonPropertyValue() {
		/*
		 * For each person and person property definition, set a new property
		 * value. Test that the value we set is now reflected in the simulation.
		 */

		long seed = SEED_PROVIDER.getSeedValue(7);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.TRUE, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 0;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			for (final PersonId personId : environment.getPeople()) {
				for (final TestPersonPropertyId testPersonPropertyId : TestPersonPropertyId.values()) {
					final PropertyDefinition propertyDefinition = environment.getPersonPropertyDefinition(testPersonPropertyId);
					final Object currentValue = environment.getPersonPropertyValue(personId, testPersonPropertyId);
					/*
					 * Derive a new value that is not the same as the current
					 * value so that when we assert that the new value is now in
					 * place we are not actually seeing the old value.
					 */
					Object newValue = null;
					while (true) {
						newValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());
						if (!newValue.equals(currentValue)) {
							break;
						}
					}
					/*
					 * Set the value
					 */

					environment.setPersonPropertyValue(personId, testPersonPropertyId, newValue);
					/*
					 * Test that the values agree
					 */
					final Object updatedValue = environment.getPersonPropertyValue(personId, testPersonPropertyId);
					assertEquals(newValue, updatedValue);
				}
			}
			assertEquals(0, environment.getTime(), 0);

		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			PersonId personId = new PersonId(0);
			assertTrue(environment.personExists(personId));
			PersonPropertyId personPropertyId = TestPersonPropertyId.PERSON_PROPERTY_1;
			PropertyDefinition propertyDefinition = environment.getPersonPropertyDefinition(personPropertyId);
			Object compatiblePropertyValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());
			Object incompatiblePropertyValue = generateIncompatiblePropertyValue(propertyDefinition, environment.getRandomGenerator());

			// if the person id is null
			assertModelException(() -> environment.setPersonPropertyValue(null, personPropertyId, compatiblePropertyValue), SimulationErrorType.NULL_PERSON_ID);
			assertModelException(() -> environment.setPersonPropertyValue(new PersonId(-1), personPropertyId, compatiblePropertyValue), SimulationErrorType.UNKNOWN_PERSON_ID);
			assertModelException(() -> environment.setPersonPropertyValue(personId, null, compatiblePropertyValue), SimulationErrorType.NULL_PERSON_PROPERTY_ID);
			assertModelException(() -> environment.setPersonPropertyValue(personId, TestPersonPropertyId.getUnknownPersonPropertyId(), compatiblePropertyValue),
					SimulationErrorType.UNKNOWN_PERSON_PROPERTY_ID);
			assertModelException(() -> environment.setPersonPropertyValue(personId, personPropertyId, null), SimulationErrorType.NULL_PERSON_PROPERTY_VALUE);
			assertModelException(() -> environment.setPersonPropertyValue(personId, personPropertyId, incompatiblePropertyValue), SimulationErrorType.INCOMPATIBLE_VALUE);

		});

		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_2, testTime++, (environment) -> {

			List<PersonId> peopleInCompartment = environment.getPeopleInCompartment(TestCompartmentId.COMPARTMENT_1);
			assertTrue(peopleInCompartment.size() > 0);
			PersonId personId = peopleInCompartment.get(0);

			PersonPropertyId personPropertyId = TestPersonPropertyId.PERSON_PROPERTY_1;
			PropertyDefinition propertyDefinition = environment.getPersonPropertyDefinition(personPropertyId);
			Object compatiblePropertyValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());
			assertModelException(() -> environment.setPersonPropertyValue(personId, personPropertyId, compatiblePropertyValue), SimulationErrorType.COMPONENT_LACKS_PERMISSION);

		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		seed = SEED_PROVIDER.getSeedValue(8);
		randomGenerator = getRandomGenerator(seed);

		scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.FALSE, randomGenerator);

		taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		scenario = scenarioBuilder.build();

		replication = getReplication(randomGenerator);

		testTime = 0;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			assertTrue(environment.personExists(new PersonId(0)));
			PersonPropertyId personPropertyId = TestPersonPropertyId.PERSON_PROPERTY_1;
			PropertyDefinition propertyDefinition = environment.getPersonPropertyDefinition(personPropertyId);
			Object compatiblePropertyValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());
			assertModelException(() -> environment.setPersonPropertyValue(new PersonId(0), personPropertyId, compatiblePropertyValue), SimulationErrorType.IMMUTABLE_VALUE);

		});

		simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests {@link Environment#setPersonRegion(PersonId, RegionId)}
	 */
	@Test
	public void testSetPersonRegion() {
		/*
		 * Move each person the next region and assert that the person is where
		 * we expect them to be.
		 */
		final long seed = SEED_PROVIDER.getSeedValue(9);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			/*
			 * Make sure that there are people so that the test is actually
			 * testing something
			 */
			final List<PersonId> people = environment.getPeople();

			assertTrue(people.size() > 0);
			/*
			 * Move every person to the next region
			 */
			for (final PersonId personId : people) {

				/*
				 * Set the region for the person to the next region
				 */
				TestRegionId testRegionId = environment.getPersonRegion(personId);
				testRegionId = testRegionId.next();
				environment.setPersonRegion(personId, testRegionId);

				/*
				 * Finally show that we still agree with the environment on the
				 * person's region
				 */
				assertEquals(testRegionId, environment.getPersonRegion(personId));
			}
		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			final Object key = new Object();
			final Filter filter =				
					compartment(TestCompartmentId.COMPARTMENT_1).and(
					region(TestRegionId.REGION_1));					
					
			environment.addPopulationIndex(filter, key);

			final PersonId personId = environment.getRandomIndexedPerson(key).get();

			// if the person id is null
			assertModelException(() -> environment.setPersonRegion(null, TestRegionId.REGION_2), SimulationErrorType.NULL_PERSON_ID);
			// if the person id is unknown
			assertModelException(() -> environment.setPersonRegion(new PersonId(-1), TestRegionId.REGION_2), SimulationErrorType.UNKNOWN_PERSON_ID);
			// if the region id is null
			assertModelException(() -> environment.setPersonRegion(personId, null), SimulationErrorType.NULL_REGION_ID);
			// if the region id is unknown
			assertModelException(() -> environment.setPersonRegion(personId, TestRegionId.getUnknownRegionId()), SimulationErrorType.UNKNOWN_REGION_ID);
			// if the region is the current region for the person
			assertModelException(() -> environment.setPersonRegion(personId, TestRegionId.REGION_1), SimulationErrorType.SAME_REGION);

			environment.removePopulationIndex(key);
		});

		taskPlanContainer.addTaskPlan(TestRegionId.REGION_3, testTime++, (environment) -> {
			final Object key = new Object();
			final Filter filter = 					
					compartment(TestCompartmentId.COMPARTMENT_1).and(
					region(TestRegionId.REGION_1));
					
					
			environment.addPopulationIndex(filter, key);
			final PersonId personId = environment.getRandomIndexedPerson(key).get();

			// if the invoker is not a global component or the person's
			// current region
			assertModelException(() -> environment.setPersonRegion(personId, TestRegionId.REGION_2), SimulationErrorType.COMPONENT_LACKS_PERMISSION);

			environment.removePopulationIndex(key);
		});

		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {
			final Object key = new Object();
			
			final Filter filter = 					
					compartment(TestCompartmentId.COMPARTMENT_1).and(
					region(TestRegionId.REGION_1));
					
			environment.addPopulationIndex(filter, key);
			final PersonId personId = environment.getRandomIndexedPerson(key).get();

			// if the invoker is not a global component or the person's
			// current region
			assertModelException(() -> environment.setPersonRegion(personId, TestRegionId.REGION_2), SimulationErrorType.COMPONENT_LACKS_PERMISSION);

			environment.removePopulationIndex(key);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests
	 * {@link Environment#setRegionPropertyValue(RegionId, gcm.scenario.RegionPropertyId, Object)}
	 */
	@Test
	public void testSetRegionPropertyValue() {
		/*
		 * For each region and region property definition, set a new property
		 * value. Test that the value we set is now reflected in the simulation.
		 */
		long seed = SEED_PROVIDER.getSeedValue(10);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.TRUE, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			for (final TestRegionId testRegionId : TestRegionId.values()) {
				for (final TestRegionPropertyId testRegionPropertyId : TestRegionPropertyId.values()) {
					final PropertyDefinition propertyDefinition = environment.getRegionPropertyDefinition(testRegionPropertyId);
					final Object currentValue = environment.getRegionPropertyValue(testRegionId, testRegionPropertyId);
					/*
					 * Derive a new value that is not the same as the current
					 * value so that when we assert that the new value is now in
					 * place we are not actually seeing the old value.
					 */
					Object newValue = null;
					while (true) {
						newValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());
						if (!newValue.equals(currentValue)) {
							break;
						}
					}
					/*
					 * Set the value
					 */
					environment.setRegionPropertyValue(testRegionId, testRegionPropertyId, newValue);
					/*
					 * Test that the values agree
					 */
					final Object updatedValue = environment.getRegionPropertyValue(testRegionId, testRegionPropertyId);
					assertEquals(newValue, updatedValue);
				}
			}
			assertEquals(1, environment.getTime(), 0);

		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			final PropertyDefinition propertyDefinition = environment.getRegionPropertyDefinition(TestRegionPropertyId.REGION_PROPERTY_1);
			final Object propertyValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());
			final Object inconpatiblePropertyValue = generateIncompatiblePropertyValue(propertyDefinition, environment.getRandomGenerator());

			// if the region id is null
			assertModelException(() -> environment.setRegionPropertyValue(null, TestRegionPropertyId.REGION_PROPERTY_1, propertyValue), SimulationErrorType.NULL_REGION_ID);
			// if the region id is unknown
			assertModelException(() -> environment.setRegionPropertyValue(TestRegionId.getUnknownRegionId(), TestRegionPropertyId.REGION_PROPERTY_1, propertyValue),
					SimulationErrorType.UNKNOWN_REGION_ID);
			// if the property id is null
			assertModelException(() -> environment.setRegionPropertyValue(TestRegionId.REGION_1, null, propertyValue), SimulationErrorType.NULL_REGION_PROPERTY_ID);
			// if the property id is unknown
			assertModelException(() -> environment.setRegionPropertyValue(TestRegionId.REGION_1, TestRegionPropertyId.getUnknownRegionPropertyId(), propertyValue),
					SimulationErrorType.UNKNOWN_REGION_PROPERTY_ID);
			// if the value is null
			assertModelException(() -> environment.setRegionPropertyValue(TestRegionId.REGION_1, TestRegionPropertyId.REGION_PROPERTY_1, null), SimulationErrorType.NULL_REGION_PROPERTY_VALUE);
			// if the value is incompatible with the defined type for
			// the property
			assertModelException(() -> environment.setRegionPropertyValue(TestRegionId.REGION_1, TestRegionPropertyId.REGION_PROPERTY_1, inconpatiblePropertyValue),
					SimulationErrorType.INCOMPATIBLE_VALUE);

		});

		taskPlanContainer.addTaskPlan(TestRegionId.REGION_2, testTime++, (environment) -> {

			final PropertyDefinition propertyDefinition = environment.getRegionPropertyDefinition(TestRegionPropertyId.REGION_PROPERTY_1);
			final Object propertyValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());

			// if the invoker is not a global component or the given
			// region
			assertModelException(() -> environment.setRegionPropertyValue(TestRegionId.REGION_1, TestRegionPropertyId.REGION_PROPERTY_1, propertyValue),
					SimulationErrorType.COMPONENT_LACKS_PERMISSION);

		});

		taskPlanContainer.addTaskPlan(TestCompartmentId.COMPARTMENT_1, testTime++, (environment) -> {

			final PropertyDefinition propertyDefinition = environment.getRegionPropertyDefinition(TestRegionPropertyId.REGION_PROPERTY_1);
			final Object propertyValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());

			// if the invoker is not a global component or the given
			// region
			assertModelException(() -> environment.setRegionPropertyValue(TestRegionId.REGION_1, TestRegionPropertyId.REGION_PROPERTY_1, propertyValue),
					SimulationErrorType.COMPONENT_LACKS_PERMISSION);

		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

		seed = SEED_PROVIDER.getSeedValue(11);
		randomGenerator = getRandomGenerator(seed);

		scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.FALSE, randomGenerator);

		taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		scenario = scenarioBuilder.build();

		replication = getReplication(randomGenerator);

		testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			final PropertyDefinition propertyDefinition = environment.getRegionPropertyDefinition(TestRegionPropertyId.REGION_PROPERTY_1);
			final Object propertyValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());

			// if the property has been defined as immutable
			assertModelException(() -> environment.setRegionPropertyValue(TestRegionId.REGION_1, TestRegionPropertyId.REGION_PROPERTY_1, propertyValue), SimulationErrorType.IMMUTABLE_VALUE);

		});

		simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

	}

}
