package gcm.automated;

import static gcm.automated.support.EnvironmentSupport.addStandardComponentsAndTypes;
import static gcm.automated.support.EnvironmentSupport.addStandardPeople;
import static gcm.automated.support.EnvironmentSupport.addStandardPropertyDefinitions;
import static gcm.automated.support.EnvironmentSupport.addStandardTrackingAndScenarioId;
import static gcm.automated.support.EnvironmentSupport.addTaskPlanContainer;
import static gcm.automated.support.EnvironmentSupport.assertAllPlansExecuted;
import static gcm.automated.support.EnvironmentSupport.getRandomGenerator;
import static gcm.automated.support.EnvironmentSupport.getReplication;
import static gcm.automated.support.ExceptionAssertion.assertModelException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Optional;

import org.apache.commons.math3.random.RandomGenerator;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import gcm.automated.support.EnvironmentSupport;
import gcm.automated.support.EnvironmentSupport.PropertyAssignmentPolicy;
import gcm.automated.support.SeedProvider;
import gcm.automated.support.TaskPlanContainer;
import gcm.automated.support.TestGlobalComponentId;
import gcm.automated.support.TestGroupTypeId;
import gcm.replication.Replication;
import gcm.scenario.GroupId;
import gcm.scenario.PersonId;
import gcm.scenario.RandomNumberGeneratorId;
import gcm.scenario.Scenario;
import gcm.scenario.ScenarioBuilder;
import gcm.scenario.UnstructuredScenarioBuilder;
import gcm.simulation.EnvironmentImpl;
import gcm.simulation.ObservableEnvironment;
import gcm.simulation.Simulation;
import gcm.simulation.SimulationErrorType;
import gcm.simulation.partition.LabelSetInfo;
import gcm.simulation.partition.LabelSetWeightingFunction;
import gcm.util.annotations.UnitTest;
import gcm.util.annotations.UnitTestMethod;

@UnitTest(target = EnvironmentImpl.class)

public class AT_EnvironmentImpl_26 {

	private static SeedProvider SEED_PROVIDER;

	@BeforeClass
	public static void beforeClass() {
		SEED_PROVIDER = new SeedProvider(EnvironmentSupport.getMetaSeed(26));
	}

	/**
	 * Internal test(not part of public tests) to show that there are no large gaps
	 * in the seed cases generated by the SeedProvider.
	 */
	@AfterClass
	public static void afterClass() {
		System.out
				.println(AT_EnvironmentImpl_26.class.getSimpleName() + " " + SEED_PROVIDER.generateUnusedSeedReport());
	}

	/*
	 * Utility class for getting random people from population indices
	 */
	private static class Counter {
		int count;
	}


	private static double getWeight(ObservableEnvironment observableEnvironment, LabelSetInfo labelSetInfo) {
		//labelSetInfo.getCompartmentLabel()
		return 1.0;
	}
	
	private static double getZeroWeight(ObservableEnvironment observableEnvironment, LabelSetInfo labelSetInfo) {
		return 0;
	}

	/**
	 * Tests
	 * {@link EnvironmentImpl#getRandomPartitionedPersonIdFromLabelWeightAndGenerator(Object, LabelSetWeightingFunction, RandomNumberGeneratorId)}
	 */
	@Test
	@UnitTestMethod(name = "getRandomPartitionedPersonIdFromLabelWeightAndGenerator", args = { Object.class,
			LabelSetWeightingFunction.class, RandomNumberGeneratorId.class })
	public void testGetRandomPartitionedPersonIdFromLabelWeightAndGenerator() {

		/*
		 * Assert that group contacts via MonoWeightingFunctions work properly
		 */

		final long seed = SEED_PROVIDER.getSeedValue(0);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);
		RandomNumberGeneratorId randomNumberGeneratorId = new RandomNumberGeneratorId() {
		};
		scenarioBuilder.addRandomNumberGeneratorId(randomNumberGeneratorId);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 0;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			//TODO -- create the partition
			/*
			 * Add a group
			 */
			final GroupId groupId = environment.addGroup(TestGroupTypeId.GROUP_TYPE_1);

			final int groupSize = 20;

			/*
			 * Add the first 20 people to the group
			 */
			for (int personIndex = 0; personIndex < groupSize; personIndex++) {
				PersonId personId = new PersonId(personIndex);
				environment.addPersonToGroup(personId, groupId);
			}

			/*
			 * Force the random selection of a person from the group to person 3
			 */
			Optional<PersonId> opt = environment.getMonoWeightedGroupContact(groupId,
					EnvironmentSupport::getPerson3MonoWeight);
			assertTrue(opt.isPresent());
			assertEquals(3, opt.get().getValue());

			// use a uniform distribution with 10000 repetitions

			final Map<Integer, Counter> hits = new LinkedHashMap<>();
			for (int personId = 0; personId < groupSize; personId++) {
				hits.put(personId, new Counter());
			}
			for (int i = 0; i < 10000; i++) {
				opt = environment.getMonoWeightedGroupContact(groupId, EnvironmentSupport::getConstantMonoWeight);
				assertTrue(opt.isPresent());
				hits.get(opt.get().getValue()).count++;
			}
			// show that each person was selected about 500 times
			for (final Integer personId : hits.keySet()) {
				final Counter counter = hits.get(personId);
				assertTrue(counter.count > 400);
				assertTrue(counter.count < 600);
			}

		});

		// show that a weighting function that returns all zeros will result in
		// an optional where no value is present
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			
			Object key = "key";
			
			//TODO -- create the partition
			
			Optional<PersonId> opt = environment.getRandomPartitionedPersonIdFromLabelWeightAndGenerator(key,
					AT_EnvironmentImpl_26::getZeroWeight,randomNumberGeneratorId);
			assertTrue(!opt.isPresent());
		});

		// test preconditions
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			RandomNumberGeneratorId unknownRandomNumberGeneratorId = new RandomNumberGeneratorId() {
			};

			Object key = "key";
			Object badKey = "badKey";
			
			//TODO -- create the partition

			// if the key is null
			assertModelException(
					() -> environment.getRandomPartitionedPersonIdFromLabelWeightAndGenerator(null,
							AT_EnvironmentImpl_26::getWeight, randomNumberGeneratorId),
					SimulationErrorType.NULL_POPULATION_PARTITION_KEY);


			// if the key does not correspond to an existing population partition
			assertModelException(
					() -> environment.getRandomPartitionedPersonIdFromLabelWeightAndGenerator(badKey,
							AT_EnvironmentImpl_26::getWeight, randomNumberGeneratorId),
					SimulationErrorType.UNKNOWN_POPULATION_PARTITION_KEY);	
			

			// if the weighting function is null
			assertModelException(
					() -> environment.getRandomPartitionedPersonIdFromLabelWeightAndGenerator(key,
							null, randomNumberGeneratorId),
					SimulationErrorType.NULL_WEIGHTING_FUNCTION);	

			

			//if the randomNumberGeneratorId is null
			
			assertModelException(
					() -> environment.getRandomPartitionedPersonIdFromLabelWeightAndGenerator(key,
							AT_EnvironmentImpl_26::getWeight, null),
					SimulationErrorType.NULL_RANDOM_NUMBER_GENERATOR_ID);	
			

			//if the randomNumberGeneratorId does not correspond to an existing random Number Generator Id in the scenario		
			assertModelException(
					() -> environment.getRandomPartitionedPersonIdFromLabelWeightAndGenerator(key,
							AT_EnvironmentImpl_26::getWeight, unknownRandomNumberGeneratorId),
					SimulationErrorType.UNKNOWN_RANDOM_NUMBER_GENERATOR_ID);			
			

		});
		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

}
