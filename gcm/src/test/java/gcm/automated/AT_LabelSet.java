package gcm.automated;

import static gcm.automated.support.EnvironmentSupport.getRandomGenerator;
import static gcm.automated.support.ExceptionAssertion.assertException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.LinkedHashSet;
import java.util.Set;

import org.apache.commons.math3.random.RandomGenerator;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import gcm.automated.support.SeedProvider;
import gcm.automated.support.TestPersonPropertyId;
import gcm.automated.support.TestResourceId;
import gcm.scenario.PersonPropertyId;
import gcm.scenario.ResourceId;
import gcm.simulation.PopulationPartitionQuery;
import gcm.util.annotations.UnitTest;
import gcm.util.annotations.UnitTestMethod;

/**
 * Test class for {@link PopulationPartitionQuery}
 * 
 * @author Shawn Hatch
 *
 */
@UnitTest(target = PopulationPartitionQuery.class)

public class AT_PopulationPartitionQuery {
	private static SeedProvider SEED_PROVIDER;

	@BeforeClass
	public static void beforeClass() {
		SEED_PROVIDER = new SeedProvider(346345534578886785L);
	}

	/**
	 * Internal test(not part of public tests) to show that there are no large gaps
	 * in the seed cases generated by the SeedProvider.
	 */
	@AfterClass
	public static void afterClass() {
//		System.out.println(
//				AT_PopulationPartitionQuery.class.getSimpleName() + " " + SEED_PROVIDER.generateUnusedSeedReport());
	}

	/**
	 * Tests {@linkplain PopulationPartitionQuery#getPersonPropertyIds()
	 */
	@Test
	@UnitTestMethod(name = "getPersonPropertyIds", args = {})
	public void testGetPersonPropertyIds() {
		final long seed = SEED_PROVIDER.getSeedValue(1);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		PopulationPartitionQuery.Builder builder = PopulationPartitionQuery.builder();

		for (int i = 0; i < 20; i++) {
			Set<PersonPropertyId> expectedPersonPropertyIds = new LinkedHashSet<>();

			for (TestPersonPropertyId testPersonPropertyId : TestPersonPropertyId.values()) {
				if (randomGenerator.nextBoolean()) {
					builder.setPersonPropertyLabel(testPersonPropertyId, "label");
					expectedPersonPropertyIds.add(testPersonPropertyId);
				}
			}

			PopulationPartitionQuery populationPartitionQuery = builder.build();
			Set<PersonPropertyId> actualPersonPropertyIds = populationPartitionQuery.getPersonPropertyIds();
			assertEquals(expectedPersonPropertyIds, actualPersonPropertyIds);
		}
	}

	/**
	 * Tests {@linkplain PopulationPartitionQuery#builder()
	 */
	@Test
	@UnitTestMethod(name = "builder", args = {})
	public void testBuilder() {

		PopulationPartitionQuery populationPartitionQuery = //
				PopulationPartitionQuery.builder()//
						.setCompartmentLabel("compartment")//
						.setRegionLabel("region")//
						.setGroupLabel("group")//
						.setPersonPropertyLabel(TestPersonPropertyId.PERSON_PROPERTY_1, "prop1")//
						.setPersonPropertyLabel(TestPersonPropertyId.PERSON_PROPERTY_2, 45)//
						.setPersonResourceLabel(TestResourceId.RESOURCE2, 2342L)//
						.build();//

		assertNotNull(populationPartitionQuery);

		// precondition tests
		assertException(() -> {
			PopulationPartitionQuery.builder()//
					.setPersonPropertyLabel(null, "label")//
					.build();//
		}, RuntimeException.class);

		assertException(() -> {
			PopulationPartitionQuery.builder()//
					.setPersonResourceLabel(null, "label")//
					.build();//
		}, RuntimeException.class);

	}

	/**
	 * Tests {@linkplain PopulationPartitionQuery#getPersonResourceIds()
	 */
	@Test
	@UnitTestMethod(name = "getPersonResourceIds", args = {})
	public void testGetPersonResourceIds() {
		final long seed = SEED_PROVIDER.getSeedValue(0);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		PopulationPartitionQuery.Builder builder = PopulationPartitionQuery.builder();

		for (int i = 0; i < 20; i++) {
			Set<ResourceId> expectedResourceIds = new LinkedHashSet<>();

			for (TestResourceId testResourceId : TestResourceId.values()) {
				if (randomGenerator.nextBoolean()) {
					builder.setPersonResourceLabel(testResourceId, "label");
					expectedResourceIds.add(testResourceId);
				}
			}

			PopulationPartitionQuery populationPartitionQuery = builder.build();
			Set<ResourceId> actualResourceIds = populationPartitionQuery.getPersonResourceIds();
			assertEquals(expectedResourceIds, actualResourceIds);
		}

	}

	/**
	 * Tests {@linkplain PopulationPartitionQuery#getGroupLabel()
	 */
	@Test
	@UnitTestMethod(name = "getGroupLabel", args = {})
	public void testGetGroupLabel() {
		Object expectedGroupLabel = "Group Label";

		PopulationPartitionQuery populationPartitionQuery = //
				PopulationPartitionQuery.builder()//
						.setGroupLabel(expectedGroupLabel)//
						.build();//
		Object actualGroupLabel = populationPartitionQuery.getGroupLabel();
		assertEquals(expectedGroupLabel, actualGroupLabel);
	}

	/**
	 * Tests {@linkplain PopulationPartitionQuery#getRegionLabel()
	 */
	@Test
	@UnitTestMethod(name = "getRegionLabel", args = {})
	public void testGetRegionLabel() {
		Object expectedRegionLabel = "Region Label";

		PopulationPartitionQuery populationPartitionQuery = //
				PopulationPartitionQuery.builder()//
						.setRegionLabel(expectedRegionLabel)//
						.build();//
		Object actualRegionLabel = populationPartitionQuery.getRegionLabel();
		assertEquals(expectedRegionLabel, actualRegionLabel);
	}

	/**
	 * Tests {@linkplain PopulationPartitionQuery#getCompartmentLabel()
	 */
	@Test
	@UnitTestMethod(name = "getCompartmentLabel", args = {})
	public void testGetCompartmentLabel() {
		Object expectedCompartmentLabel = "Compartment Label";

		PopulationPartitionQuery populationPartitionQuery = //
				PopulationPartitionQuery.builder()//
						.setCompartmentLabel(expectedCompartmentLabel)//
						.build();//
		Object actualCompartmentLabel = populationPartitionQuery.getCompartmentLabel();
		assertEquals(expectedCompartmentLabel, actualCompartmentLabel);
	}

	/**
	 * Tests {@linkplain
	 * PopulationPartitionQuery#getPersonPropertyLabel(gcm.scenario.PersonPropertyId)
	 */
	@Test
	@UnitTestMethod(name = "getPersonPropertyLabel", args = { PersonPropertyId.class })
	public void testGetPersonPropertyLabel() {
		PopulationPartitionQuery.Builder builder = PopulationPartitionQuery.builder();

		for (TestPersonPropertyId testPersonPropertyId : TestPersonPropertyId.values()) {
			builder.setPersonPropertyLabel(testPersonPropertyId, testPersonPropertyId.toString());
		}

		PopulationPartitionQuery populationPartitionQuery = builder.build();

		for (TestPersonPropertyId testPersonPropertyId : TestPersonPropertyId.values()) {
			Object expectedPersonPropertyLabel = testPersonPropertyId.toString();
			Object actualPersonPropertyLabel = populationPartitionQuery.getPersonPropertyLabel(testPersonPropertyId);
			assertEquals(expectedPersonPropertyLabel, actualPersonPropertyLabel);
		}
	}

	/**
	 * Tests {@linkplain PopulationPartitionQuery#getPersonResourceLabel(ResourceId)
	 */
	@Test
	@UnitTestMethod(name = "getPersonResourceLabel", args = { ResourceId.class })
	public void testGetPersonResourceLabel() {
		PopulationPartitionQuery.Builder builder = PopulationPartitionQuery.builder();

		for (TestResourceId testResourceId : TestResourceId.values()) {
			builder.setPersonResourceLabel(testResourceId, testResourceId.toString());
		}

		PopulationPartitionQuery populationPartitionQuery = builder.build();

		for (TestResourceId testResourceId : TestResourceId.values()) {
			Object expectedResourceLabel = testResourceId.toString();
			Object actualResourceLabel = populationPartitionQuery.getPersonResourceLabel(testResourceId);
			assertEquals(expectedResourceLabel, actualResourceLabel);
		}
	}

	/**
	 * Tests {@linkplain PopulationPartitionQuery#equals(Object)
	 */
	@Test
	@UnitTestMethod(name = "equals", args = { Object.class })
	public void testEquals() {
		PopulationPartitionQuery partitionQuery1 = PopulationPartitionQuery.builder()
				.setCompartmentLabel("compartment label").build();

		PopulationPartitionQuery partitionQuery2 = PopulationPartitionQuery.builder()
				.setCompartmentLabel("compartment label").build();

		PopulationPartitionQuery partitionQuery3 = PopulationPartitionQuery.builder()
				.setRegionLabel("compartment label").build();

		assertFalse(partitionQuery1 == partitionQuery2);
		assertTrue(partitionQuery1.equals(partitionQuery1));
		assertTrue(partitionQuery1.equals(partitionQuery2));
		assertTrue(partitionQuery2.equals(partitionQuery1));
		assertFalse(partitionQuery1.equals(partitionQuery3));

	}

	/**
	 * Tests {@linkplain PopulationPartitionQuery#hashCode()
	 */
	@Test
	@UnitTestMethod(name = "hashCode", args = {})
	public void testHashCode() {
		PopulationPartitionQuery partitionQuery1 = PopulationPartitionQuery.builder()
				.setCompartmentLabel("compartment label").build();

		PopulationPartitionQuery partitionQuery2 = PopulationPartitionQuery.builder()
				.setCompartmentLabel("compartment label").build();
		
		assertFalse(partitionQuery1 == partitionQuery2);
		assertEquals(partitionQuery1.hashCode(), partitionQuery2.hashCode());
	}

}
