package gcm.automated;

import static gcm.automated.support.EnvironmentSupport.getRandomGenerator;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.util.FastMath;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import gcm.automated.support.SeedProvider;
import gcm.util.annotations.UnitTest;
import gcm.util.spherical.SphericalPoint;
import gcm.util.vector.MutableVector3D;
import gcm.util.vector.Vector3D;

/**
 * Test class for {@link SphericalPoint}
 * 
 * @author Shawn Hatch
 *
 */
@UnitTest(target = SphericalPoint.class)
public class AT_SphericalPoint {

	private static SeedProvider SEED_PROVIDER;

	@BeforeClass
	public static void beforeClass() {
		SEED_PROVIDER = new SeedProvider(341745979674534L);
	}

	/**
	 * Internal test(not part of public tests) to show that there are no large
	 * gaps in the seed cases generated by the SeedProvider.
	 */
	@AfterClass
	public static void afterClass() {
//		 System.out.println(AT_SphericalPoint.class.getSimpleName() + " " +
//		 SEED_PROVIDER.generateUnusedSeedReport());
	}

	/**
	 * Tests
	 * {@link SphericalPoint#SphericalPoint(gcm.util.vector.MutableVector3D)}
	 * 
	 * Tests {@link SphericalPoint#SphericalPoint(gcm.util.vector.Vector3D)}
	 */
	@Test
	public void testConstructors() {
		final long seed = SEED_PROVIDER.getSeedValue(0);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {
			double x = randomGenerator.nextDouble() * 2 - 1;
			double y = randomGenerator.nextDouble() * 2 - 1;
			double z = randomGenerator.nextDouble() * 2 - 1;

			double length = FastMath.sqrt(x * x + y * y + z * z);
			SphericalPoint sphericalPoint = new SphericalPoint(new MutableVector3D(x, y, z));

			assertTrue(FastMath.abs(x / length - sphericalPoint.getPosition().getX()) < Vector3D.NORMAL_LENGTH_TOLERANCE);
			assertTrue(FastMath.abs(y / length - sphericalPoint.getPosition().getY()) < Vector3D.NORMAL_LENGTH_TOLERANCE);
			assertTrue(FastMath.abs(z / length - sphericalPoint.getPosition().getZ()) < Vector3D.NORMAL_LENGTH_TOLERANCE);

			Vector3D v = new Vector3D(x, y, z);
			sphericalPoint = new SphericalPoint(v);
			v = v.normalize();
			Vector3D u = sphericalPoint.getPosition();
			assertEquals(v, u);
		}

	}

	/**
	 * Tests {@link SphericalPoint#getPosition()}
	 */
	@Test
	public void testGetPosition() {
		final long seed = SEED_PROVIDER.getSeedValue(1);
		for (int i = 0; i < 100; i++) {
			RandomGenerator randomGenerator = getRandomGenerator(seed);
			double x = randomGenerator.nextDouble() * 2 - 1;
			double y = randomGenerator.nextDouble() * 2 - 1;
			double z = randomGenerator.nextDouble() * 2 - 1;

			Vector3D v = new Vector3D(x, y, z);
			SphericalPoint sphericalPoint = new SphericalPoint(v);
			v = v.normalize();
			Vector3D u = sphericalPoint.getPosition();
			assertEquals(v, u);
		}

	}
	
	/**
	 * Tests {@link SphericalPoint#toString()}
	 */
	@Test
	public void testToString() {
		final long seed = SEED_PROVIDER.getSeedValue(2);

		
		for (int i = 0; i < 100; i++) {
			RandomGenerator randomGenerator = getRandomGenerator(seed);
			double x = randomGenerator.nextDouble() * 2 - 1;
			double y = randomGenerator.nextDouble() * 2 - 1;
			double z = randomGenerator.nextDouble() * 2 - 1;

			Vector3D v = new Vector3D(x, y, z);
			SphericalPoint sphericalPoint = new SphericalPoint(v);
			v = v.normalize();
			
			String expected = v.toString();
			expected = "SphericalPoint [position="+expected+"]";
			
			String actual = sphericalPoint.toString();
			assertEquals(expected, actual);
		}

	}

}
