package gcm.test.automated;

import static gcm.test.support.EnvironmentSupport.getRandomGenerator;
import static gcm.test.support.ExceptionAssertion.assertException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import org.apache.commons.math3.random.RandomGenerator;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import gcm.test.support.SeedProvider;
import gcm.util.annotations.UnitTest;
import gcm.util.earth.ECC;
import gcm.util.vector.MutableVector3D;

/**
 * Test class for {@link ECC}
 * 
 * @author Shawn Hatch
 *
 */
@UnitTest(target = ECC.class)
public class AT_ECC {
	private static SeedProvider SEED_PROVIDER;

	private static final double TOLERANCE = 0.0001;

	@BeforeClass
	public static void beforeClass() {
		SEED_PROVIDER = new SeedProvider(7854457791230L);
	}

	/**
	 * Internal test(not part of public tests) to show that there are no large
	 * gaps in the seed cases generated by the SeedProvider.
	 */
	@AfterClass
	public static void afterClass() {
		// System.out.println(AT_ECC.class.getSimpleName() + " " +
		// SEED_PROVIDER.generateUnusedSeedReport());
	}

	/**
	 * Tests {@link ECC#getX()}
	 */
	@Test
	public void testGetX() {
		final long seed = SEED_PROVIDER.getSeedValue(0);
		RandomGenerator randomGenerator = getRandomGenerator(seed);
		for (int i = 0; i < 100; i++) {
			double x = randomGenerator.nextDouble() * 1_000_000 - 500_000;
			double y = 0;
			double z = 0;
			ECC ecc = new ECC(x, y, z);
			assertEquals(x, ecc.getX(), TOLERANCE);
		}
	}

	/**
	 * Tests {@link ECC#getY()}
	 */
	@Test
	public void testGetY() {
		final long seed = SEED_PROVIDER.getSeedValue(1);
		RandomGenerator randomGenerator = getRandomGenerator(seed);
		for (int i = 0; i < 100; i++) {
			double x = 0;
			double y = randomGenerator.nextDouble() * 1_000_000 - 500_000;
			double z = 0;
			ECC ecc = new ECC(x, y, z);
			assertEquals(y, ecc.getY(), TOLERANCE);
		}
	}

	/**
	 * Tests {@link ECC#getZ()}
	 */
	@Test
	public void testGetZ() {
		final long seed = SEED_PROVIDER.getSeedValue(2);
		RandomGenerator randomGenerator = getRandomGenerator(seed);
		for (int i = 0; i < 100; i++) {
			double x = 0;
			double y = 0;
			double z = randomGenerator.nextDouble() * 1_000_000 - 500_000;
			ECC ecc = new ECC(x, y, z);
			assertEquals(z, ecc.getZ(), TOLERANCE);
		}
	}

	/**
	 * Tests {@link ECC#toString()}
	 */
	@Test
	public void testToString() {
		ECC ecc = new ECC(12344321, 653778456, -345341000);
		assertEquals("ECC [x=1.2344321E7, y=6.53778456E8, z=-3.45341E8]", ecc.toString());
	}

	/**
	 * Tests {@link ECC#hashCode()}
	 */
	@Test
	public void testHashCode() {

		// Show equal objects have equal hash codes
		final long seed = SEED_PROVIDER.getSeedValue(3);
		RandomGenerator randomGenerator = getRandomGenerator(seed);
		for (int i = 0; i < 100; i++) {
			double x = randomGenerator.nextDouble() * 1_000_000 - 500_000;
			double y = randomGenerator.nextDouble() * 1_000_000 - 500_000;
			double z = randomGenerator.nextDouble() * 1_000_000 - 500_000;
			ECC ecc1 = new ECC(x, y, z);
			ECC ecc2 = new ECC(x, y, z);
			assertEquals(ecc1.hashCode(), ecc2.hashCode());
		}

	}

	/**
	 * Tests {@link ECC#equals(Object)}
	 */
	@Test
	public void testEquals() {
		final long seed = SEED_PROVIDER.getSeedValue(4);
		RandomGenerator randomGenerator = getRandomGenerator(seed);
		for (int i = 0; i < 100; i++) {
			double x = randomGenerator.nextDouble() * 1_000_000 - 500_000;
			double y = randomGenerator.nextDouble() * 1_000_000 - 500_000;
			double z = randomGenerator.nextDouble() * 1_000_000 - 500_000;
			ECC ecc1 = new ECC(x, y, z);
			ECC ecc2 = new ECC(x, y, z);
			ECC ecc3 = new ECC(x, y, z);

			// reflexive
			assertEquals(ecc2, ecc1);

			// associative
			assertEquals(ecc1, ecc2);
			assertEquals(ecc2, ecc1);

			// transitive
			assertEquals(ecc1, ecc3);
			assertEquals(ecc2, ecc3);
		}
	}

	/**
	 * Tests {@link ECC constructors}
	 */
	@SuppressWarnings("unused")
	@Test
	public void testConstructors() {
		final long seed = SEED_PROVIDER.getSeedValue(5);
		RandomGenerator randomGenerator = getRandomGenerator(seed);
		for (int i = 0; i < 100; i++) {
			double x = randomGenerator.nextDouble() * 1_000_000 - 500_000;
			double y = randomGenerator.nextDouble() * 1_000_000 - 500_000;
			double z = randomGenerator.nextDouble() * 1_000_000 - 500_000;

			MutableVector3D v = new MutableVector3D(x, y, z);
			ECC ecc = new ECC(v);
			assertEquals(x, ecc.getX(), TOLERANCE);
			assertEquals(y, ecc.getY(), TOLERANCE);
			assertEquals(z, ecc.getZ(), TOLERANCE);
		}

		// pre-condition tests
		assertException(() -> {
			MutableVector3D v = null;
			new ECC(v);
		}, RuntimeException.class);

	}

	/**
	 * Tests {@link ECC#toVector3D()}
	 */
	@Test
	public void testToVector3D() {
		final long seed = SEED_PROVIDER.getSeedValue(6);
		RandomGenerator randomGenerator = getRandomGenerator(seed);
		for (int i = 0; i < 100; i++) {
			double x = randomGenerator.nextDouble() * 1_000_000 - 500_000;
			double y = randomGenerator.nextDouble() * 1_000_000 - 500_000;
			double z = randomGenerator.nextDouble() * 1_000_000 - 500_000;
			ECC ecc = new ECC(x, y, z);
			MutableVector3D v = ecc.toVector3D();
			assertNotNull(v);
			assertEquals(ecc.getX(), v.getX(), TOLERANCE);
			assertEquals(ecc.getY(), v.getY(), TOLERANCE);
			assertEquals(ecc.getZ(), v.getZ(), TOLERANCE);
		}
	}

	/**
	 * Tests {@link ECC#toArray()}
	 */
	@Test
	public void testToArray() {
		final long seed = SEED_PROVIDER.getSeedValue(7);
		RandomGenerator randomGenerator = getRandomGenerator(seed);
		for (int i = 0; i < 100; i++) {
			double x = randomGenerator.nextDouble() * 1_000_000 - 500_000;
			double y = randomGenerator.nextDouble() * 1_000_000 - 500_000;
			double z = randomGenerator.nextDouble() * 1_000_000 - 500_000;
			ECC ecc = new ECC(x, y, z);
			double[] array = ecc.toArray();
			assertNotNull(array);
			assertEquals(3, array.length);
			assertEquals(ecc.getX(), array[0], TOLERANCE);
			assertEquals(ecc.getY(), array[1], TOLERANCE);
			assertEquals(ecc.getZ(), array[2], TOLERANCE);
		}
	}

}
