package gcm.test.automated;

import static gcm.test.support.EnvironmentSupport.addStandardComponentsAndTypes;
import static gcm.test.support.EnvironmentSupport.addStandardPeople;
import static gcm.test.support.EnvironmentSupport.addStandardPropertyDefinitions;
import static gcm.test.support.EnvironmentSupport.addStandardTrackingAndScenarioId;
import static gcm.test.support.EnvironmentSupport.addTaskPlanContainer;
import static gcm.test.support.EnvironmentSupport.assertAllPlansExecuted;
import static gcm.test.support.EnvironmentSupport.generatePropertyValue;
import static gcm.test.support.EnvironmentSupport.getRandomGenerator;
import static gcm.test.support.EnvironmentSupport.getReplication;
import static gcm.test.support.ExceptionAssertion.assertModelException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.EnumSet;
import java.util.LinkedHashSet;
import java.util.Set;

import org.apache.commons.math3.random.RandomGenerator;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import gcm.replication.Replication;
import gcm.scenario.PersonId;
import gcm.scenario.PropertyDefinition;
import gcm.scenario.RegionId;
import gcm.scenario.ReplicationId;
import gcm.scenario.ResourceId;
import gcm.scenario.ResourcePropertyId;
import gcm.scenario.Scenario;
import gcm.scenario.ScenarioBuilder;
import gcm.scenario.UnstructuredScenarioBuilder;
import gcm.simulation.Environment;
import gcm.simulation.EnvironmentImpl;
import gcm.simulation.Simulation;
import gcm.simulation.SimulationErrorType;
import gcm.test.support.EnvironmentSupport;
import gcm.test.support.SeedProvider;
import gcm.test.support.TaskPlanContainer;
import gcm.test.support.TestCompartmentId;
import gcm.test.support.TestGlobalComponentId;
import gcm.test.support.TestRegionId;
import gcm.test.support.TestRegionPropertyId;
import gcm.test.support.TestResourceId;
import gcm.test.support.EnvironmentSupport.PropertyAssignmentPolicy;
import gcm.util.annotations.UnitTest;

@UnitTest(target = EnvironmentImpl.class)

public class AT_EnvironmentImpl_09 {

	private static SeedProvider SEED_PROVIDER;

	@BeforeClass
	public static void beforeClass() {
		SEED_PROVIDER = new SeedProvider(EnvironmentSupport.getMetaSeed(9));
	}

	/**
	 * Internal test(not part of public tests) to show that there are no large
	 * gaps in the seed cases generated by the SeedProvider.
	 */
	@AfterClass
	public static void afterClass() {
		//System.out.println(SEED_PROVIDER.generateUnusedSeedReport());
	}

	

	/**
	 * Tests {@link Environment#getRegionPopulationCount(Object)}
	 */
	@Test
	public void testGetRegionPopulationCount() {
		/*
		 * Assert that each region has the number of people in it expected from
		 * the initialization of the simulation. Then assert the count of the
		 * region population as we add a few people just to make sure that the
		 * original agreement was not an artifact of initialization.
		 */
		final long seed = SEED_PROVIDER.getSeedValue(0);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			for (final TestRegionId testRegionId : TestRegionId.values()) {
				int expectedRegionPopulationCount = 0;
				for (final PersonId personId : scenario.getPeopleIds()) {
					if (scenario.getPersonRegion(personId).equals(testRegionId)) {
						expectedRegionPopulationCount++;
					}
				}

				assertEquals(expectedRegionPopulationCount, environment.getRegionPopulationCount(testRegionId));

				for (final TestCompartmentId testCompartmentId : TestCompartmentId.values()) {
					environment.addPerson(testRegionId, testCompartmentId);
					expectedRegionPopulationCount++;
					assertEquals(expectedRegionPopulationCount, environment.getRegionPopulationCount(testRegionId));
				}
			}
		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			// if the region id is null
			assertModelException(() -> environment.getRegionPopulationCount(null), SimulationErrorType.NULL_REGION_ID);
			// if the region is unknown
			assertModelException(() -> environment.getRegionPopulationCount(TestRegionId.getUnknownRegionId()), SimulationErrorType.UNKNOWN_REGION_ID);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests {@link Environment#getRegionPopulationCountTime(Object)}
	 */
	@Test
	public void testGetRegionPopulationCountTime() {

		/*
		 * Create three test plans such that we show that the initial people
		 * were added at time zero and that if we add new people at time 2, we
		 * can verify that the new population time is 2 at both time 2 and
		 * later.
		 */

		final long seed = SEED_PROVIDER.getSeedValue(1);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			for (final TestRegionId testRegionId : TestRegionId.values()) {
				assertEquals(0, environment.getRegionPopulationCountTime(testRegionId), 0);
			}
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			for (final TestRegionId testRegionId : TestRegionId.values()) {
				environment.addPerson(testRegionId, TestCompartmentId.COMPARTMENT_1);
				assertEquals(2.0, environment.getRegionPopulationCountTime(testRegionId), 0);
			}
		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			for (final TestRegionId testRegionId : TestRegionId.values()) {
				assertEquals(2.0, environment.getRegionPopulationCountTime(testRegionId), 0);
			}
		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			// if the region id is null
			assertModelException(() -> environment.getRegionPopulationCountTime(null), SimulationErrorType.NULL_REGION_ID);
			// if the region is unknown
			assertModelException(() -> environment.getRegionPopulationCountTime(TestRegionId.getUnknownRegionId()), SimulationErrorType.UNKNOWN_REGION_ID);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests
	 * {@link Environment#getRegionPropertyDefinition(gcm.scenario.RegionPropertyId)}
	 */
	@Test
	public void testGetRegionPropertyDefinition() {
		/*
		 * Retrieve each region property definition and assert that it equals
		 * the one held in the test plan executor.
		 */

		final long seed = SEED_PROVIDER.getSeedValue(2);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		for (final TestRegionPropertyId testRegionPropertyId : TestRegionPropertyId.values()) {
			taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

				final PropertyDefinition expectedPropertyDefinition = scenario.getRegionPropertyDefinition(testRegionPropertyId);
				final PropertyDefinition actualPropertyDefinition = environment.getRegionPropertyDefinition(testRegionPropertyId);
				assertEquals(expectedPropertyDefinition, actualPropertyDefinition);
			});
		}

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			// if the property id is null
			assertModelException(() -> environment.getRegionPropertyDefinition(null), SimulationErrorType.NULL_REGION_PROPERTY_ID);
			// if the property id does not correspond to a known region
			// property identifier
			assertModelException(() -> environment.getRegionPropertyDefinition(TestRegionPropertyId.getUnknownRegionPropertyId()), SimulationErrorType.UNKNOWN_REGION_PROPERTY_ID);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests {@link Environment#getRegionPropertyIds()}
	 */
	@Test
	public void testGetRegionPropertyIds() {
		/*
		 * Assert that the region property identifiers from the environment are
		 * the same as the elements of the local RegionPropertyId enumeration.
		 */
		final long seed = SEED_PROVIDER.getSeedValue(3);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			final Set<TestRegionPropertyId> expectedRegionPropertyIds = EnumSet.allOf(TestRegionPropertyId.class);
			assertEquals(expectedRegionPropertyIds, environment.getRegionPropertyIds());
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests
	 * {@link Environment#getRegionPropertyTime(RegionId, gcm.scenario.RegionPropertyId)}
	 */
	@Test
	public void testGetRegionPropertyTime() {
		/*
		 * For each region property first show that the property time is zero.
		 * Next change each property so that the new property times will be the
		 * current time and test that this is so. Finally, move forward in time
		 * and show that the property value times still reflect the time when we
		 * set them and not the current time.
		 */
		final long seed = SEED_PROVIDER.getSeedValue(4);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.TRUE, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			for (final TestRegionId testRegionId : TestRegionId.values()) {
				for (final TestRegionPropertyId propertyID : TestRegionPropertyId.values()) {
					final double expectedPropertyTime = 0;
					final double actualPropertyTime = environment.getRegionPropertyTime(testRegionId, propertyID);
					assertEquals(expectedPropertyTime, actualPropertyTime, 0);
				}
			}

		});

		/*
		 * Change each property value and show that the time values are the
		 * current time
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			for (final TestRegionId testRegionId : TestRegionId.values()) {
				for (final TestRegionPropertyId propertyID : TestRegionPropertyId.values()) {
					final PropertyDefinition propertyDefinition = environment.getRegionPropertyDefinition(propertyID);
					final Object actualPropertyValue = environment.getRegionPropertyValue(testRegionId, propertyID);
					Object updatedPropertyValue = null;
					while ((updatedPropertyValue == null) || updatedPropertyValue.equals(actualPropertyValue)) {
						updatedPropertyValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());
					}
					environment.setRegionPropertyValue(testRegionId, propertyID, updatedPropertyValue);
					final double expectedPropertyTime = 2.0;
					final double actualPropertyTime = environment.getRegionPropertyTime(testRegionId, propertyID);
					assertEquals(expectedPropertyTime, actualPropertyTime, 0);
				}
			}

		});

		/*
		 * Time has moved forward and we show that the property value times
		 * still reflect when they were set
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			for (final TestRegionId testRegionId : TestRegionId.values()) {
				for (final TestRegionPropertyId propertyID : TestRegionPropertyId.values()) {
					final double expectedPropertyTime = 2.0;
					final double actualPropertyTime = environment.getRegionPropertyTime(testRegionId, propertyID);
					assertEquals(expectedPropertyTime, actualPropertyTime, 0);
				}
			}

		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			// if the region id is null
			assertModelException(() -> environment.getRegionPropertyTime(null, TestRegionPropertyId.REGION_PROPERTY_1), SimulationErrorType.NULL_REGION_ID);
			// if the region is unknown
			assertModelException(() -> environment.getRegionPropertyTime(TestRegionId.getUnknownRegionId(), TestRegionPropertyId.REGION_PROPERTY_1), SimulationErrorType.UNKNOWN_REGION_ID);
			// if the property id is null
			assertModelException(() -> environment.getRegionPropertyTime(TestRegionId.REGION_1, null), SimulationErrorType.NULL_REGION_PROPERTY_ID);
			// if the property is unknown
			assertModelException(() -> environment.getRegionPropertyTime(TestRegionId.REGION_1, TestRegionPropertyId.getUnknownRegionPropertyId()), SimulationErrorType.UNKNOWN_REGION_PROPERTY_ID);

		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests
	 * {@link Environment#getRegionPropertyValue(RegionId, gcm.scenario.RegionPropertyId)}
	 */
	@Test
	public void testGetRegionPropertyValue() {
		/*
		 * For each region and region property definition, show that the current
		 * value is the default value we expect from the property definition.
		 * Then show that after we change the value that we can retrieve the new
		 * value just so we know that we are not observing an artifact of the
		 * original default value.
		 */
		final long seed = SEED_PROVIDER.getSeedValue(5);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.TRUE, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			for (final TestRegionId testRegionId : TestRegionId.values()) {
				for (final TestRegionPropertyId propertyID : TestRegionPropertyId.values()) {
					/*
					 * We first assert that the current value of the property is
					 * the default for the definition.
					 */

					final PropertyDefinition propertyDefinition = environment.getRegionPropertyDefinition(propertyID);
					assertTrue(propertyDefinition.getDefaultValue().isPresent());
					final Object expectedPropertyValue = propertyDefinition.getDefaultValue().get();
					final Object actualPropertyValue = environment.getRegionPropertyValue(testRegionId, propertyID);
					assertEquals(expectedPropertyValue, actualPropertyValue);

					/*
					 * To be more thorough, we also assert that we can retrieve
					 * any arbitrary value since we know that default values are
					 * potentially handled as a special case.
					 */
					Object updatedPropertyValue = null;
					while ((updatedPropertyValue == null) || updatedPropertyValue.equals(actualPropertyValue)) {
						updatedPropertyValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());
					}
					environment.setRegionPropertyValue(testRegionId, propertyID, updatedPropertyValue);
					final Object retrievedPropertyValue = environment.getRegionPropertyValue(testRegionId, propertyID);
					assertEquals(updatedPropertyValue, retrievedPropertyValue);
				}
			}

		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			// if the region id is null
			assertModelException(() -> environment.getRegionPropertyValue(null, TestRegionPropertyId.REGION_PROPERTY_1), SimulationErrorType.NULL_REGION_ID);
			// if the region is unknown
			assertModelException(() -> environment.getRegionPropertyValue(TestRegionId.getUnknownRegionId(), TestRegionPropertyId.REGION_PROPERTY_1), SimulationErrorType.UNKNOWN_REGION_ID);
			// if the property id is null
			assertModelException(() -> environment.getRegionPropertyValue(TestRegionId.REGION_1, null), SimulationErrorType.NULL_REGION_PROPERTY_ID);
			// if the property is unknown
			assertModelException(() -> environment.getRegionPropertyValue(TestRegionId.REGION_1, TestRegionPropertyId.getUnknownRegionPropertyId()), SimulationErrorType.UNKNOWN_REGION_PROPERTY_ID);

		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

	}

	/**
	 * Tests {@link Environment#getRegionResourceLevel(RegionId, ResourceId)}
	 */
	@Test
	public void testGetRegionResourceLevel() {

		/*
		 * For each region and resource, show that the current resource level is
		 * zero. Then show that after we change the level that we can retrieve
		 * the new value just so we know that we are not observing an artifact
		 * of the original default value.
		 */

		final long seed = SEED_PROVIDER.getSeedValue(6);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.TRUE, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			for (final TestRegionId testRegionId : TestRegionId.values()) {

				for (final TestResourceId testResourceId : TestResourceId.values()) {
					/*
					 * We first assert that the current resource level is zero
					 */
					long expectedResourceLevel = 0;
					long actualResourceLevel = environment.getRegionResourceLevel(testRegionId, testResourceId);
					assertEquals(expectedResourceLevel, actualResourceLevel);

					/*
					 * To be more thorough, we also assert that we can retrieve
					 * any arbitrary level since we know that default values are
					 * potentially handled as a special case.
					 */
					final long amountToAdd = environment.getRandomGenerator().nextInt(100) + 1;

					environment.addResourceToRegion(testResourceId, testRegionId, amountToAdd);
					expectedResourceLevel = amountToAdd;
					actualResourceLevel = environment.getRegionResourceLevel(testRegionId, testResourceId);
					assertEquals(expectedResourceLevel, actualResourceLevel);
				}
			}

		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			// if the region id is null
			assertModelException(() -> environment.getRegionResourceLevel(null, TestResourceId.RESOURCE1), SimulationErrorType.NULL_REGION_ID);
			// if the region is unknown
			assertModelException(() -> environment.getRegionResourceLevel(TestRegionId.getUnknownRegionId(), TestResourceId.RESOURCE1), SimulationErrorType.UNKNOWN_REGION_ID);
			// if the resource id is null
			assertModelException(() -> environment.getRegionResourceLevel(TestRegionId.REGION_1, null), SimulationErrorType.NULL_RESOURCE_ID);
			// if the resource id is unknown
			assertModelException(() -> environment.getRegionResourceLevel(TestRegionId.REGION_1, TestResourceId.getUnknownResourceId()), SimulationErrorType.UNKNOWN_RESOURCE_ID);

		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests {@link Environment#getRegionResourceTime(RegionId, ResourceId)}
	 */
	@Test
	public void testGetRegionResourceTime() {
		/*
		 * Create three test plans such that we show that the initial resources
		 * were added at time zero and that if we add new resources at time 2,
		 * we can verify that the new resource time is 2 at both time 2 and
		 * later.
		 */

		final long seed = SEED_PROVIDER.getSeedValue(7);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.TRUE, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		/*
		 * Show that the initial resource times are zero
		 */

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			for (final TestRegionId testRegionId : TestRegionId.values()) {
				for (final TestResourceId testResourceId : TestResourceId.values()) {
					final double expectedResourceTime = 0;
					final double actualResourceTime = environment.getRegionResourceTime(testRegionId, testResourceId);
					assertEquals(expectedResourceTime, actualResourceTime, 0);
				}
			}

		});

		/*
		 * Show that if we add resources to the regions that the resource times
		 * are the current time
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			for (final TestRegionId testRegionId : TestRegionId.values()) {

				for (final TestResourceId testResourceId : TestResourceId.values()) {
					final long amountToAdd = environment.getRandomGenerator().nextInt(100) + 1;
					environment.addResourceToRegion(testResourceId, testRegionId, amountToAdd);
					final double expectedResourceTime = 2.0;
					final double actualResourceTime = environment.getRegionResourceTime(testRegionId, testResourceId);
					assertEquals(expectedResourceTime, actualResourceTime, 0);
				}
			}

		});

		/*
		 * Show that the resource times reflect the past time when they were set
		 * and not the current time.
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			for (final TestRegionId testRegionId : TestRegionId.values()) {

				for (final TestResourceId testResourceId : TestResourceId.values()) {
					final double expectedResourceTime = 2.0;
					final double actualResourceTime = environment.getRegionResourceTime(testRegionId, testResourceId);
					assertEquals(expectedResourceTime, actualResourceTime, 0);
				}
			}

		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			// if the region id is null
			assertModelException(() -> environment.getRegionResourceTime(null, TestResourceId.RESOURCE1), SimulationErrorType.NULL_REGION_ID);
			// if the region is unknown
			assertModelException(() -> environment.getRegionResourceTime(TestRegionId.getUnknownRegionId(), TestResourceId.RESOURCE1), SimulationErrorType.UNKNOWN_REGION_ID);
			// if the resource id is null
			assertModelException(() -> environment.getRegionResourceTime(TestRegionId.REGION_1, null), SimulationErrorType.NULL_RESOURCE_ID);
			// if the resource id is unknown
			assertModelException(() -> environment.getRegionResourceTime(TestRegionId.REGION_1, TestResourceId.getUnknownResourceId()), SimulationErrorType.UNKNOWN_RESOURCE_ID);

		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests {@link Environment#getReplicationId()}
	 */
	@Test
	public void testGetReplicationId() {
		/*
		 * Assert that we can retrieve the expected replication identifier.
		 */

		final long seed = SEED_PROVIDER.getSeedValue(8);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			final ReplicationId expectedReplicationId = replication.getId();
			assertEquals(expectedReplicationId, environment.getReplicationId());
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests {@link Environment#getResourceIds()}
	 */
	@Test
	public void testGetResourceIds() {
		/*
		 * Assert that the resource identifiers from the environment are the
		 * same as the elements of the local ResourceId enumeration.
		 */
		final long seed = SEED_PROVIDER.getSeedValue(9);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			final Set<TestResourceId> expectedResourceIds = EnumSet.allOf(TestResourceId.class);
			assertEquals(expectedResourceIds, environment.getResourceIds());
		});
		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests
	 * {@link Environment#getResourcePropertyDefinition(gcm.scenario.ResourcePropertyId)}
	 */
	@Test
	public void testGetResourcePropertyDefinition() {
		/*
		 * Retrieve each resource property definition and assert that it equals
		 * the one held in the test plan executor.
		 */
		final long seed = SEED_PROVIDER.getSeedValue(10);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		for (ResourceId resourceId : scenario.getResourceIds()) {
			for (final ResourcePropertyId resourcePropertyId : scenario.getResourcePropertyIds(resourceId)) {
				taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
					final PropertyDefinition expectedPropertyDefinition = scenario.getResourcePropertyDefinition(resourceId, resourcePropertyId);
					final PropertyDefinition actualPropertyDefinition = environment.getResourcePropertyDefinition(resourceId, resourcePropertyId);
					assertEquals(expectedPropertyDefinition, actualPropertyDefinition);
				});
			}
		}

		/*
		 * Precondition test
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			ResourceId resourceId = TestResourceId.RESOURCE3;
			ResourcePropertyId resourcePropertyId = TestResourceId.RESOURCE3.getResourcePropertyIds()[0];

			// if the resource id is null
			assertModelException(() -> environment.getResourcePropertyDefinition(null, resourcePropertyId), SimulationErrorType.NULL_RESOURCE_ID);

			// if the resource id is unknown
			assertModelException(() -> environment.getResourcePropertyDefinition(TestResourceId.getUnknownResourceId(), resourcePropertyId), SimulationErrorType.UNKNOWN_RESOURCE_ID);

			// if the property id is null
			assertModelException(() -> environment.getResourcePropertyDefinition(resourceId, null), SimulationErrorType.NULL_RESOURCE_PROPERTY_ID);

			// if the property id does not correspond to a known resource
			// property identifier
			assertModelException(() -> environment.getResourcePropertyDefinition(resourceId, TestResourceId.getUnknownResourcePropertyId()), SimulationErrorType.UNKNOWN_RESOURCE_PROPERTY_ID);
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

	}

	/**
	 * Tests {@link Environment#getResourcePropertyIds()}
	 */
	@Test
	public void testGetResourcePropertyIds() {
		/*
		 * Assert that the resource property identifiers from the environment
		 * are the same as the elements of the local ResourcePropertyId
		 * enumeration.
		 */
		final long seed = SEED_PROVIDER.getSeedValue(11);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.RANDOM, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {
			for (TestResourceId testResourceId : TestResourceId.values()) {
				Set<ResourcePropertyId> expectedResourcePropertyIds = new LinkedHashSet<>();
				for (ResourcePropertyId resourcePropertyId : testResourceId.getResourcePropertyIds()) {
					expectedResourcePropertyIds.add(resourcePropertyId);
				}
				assertEquals(expectedResourcePropertyIds, environment.getResourcePropertyIds(testResourceId));

			}
		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	/**
	 * Tests
	 * {@link Environment#getResourcePropertyTime(ResourceId, gcm.scenario.ResourcePropertyId)}
	 */
	@Test
	public void testGetResourcePropertyTime() {
		/*
		 * For each resource property first show that the property time is zero.
		 * Next change each property so that the new property times will be the
		 * current time and test that this is so. Finally, move forward in time
		 * and show that the property value times still reflect the time when we
		 * set them and not the current time.
		 */

		final long seed = SEED_PROVIDER.getSeedValue(12);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.TRUE, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		/*
		 * Show that all the property values were set at time = 0
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			for (final TestResourceId testResourceId : TestResourceId.values()) {
				for (final ResourcePropertyId propertyID : testResourceId.getResourcePropertyIds()) {
					final double expectedPropertyTime = 0;
					final double actualPropertyTime = environment.getResourcePropertyTime(testResourceId, propertyID);
					assertEquals(expectedPropertyTime, actualPropertyTime, 0);
				}
			}

		});

		/*
		 * Change each property value and show that the time values are the
		 * current time
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			for (final TestResourceId testResourceId : TestResourceId.values()) {
				for (final ResourcePropertyId propertyID : testResourceId.getResourcePropertyIds()) {
					final PropertyDefinition propertyDefinition = environment.getResourcePropertyDefinition(testResourceId, propertyID);
					final Object actualPropertyValue = environment.getResourcePropertyValue(testResourceId, propertyID);
					Object updatedPropertyValue = null;
					while ((updatedPropertyValue == null) || updatedPropertyValue.equals(actualPropertyValue)) {
						updatedPropertyValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());
					}
					environment.setResourcePropertyValue(testResourceId, propertyID, updatedPropertyValue);
					final double expectedPropertyTime = 2.0;
					final double actualPropertyTime = environment.getResourcePropertyTime(testResourceId, propertyID);
					assertEquals(expectedPropertyTime, actualPropertyTime, 0);
				}
			}

		});

		/*
		 * Time has moved forward and we show that the property value times
		 * still reflect when they were set
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			for (final TestResourceId testResourceId : TestResourceId.values()) {
				for (final ResourcePropertyId propertyID : testResourceId.getResourcePropertyIds()) {
					final double expectedPropertyTime = 2.0;
					final double actualPropertyTime = environment.getResourcePropertyTime(testResourceId, propertyID);
					assertEquals(expectedPropertyTime, actualPropertyTime, 0);
				}
			}

		});

		/*
		 * Precondition tests
		 */
		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			ResourceId resourceId = TestResourceId.RESOURCE6;
			ResourcePropertyId resourcePropertyId = TestResourceId.RESOURCE6.getResourcePropertyIds()[0];

			// if the resource id is null
			assertModelException(() -> environment.getResourcePropertyTime(null, resourcePropertyId), SimulationErrorType.NULL_RESOURCE_ID);
			// if the resource is unknown
			assertModelException(() -> environment.getResourcePropertyTime(TestResourceId.getUnknownResourceId(), resourcePropertyId), SimulationErrorType.UNKNOWN_RESOURCE_ID);
			// if the property id is null
			assertModelException(() -> environment.getResourcePropertyTime(resourceId, null), SimulationErrorType.NULL_RESOURCE_PROPERTY_ID);
			// if the property is unknown
			assertModelException(() -> environment.getResourcePropertyTime(resourceId, TestResourceId.getUnknownResourcePropertyId()), SimulationErrorType.UNKNOWN_RESOURCE_PROPERTY_ID);

		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);

	}

	/**
	 * Tests
	 * {@link Environment#getResourcePropertyValue(ResourceId, gcm.scenario.ResourcePropertyId)}
	 */
	@Test
	public void testGetResourcePropertyValue() {

		/*
		 * For each resource and resource property definition, show that the
		 * current value is the default value we expect from the property
		 * definition. Then show that after we change the value that we can
		 * retrieve the new value just so we know that we are not observing an
		 * artifact of the original default value.
		 */

		final long seed = SEED_PROVIDER.getSeedValue(13);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		ScenarioBuilder scenarioBuilder = new UnstructuredScenarioBuilder();
		addStandardTrackingAndScenarioId(scenarioBuilder, randomGenerator);
		addStandardComponentsAndTypes(scenarioBuilder);
		addStandardPeople(scenarioBuilder, 10);
		addStandardPropertyDefinitions(scenarioBuilder, PropertyAssignmentPolicy.TRUE, randomGenerator);

		TaskPlanContainer taskPlanContainer = addTaskPlanContainer(scenarioBuilder);

		Scenario scenario = scenarioBuilder.build();

		Replication replication = getReplication(randomGenerator);

		int testTime = 1;

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			for (final TestResourceId testResourceId : TestResourceId.values()) {
				for (final ResourcePropertyId propertyID : testResourceId.getResourcePropertyIds()) {
					/*
					 * We first assert that the current value of the resource is
					 * the default for the definition.
					 */

					final PropertyDefinition propertyDefinition = environment.getResourcePropertyDefinition(testResourceId, propertyID);
					assertTrue(propertyDefinition.getDefaultValue().isPresent());
					final Object expectedPropertyValue = propertyDefinition.getDefaultValue().get();
					final Object actualPropertyValue = environment.getResourcePropertyValue(testResourceId, propertyID);
					assertEquals(expectedPropertyValue, actualPropertyValue);

					/*
					 * To be more thorough, we also assert that we can retrieve
					 * any arbitrary value since we know that default values are
					 * potentially handled as a special case.
					 */
					Object updatedPropertyValue = null;
					while ((updatedPropertyValue == null) || updatedPropertyValue.equals(actualPropertyValue)) {
						updatedPropertyValue = generatePropertyValue(propertyDefinition, environment.getRandomGenerator());
					}
					environment.setResourcePropertyValue(testResourceId, propertyID, updatedPropertyValue);
					final Object retrievedPropertyValue = environment.getResourcePropertyValue(testResourceId, propertyID);
					assertEquals(updatedPropertyValue, retrievedPropertyValue);
				}
			}

		});

		taskPlanContainer.addTaskPlan(TestGlobalComponentId.GLOBAL_COMPONENT_1, testTime++, (environment) -> {

			ResourceId resourceId = TestResourceId.RESOURCE1;

			ResourcePropertyId resourcePropertyId = TestResourceId.RESOURCE1.getResourcePropertyIds()[0];

			// if the resource id is null
			assertModelException(() -> environment.getResourcePropertyValue(null, resourcePropertyId), SimulationErrorType.NULL_RESOURCE_ID);
			// if the resource is unknown
			assertModelException(() -> environment.getResourcePropertyValue(TestResourceId.getUnknownResourceId(), resourcePropertyId), SimulationErrorType.UNKNOWN_RESOURCE_ID);
			// if the property id is null
			assertModelException(() -> environment.getResourcePropertyValue(resourceId, null), SimulationErrorType.NULL_RESOURCE_PROPERTY_ID);
			// if the property is unknown
			assertModelException(() -> environment.getResourcePropertyValue(resourceId, TestResourceId.getUnknownResourcePropertyId()), SimulationErrorType.UNKNOWN_RESOURCE_PROPERTY_ID);

		});

		Simulation simulation = new Simulation();
		simulation.setReplication(replication);
		simulation.setScenario(scenario);
		simulation.execute();

		assertAllPlansExecuted(taskPlanContainer);
	}

	
}
