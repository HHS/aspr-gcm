package gcm.test.automated;

import static gcm.test.support.EnvironmentSupport.getRandomGenerator;
import static gcm.test.support.ExceptionAssertion.assertException;

import org.apache.commons.math3.random.RandomGenerator;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import gcm.test.support.SeedProvider;
import gcm.util.annotations.UnitTest;
import gcm.util.earth.Earth;
import gcm.util.earth.LatLon;
import gcm.util.spherical.MalformedSphericalPolygonException;
import gcm.util.spherical.SphericalPoint;
import gcm.util.spherical.SphericalPolygon;
import gcm.util.spherical.SphericalPolygon.Builder;
import gcm.util.vector.Vector3D;

/**
 * Test class for {@link SphericalPolygon}
 * 
 * @author Shawn Hatch
 *
 */
@UnitTest(target = SphericalPolygon.class)
public class AT_SphericalPolygon {
	private static SeedProvider SEED_PROVIDER;

	@BeforeClass
	public static void beforeClass() {
		SEED_PROVIDER = new SeedProvider(78756881453477683L);
	}

	/**
	 * Internal test(not part of public tests) to show that there are no large
	 * gaps in the seed cases generated by the SeedProvider.
	 */
	@AfterClass
	public static void afterClass() {
		System.out.println(AT_SphericalPolygon.class.getSimpleName() + " " + SEED_PROVIDER.generateUnusedSeedReport());
	}

	private static SphericalPoint generateRandomizedSphericalPoint(RandomGenerator randomGenerator) {
		double x = randomGenerator.nextDouble() * 2 - 1;
		double y = randomGenerator.nextDouble() * 2 - 1;
		double z = randomGenerator.nextDouble() * 2 - 1;
		return new SphericalPoint(new Vector3D(x, y, z));
	}

	private static LocalBuilder localBuilder() {
		return new LocalBuilder();
	}

	private static class LocalBuilder {
		private Earth earth = Earth.fromMeanRadius();
		private SphericalPolygon.Builder builder = SphericalPolygon.builder();

		public LocalBuilder add(double lat, double lon) {
			builder.addSphericalPoint(new SphericalPoint(earth.getECCFromLatLon(new LatLon(lat, lon))));
			return this;
		}

		public SphericalPolygon build() {
			return builder.build();
		}
	}

	/**
	 * Tests {@link SphericalPolygon#builder()}
	 */
	@Test
	public void testConstructor() {		
		final long seed = SEED_PROVIDER.getSeedValue(0);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		// Show that an empty set of vertices will throw a
		// MalformedSphericalPolygonException
		Builder builder = SphericalPolygon.builder();
		assertException(() -> builder.build(), MalformedSphericalPolygonException.class);

		// Show that a single vertex will throw a
		// MalformedSphericalPolygonException
		builder.addSphericalPoint(generateRandomizedSphericalPoint(randomGenerator));
		assertException(() -> builder.build(), MalformedSphericalPolygonException.class);

		// Show that two vertices will throw a
		// MalformedSphericalPolygonException
		builder.addSphericalPoint(generateRandomizedSphericalPoint(randomGenerator));
		builder.addSphericalPoint(generateRandomizedSphericalPoint(randomGenerator));
		assertException(() -> builder.build(), MalformedSphericalPolygonException.class);

		// Show that null vertices will throw a
		// MalformedSphericalPolygonException
		builder.addSphericalPoint(null);
		builder.addSphericalPoint(generateRandomizedSphericalPoint(randomGenerator));
		builder.addSphericalPoint(generateRandomizedSphericalPoint(randomGenerator));
		assertException(() -> builder.build(), MalformedSphericalPolygonException.class);

		// Show that a crossing edges will throw a
		// MalformedSphericalPolygonException
		assertException(() -> localBuilder()//
											.add(0, 0)//
											.add(30, 0)//
											.add(0, 20)//
											.add(30, 20)//
											.build(),
				MalformedSphericalPolygonException.class);
	}
	
	
//	/**
//	 * Tests {@link SphericalPolygon#containsPosition()}
//	 */
//	@Test
//	public void testContainsPosition() {
//		
//		
//		localBuilder()//
//		.add(36.6591574,53.6229713)
//		.add(30.03587393,59.19600684)
//		.add(31.16669935,53.46610146)
//		
//		.add(39.04872969,50.23589786)
//		.add(38.22818039,55.08000036)
//		
////		.add(42.77050381,54.07717149)
////		.add(39.9151851,56.58807296)
////		.add(38.32998873,59.72780507)
////		.add(32.69372616,58.51280131)
//		.build();		
//
//		
//	}	
	// getChirality()
	// getSphericalArcs()
	// getSphericalPoints()
	// getSphericalTriangles()
	// intersects(SphericalArc)
	// intersects(SphericalPolygon)
	// intersects(SphericalTriangle)

}
