package gcm.test.automated;

import static gcm.test.support.EnvironmentSupport.getRandomGenerator;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.util.FastMath;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import gcm.test.support.SeedProvider;
import gcm.util.annotations.UnitTest;
import gcm.util.vector.Vector3D;

/**
 * Test class for {@link Vector3D}
 * 
 * @author Shawn Hatch
 *
 */
@UnitTest(target = Vector3D.class)
public class AT_Vector3D {
	private static SeedProvider SEED_PROVIDER;

	private static final double TOLERANCE = 0.000001;

	@BeforeClass
	public static void beforeClass() {
		SEED_PROVIDER = new SeedProvider(45624564585678567L);
	}

	/**
	 * Internal test(not part of public tests) to show that there are no large
	 * gaps in the seed cases generated by the SeedProvider.
	 */
	@AfterClass
	public static void afterClass() {
//		System.out.println(AT_Vector3D.class.getSimpleName() + " " + SEED_PROVIDER.generateUnusedSeedReport());
	}

	/**
	 * Tests {@linkplain Vector3D#add(Vector3D)}
	 * 
	 * Tests {@linkplain Vector3D#add(double, double, double)}
	 */
	@Test
	public void testAdd() {

		final long seed = SEED_PROVIDER.getSeedValue(0);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {
			double x1 = randomGenerator.nextDouble() * 1000 - 500;
			double y1 = randomGenerator.nextDouble() * 1000 - 500;
			double z1 = randomGenerator.nextDouble() * 1000 - 500;
			Vector3D v1 = new Vector3D(x1, y1, z1);

			double x2 = randomGenerator.nextDouble() * 1000 - 500;
			double y2 = randomGenerator.nextDouble() * 1000 - 500;
			double z2 = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v2 = new Vector3D(x2, y2, z2);

			v1.add(v2);

			assertEquals(x1 + x2, v1.getX(), 0);
			assertEquals(y1 + y2, v1.getY(), 0);
			assertEquals(z1 + z2, v1.getZ(), 0);

			v1 = new Vector3D(x1, y1, z1);
			v1.add(x2, y2, z2);

			assertEquals(x1 + x2, v1.getX(), 0);
			assertEquals(y1 + y2, v1.getY(), 0);
			assertEquals(z1 + z2, v1.getZ(), 0);

		}
	}

	/**
	 * Tests {@linkplain Vector3D#Vector3D()} Tests
	 * {@linkplain Vector3D#Vector3D(Vector3D)} Tests
	 * {@linkplain Vector3D#Vector3D(double, double, double)}
	 * 
	 */
	@Test
	public void testConstructors() {

		final long seed = SEED_PROVIDER.getSeedValue(1);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {

			Vector3D v = new Vector3D();

			assertEquals(0, v.getX(), 0);
			assertEquals(0, v.getY(), 0);
			assertEquals(0, v.getZ(), 0);

			double x = randomGenerator.nextDouble() * 1000 - 500;
			double y = randomGenerator.nextDouble() * 1000 - 500;
			double z = randomGenerator.nextDouble() * 1000 - 500;

			v = new Vector3D(x, y, z);

			assertEquals(x, v.getX(), 0);
			assertEquals(y, v.getY(), 0);
			assertEquals(z, v.getZ(), 0);

			Vector3D v2 = new Vector3D(v);

			assertEquals(v.getX(), v2.getX(), 0);
			assertEquals(v.getY(), v2.getY(), 0);
			assertEquals(v.getZ(), v2.getZ(), 0);

		}
	}

	/**
	 * Tests {@linkplain Vector3D#addScaled(Vector3D, double)}
	 * 
	 */
	@Test
	public void testAddScaled() {

		final long seed = SEED_PROVIDER.getSeedValue(2);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {
			double x1 = randomGenerator.nextDouble() * 1000 - 500;
			double y1 = randomGenerator.nextDouble() * 1000 - 500;
			double z1 = randomGenerator.nextDouble() * 1000 - 500;
			Vector3D v1 = new Vector3D(x1, y1, z1);

			double x2 = randomGenerator.nextDouble() * 1000 - 500;
			double y2 = randomGenerator.nextDouble() * 1000 - 500;
			double z2 = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v2 = new Vector3D(x2, y2, z2);

			double scale = randomGenerator.nextDouble() * 1000 - 500;

			v1.addScaled(v2, scale);

			assertEquals(x1 + x2 * scale, v1.getX(), 0);
			assertEquals(y1 + y2 * scale, v1.getY(), 0);
			assertEquals(z1 + z2 * scale, v1.getZ(), 0);
		}
	}

	/**
	 * Tests {@linkplain Vector3D#angle(Vector3D)}
	 * 
	 */
	@Test
	public void testAngle() {

		final long seed = SEED_PROVIDER.getSeedValue(3);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {

			double x1 = randomGenerator.nextDouble() * 1000 - 500;
			double y1 = randomGenerator.nextDouble() * 1000 - 500;
			double z1 = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v1 = new Vector3D(x1, y1, z1);

			double x2 = randomGenerator.nextDouble() * 1000 - 500;
			double y2 = randomGenerator.nextDouble() * 1000 - 500;
			double z2 = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v2 = new Vector3D(x2, y2, z2);

			double length1 = FastMath.sqrt(x1 * x1 + y1 * y1 + z1 * z1);
			double length2 = FastMath.sqrt(x2 * x2 + y2 * y2 + z2 * z2);
			double dotProduct = x1 * x2 + y1 * y2 + z1 * z2;
			double cosTheta = dotProduct / (length1 * length2);
			double expectedValue = FastMath.acos(cosTheta);

			double actualValue = v1.angle(v2);

			assertEquals(expectedValue, actualValue, TOLERANCE);

		}
	}

	/**
	 * Tests {@linkplain Vector3D#assign(Vector3D)}
	 * 
	 * Tests {@linkplain Vector3D#assign(double, double, double)}
	 * 
	 */
	@Test
	public void testAssign() {

		final long seed = SEED_PROVIDER.getSeedValue(4);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {

			double x1 = randomGenerator.nextDouble() * 1000 - 500;
			double y1 = randomGenerator.nextDouble() * 1000 - 500;
			double z1 = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v1 = new Vector3D(x1, y1, z1);

			double x2 = randomGenerator.nextDouble() * 1000 - 500;
			double y2 = randomGenerator.nextDouble() * 1000 - 500;
			double z2 = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v2 = new Vector3D(x2, y2, z2);
			v2.assign(v1);

			assertEquals(x1, v2.getX(), TOLERANCE);
			assertEquals(y1, v2.getY(), TOLERANCE);
			assertEquals(z1, v2.getZ(), TOLERANCE);

			double x3 = randomGenerator.nextDouble() * 1000 - 500;
			double y3 = randomGenerator.nextDouble() * 1000 - 500;
			double z3 = randomGenerator.nextDouble() * 1000 - 500;

			v2.assign(x3, y3, z3);

			assertEquals(x3, v2.getX(), TOLERANCE);
			assertEquals(y3, v2.getY(), TOLERANCE);
			assertEquals(z3, v2.getZ(), TOLERANCE);

		}
	}

	/**
	 * Tests {@linkplain Vector3D#cross(Vector3D)}
	 */
	@Test
	public void testCross() {

		final long seed = SEED_PROVIDER.getSeedValue(5);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {

			double x1 = randomGenerator.nextDouble() * 1000 - 500;
			double y1 = randomGenerator.nextDouble() * 1000 - 500;
			double z1 = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v1 = new Vector3D(x1, y1, z1);

			double x2 = randomGenerator.nextDouble() * 1000 - 500;
			double y2 = randomGenerator.nextDouble() * 1000 - 500;
			double z2 = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v2 = new Vector3D(x2, y2, z2);
			v2.cross(v1);

			double x3 = y2 * z1 - y1 * z2;
			double y3 = x1 * z2 - x2 * z1;
			double z3 = x2 * y1 - x1 * y2;

			assertEquals(x3, v2.getX(), TOLERANCE);
			assertEquals(y3, v2.getY(), TOLERANCE);
			assertEquals(z3, v2.getZ(), TOLERANCE);

		}
	}

	/**
	 * Tests {@linkplain Vector3D#distanceTo(Vector3D)}
	 */
	@Test
	public void testDistanceTo() {

		final long seed = SEED_PROVIDER.getSeedValue(6);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {

			double x1 = randomGenerator.nextDouble() * 1000 - 500;
			double y1 = randomGenerator.nextDouble() * 1000 - 500;
			double z1 = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v1 = new Vector3D(x1, y1, z1);

			double x2 = randomGenerator.nextDouble() * 1000 - 500;
			double y2 = randomGenerator.nextDouble() * 1000 - 500;
			double z2 = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v2 = new Vector3D(x2, y2, z2);

			double expected = FastMath.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2));

			double actual = v2.distanceTo(v1);

			assertEquals(expected, actual, TOLERANCE);

		}
	}

	/**
	 * Tests {@linkplain Vector3D#dot(Vector3D)}
	 */
	@Test
	public void testDot() {

		final long seed = SEED_PROVIDER.getSeedValue(7);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {

			double x1 = randomGenerator.nextDouble() * 1000 - 500;
			double y1 = randomGenerator.nextDouble() * 1000 - 500;
			double z1 = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v1 = new Vector3D(x1, y1, z1);

			double x2 = randomGenerator.nextDouble() * 1000 - 500;
			double y2 = randomGenerator.nextDouble() * 1000 - 500;
			double z2 = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v2 = new Vector3D(x2, y2, z2);

			double expected = x1 * x2 + y1 * y2 + z1 * z2;

			double actual = v2.dot(v1);

			assertEquals(expected, actual, TOLERANCE);

		}
	}

	/**
	 * Tests {@linkplain Vector3D#zero()}
	 */
	@Test
	public void testZero() {

		final long seed = SEED_PROVIDER.getSeedValue(8);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {

			double x = randomGenerator.nextDouble() * 1000 - 500;
			double y = randomGenerator.nextDouble() * 1000 - 500;
			double z = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v = new Vector3D(x, y, z);

			assertEquals(x, v.getX(), 0);
			assertEquals(y, v.getY(), 0);
			assertEquals(z, v.getZ(), 0);

			v.zero();

			assertEquals(0, v.getX(), 0);
			assertEquals(0, v.getY(), 0);
			assertEquals(0, v.getZ(), 0);

		}
	}

	/**
	 * Tests {@linkplain Vector3D#get(int)}
	 */
	@Test
	public void testGet() {

		final long seed = SEED_PROVIDER.getSeedValue(9);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {

			double x = randomGenerator.nextDouble() * 1000 - 500;
			double y = randomGenerator.nextDouble() * 1000 - 500;
			double z = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v = new Vector3D(x, y, z);

			assertEquals(x, v.get(0), 0);
			assertEquals(y, v.get(1), 0);
			assertEquals(z, v.get(2), 0);

		}
	}

	/**
	 * Tests {@linkplain Vector3D#getX()}
	 */
	@Test
	public void testGetX() {

		final long seed = SEED_PROVIDER.getSeedValue(12);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {

			double x = randomGenerator.nextDouble() * 1000 - 500;
			double y = randomGenerator.nextDouble() * 1000 - 500;
			double z = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v = new Vector3D(x, y, z);

			assertEquals(x, v.getX(), 0);
		}
	}

	/**
	 * Tests {@linkplain Vector3D#getY()}
	 */
	@Test
	public void testGetY() {

		final long seed = SEED_PROVIDER.getSeedValue(10);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {

			double x = randomGenerator.nextDouble() * 1000 - 500;
			double y = randomGenerator.nextDouble() * 1000 - 500;
			double z = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v = new Vector3D(x, y, z);

			assertEquals(y, v.getY(), 0);
		}
	}

	/**
	 * Tests {@linkplain Vector3D#getZ()}
	 */
	@Test
	public void testGetZ() {

		final long seed = SEED_PROVIDER.getSeedValue(11);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {

			double x = randomGenerator.nextDouble() * 1000 - 500;
			double y = randomGenerator.nextDouble() * 1000 - 500;
			double z = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v = new Vector3D(x, y, z);

			assertEquals(z, v.getZ(), 0);
		}
	}

	/**
	 * Tests {@linkplain Vector3D#scale(double)}
	 */
	@Test
	public void testScale() {

		final long seed = SEED_PROVIDER.getSeedValue(13);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {

			double x = randomGenerator.nextDouble() * 1000 - 500;
			double y = randomGenerator.nextDouble() * 1000 - 500;
			double z = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v = new Vector3D(x, y, z);
			double scalar = randomGenerator.nextDouble() * 1000 - 500;

			v.scale(scalar);

			assertEquals(x * scalar, v.getX(), 0);
			assertEquals(y * scalar, v.getY(), 0);
			assertEquals(z * scalar, v.getZ(), 0);
		}
	}

	/**
	 * Tests {@linkplain Vector3D#setX(double)}
	 */
	@Test
	public void testSetX() {

		final long seed = SEED_PROVIDER.getSeedValue(14);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {

			double x = randomGenerator.nextDouble() * 1000 - 500;
			double y = randomGenerator.nextDouble() * 1000 - 500;
			double z = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v = new Vector3D(x, y, z);

			double newX = randomGenerator.nextDouble() * 1000 - 500;

			v.setX(newX);

			assertEquals(newX, v.getX(), 0);
			assertEquals(y, v.getY(), 0);
			assertEquals(z, v.getZ(), 0);
		}
	}

	/**
	 * Tests {@linkplain Vector3D#setY(double)}
	 */
	@Test
	public void testSetY() {

		final long seed = SEED_PROVIDER.getSeedValue(15);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {

			double x = randomGenerator.nextDouble() * 1000 - 500;
			double y = randomGenerator.nextDouble() * 1000 - 500;
			double z = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v = new Vector3D(x, y, z);

			double newY = randomGenerator.nextDouble() * 1000 - 500;

			v.setY(newY);

			assertEquals(x, v.getX(), 0);
			assertEquals(newY, v.getY(), 0);
			assertEquals(z, v.getZ(), 0);

		}
	}

	/**
	 * Tests {@linkplain Vector3D#setZ(double)}
	 */
	@Test
	public void testSetZ() {

		final long seed = SEED_PROVIDER.getSeedValue(16);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {

			double x = randomGenerator.nextDouble() * 1000 - 500;
			double y = randomGenerator.nextDouble() * 1000 - 500;
			double z = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v = new Vector3D(x, y, z);

			double newZ = randomGenerator.nextDouble() * 1000 - 500;

			v.setZ(newZ);

			assertEquals(x, v.getX(), 0);
			assertEquals(y, v.getY(), 0);
			assertEquals(newZ, v.getZ(), 0);

		}
	}

	/**
	 * Tests {@linkplain Vector3D#sub(Vector3D)} Tests
	 * {@linkplain Vector3D#sub(double, double, double)}
	 */
	@Test
	public void testSub() {

		final long seed = SEED_PROVIDER.getSeedValue(17);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {
			double x1 = randomGenerator.nextDouble() * 1000 - 500;
			double y1 = randomGenerator.nextDouble() * 1000 - 500;
			double z1 = randomGenerator.nextDouble() * 1000 - 500;
			Vector3D v1 = new Vector3D(x1, y1, z1);

			double x2 = randomGenerator.nextDouble() * 1000 - 500;
			double y2 = randomGenerator.nextDouble() * 1000 - 500;
			double z2 = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v2 = new Vector3D(x2, y2, z2);

			v1.sub(v2);

			assertEquals(x1 - x2, v1.getX(), 0);
			assertEquals(y1 - y2, v1.getY(), 0);
			assertEquals(z1 - z2, v1.getZ(), 0);

			v1 = new Vector3D(x1, y1, z1);
			v1.sub(x2, y2, z2);

			assertEquals(x1 - x2, v1.getX(), 0);
			assertEquals(y1 - y2, v1.getY(), 0);
			assertEquals(z1 - z2, v1.getZ(), 0);

		}
	}

	/**
	 * Tests {@linkplain Vector3D#isInfinite()}
	 * 
	 */
	@Test
	public void testIsInfinite() {

		final long seed = SEED_PROVIDER.getSeedValue(18);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {
			double x = randomGenerator.nextDouble() * 1000 - 500;
			double y = randomGenerator.nextDouble() * 1000 - 500;
			double z = randomGenerator.nextDouble() * 1000 - 500;
			Vector3D v = new Vector3D();

			v.assign(x, y, z);
			assertFalse(v.isInfinite());
			v.setX(Double.POSITIVE_INFINITY);
			assertTrue(v.isInfinite());

			v.assign(x, y, z);
			assertFalse(v.isInfinite());
			v.setX(Double.NEGATIVE_INFINITY);
			assertTrue(v.isInfinite());

			v.assign(x, y, z);
			assertFalse(v.isInfinite());
			v.setY(Double.POSITIVE_INFINITY);
			assertTrue(v.isInfinite());

			v.assign(x, y, z);
			assertFalse(v.isInfinite());
			v.setY(Double.NEGATIVE_INFINITY);
			assertTrue(v.isInfinite());

			v.assign(x, y, z);
			assertFalse(v.isInfinite());
			v.setZ(Double.POSITIVE_INFINITY);
			assertTrue(v.isInfinite());

			v.assign(x, y, z);
			assertFalse(v.isInfinite());
			v.setZ(Double.NEGATIVE_INFINITY);
			assertTrue(v.isInfinite());

		}
	}

	/**
	 * Tests {@linkplain Vector3D#isNaN()}
	 * 
	 */
	@Test
	public void testIsNaN() {

		final long seed = SEED_PROVIDER.getSeedValue(19);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {
			double x = randomGenerator.nextDouble() * 1000 - 500;
			double y = randomGenerator.nextDouble() * 1000 - 500;
			double z = randomGenerator.nextDouble() * 1000 - 500;
			Vector3D v = new Vector3D();

			v.assign(x, y, z);
			assertFalse(v.isNaN());
			v.setX(Double.NaN);
			assertTrue(v.isNaN());

			v.assign(x, y, z);
			assertFalse(v.isNaN());
			v.setY(Double.NaN);
			assertTrue(v.isNaN());

			v.assign(x, y, z);
			assertFalse(v.isNaN());
			v.setZ(Double.NaN);
			assertTrue(v.isNaN());

		}
	}

	/**
	 * Tests {@linkplain Vector3D#isRealValued()}
	 * 
	 */
	@Test
	public void testIsRealValued() {

		final long seed = SEED_PROVIDER.getSeedValue(20);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {
			double x = randomGenerator.nextDouble() * 1000 - 500;
			double y = randomGenerator.nextDouble() * 1000 - 500;
			double z = randomGenerator.nextDouble() * 1000 - 500;
			Vector3D v = new Vector3D();

			v.assign(x, y, z);
			assertTrue(v.isRealValued());
			v.setX(Double.NaN);
			assertFalse(v.isRealValued());

			v.assign(x, y, z);
			assertTrue(v.isRealValued());
			v.setX(Double.NEGATIVE_INFINITY);
			assertFalse(v.isRealValued());

			v.assign(x, y, z);
			assertTrue(v.isRealValued());
			v.setX(Double.POSITIVE_INFINITY);
			assertFalse(v.isRealValued());

			v.assign(x, y, z);
			assertTrue(v.isRealValued());
			v.setY(Double.NaN);
			assertFalse(v.isRealValued());

			v.assign(x, y, z);
			assertTrue(v.isRealValued());
			v.setY(Double.NEGATIVE_INFINITY);
			assertFalse(v.isRealValued());

			v.assign(x, y, z);
			assertTrue(v.isRealValued());
			v.setY(Double.POSITIVE_INFINITY);
			assertFalse(v.isRealValued());

			v.assign(x, y, z);
			assertTrue(v.isRealValued());
			v.setZ(Double.NaN);
			assertFalse(v.isRealValued());

			v.assign(x, y, z);
			assertTrue(v.isRealValued());
			v.setZ(Double.NEGATIVE_INFINITY);
			assertFalse(v.isRealValued());

			v.assign(x, y, z);
			assertTrue(v.isRealValued());
			v.setZ(Double.POSITIVE_INFINITY);
			assertFalse(v.isRealValued());

		}
	}

	/**
	 * Tests {@linkplain Vector3D#squareDistanceTo(Vector3D)}
	 */
	@Test
	public void testSquareDistanceTo() {

		final long seed = SEED_PROVIDER.getSeedValue(21);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {

			double x1 = randomGenerator.nextDouble() * 1000 - 500;
			double y1 = randomGenerator.nextDouble() * 1000 - 500;
			double z1 = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v1 = new Vector3D(x1, y1, z1);

			double x2 = randomGenerator.nextDouble() * 1000 - 500;
			double y2 = randomGenerator.nextDouble() * 1000 - 500;
			double z2 = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v2 = new Vector3D(x2, y2, z2);

			double expected = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);

			double actual = v2.squareDistanceTo(v1);

			assertEquals(expected, actual, 0);

		}
	}

	/**
	 * Tests {@linkplain Vector3D#reverse()}
	 */
	@Test
	public void testReverse() {

		final long seed = SEED_PROVIDER.getSeedValue(22);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {

			double x = randomGenerator.nextDouble() * 1000 - 500;
			double y = randomGenerator.nextDouble() * 1000 - 500;
			double z = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v = new Vector3D(x, y, z);
			v.reverse();

			assertEquals(-x, v.getX(), 0);
			assertEquals(-y, v.getY(), 0);
			assertEquals(-z, v.getZ(), 0);
		}
	}

	/**
	 * Tests {@linkplain Vector3D#length()}
	 */
	@Test
	public void testLength() {

		final long seed = SEED_PROVIDER.getSeedValue(23);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {

			double x = randomGenerator.nextDouble() * 1000 - 500;
			double y = randomGenerator.nextDouble() * 1000 - 500;
			double z = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v = new Vector3D(x, y, z);
			double expectedLength = FastMath.sqrt(x * x + y * y + z * z);
			double actualLength = v.length();

			assertEquals(expectedLength, actualLength, TOLERANCE);
		}
	}

	/**
	 * Tests {@linkplain Vector3D#squareLength()}
	 */
	@Test
	public void testSquareLength() {

		final long seed = SEED_PROVIDER.getSeedValue(24);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {

			double x = randomGenerator.nextDouble() * 1000 - 500;
			double y = randomGenerator.nextDouble() * 1000 - 500;
			double z = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v = new Vector3D(x, y, z);
			double expectedLength = x * x + y * y + z * z;
			double actualLength = v.squareLength();

			assertEquals(expectedLength, actualLength, 0);
		}
	}

	/**
	 * Tests {@linkplain Vector3D#toArray()}
	 */
	@Test
	public void testToArray() {

		final long seed = SEED_PROVIDER.getSeedValue(25);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {

			double x = randomGenerator.nextDouble() * 1000 - 500;
			double y = randomGenerator.nextDouble() * 1000 - 500;
			double z = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v = new Vector3D(x, y, z);
			double[] array = v.toArray();

			assertEquals(v.getX(), array[0], 0);
			assertEquals(v.getY(), array[1], 0);
			assertEquals(v.getZ(), array[2], 0);
		}
	}

	/**
	 * Tests {@linkplain Vector3D#normalize()}
	 */
	@Test
	public void testNormalize() {

		final long seed = SEED_PROVIDER.getSeedValue(26);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {

			double x = randomGenerator.nextDouble() * 1000 - 500;
			double y = randomGenerator.nextDouble() * 1000 - 500;
			double z = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v = new Vector3D(x, y, z);
			v.normalize();

			assertEquals(1, v.length(), TOLERANCE);

		}
	}

	/**
	 * Tests {@linkplain Vector3D#equals()}
	 */
	@Test
	public void testEquals() {

		final long seed = SEED_PROVIDER.getSeedValue(27);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {

			double x = randomGenerator.nextDouble() * 1000 - 500;
			double y = randomGenerator.nextDouble() * 1000 - 500;
			double z = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v1 = new Vector3D(x, y, z);

			Vector3D v2 = new Vector3D(x, y, z);

			Vector3D v3 = new Vector3D(x, y, z);

			// reflexive
			assertEquals(v1, v1);

			// symetric
			assertEquals(v1, v2);
			assertEquals(v2, v1);

			// transitive
			assertEquals(v1, v2);
			assertEquals(v2, v3);
			assertEquals(v3, v1);

		}
	}

	/**
	 * Tests {@linkplain Vector3D#hashCode()}
	 */
	@Test
	public void testHashCode() {

		final long seed = SEED_PROVIDER.getSeedValue(28);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {

			double x = randomGenerator.nextDouble() * 1000 - 500;
			double y = randomGenerator.nextDouble() * 1000 - 500;
			double z = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v1 = new Vector3D(x, y, z);

			Vector3D v2 = new Vector3D(x, y, z);

			assertEquals(v1.hashCode(), v2.hashCode());

		}
	}

	/**
	 * Tests {@linkplain Vector3D#toString()}
	 */
	@Test
	public void testToString() {

		final long seed = SEED_PROVIDER.getSeedValue(29);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {

			double x = randomGenerator.nextDouble() * 1000 - 500;
			double y = randomGenerator.nextDouble() * 1000 - 500;
			double z = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v = new Vector3D(x, y, z);

			String expected = "Vector3D [x=" + x + ", y=" + y + ", z=" + z + "]";

			String actual = v.toString();

			assertEquals(expected, actual);
		}
	}

	/**
	 * Tests {@linkplain Vector3D#rotateAbout(Vector3D, double)}
	 */
	@Test
	public void testRotateAbout() {

		final long seed = SEED_PROVIDER.getSeedValue(30);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {

			//v1 will be used as a rotator, so we ensure that it has a reasonable length
			Vector3D v1 = new Vector3D();
			while (v1.length() < 0.0000001) {
				double x1 = randomGenerator.nextDouble() * 1000 - 500;
				double y1 = randomGenerator.nextDouble() * 1000 - 500;
				double z1 = randomGenerator.nextDouble() * 1000 - 500;
				v1 = new Vector3D(x1, y1, z1);
			}
			

			double x2 = randomGenerator.nextDouble() * 1000 - 500;
			double y2 = randomGenerator.nextDouble() * 1000 - 500;
			double z2 = randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v2 = new Vector3D(x2, y2, z2);

			double theta = randomGenerator.nextDouble() * 2 * FastMath.PI;

			Vector3D v = new Vector3D(v2);

			v.rotateAbout(v1, theta);

			// v2 under rotation should have its length preserved
			assertEquals(v2.length(), v.length(), TOLERANCE);

			// v2 under rotation should have its angle to v1 preserved
			assertEquals(v2.angle(v1), v.angle(v1), TOLERANCE);

			// v2 when rotated back should return to its original position
			v.rotateAbout(v1, -theta);
			assertEquals(v2.getX(), v.getX(), TOLERANCE);
			assertEquals(v2.getY(), v.getY(), TOLERANCE);
			assertEquals(v2.getZ(), v.getZ(), TOLERANCE);

		}
	}
	
	/**
	 * Tests {@linkplain Vector3D#rotateToward(Vector3D, double)}
	 */
	@Test
	public void testRotateToward() {

		final long seed = SEED_PROVIDER.getSeedValue(31);
		RandomGenerator randomGenerator = getRandomGenerator(seed);

		for (int i = 0; i < 100; i++) {
			

			//v1 will be used as a rotator, so we ensure that it has a reasonable length
			Vector3D v1 = new Vector3D();
			while (v1.length() < 0.0000001) {
				double x1 = randomGenerator.nextDouble() * 1000 - 500;
				double y1 = randomGenerator.nextDouble() * 1000 - 500;
				double z1 = randomGenerator.nextDouble() * 1000 - 500;
				v1 = new Vector3D(x1, y1, z1);
			}
			

			double x2 =  randomGenerator.nextDouble() * 1000 - 500;
			double y2 =  randomGenerator.nextDouble() * 1000 - 500;
			double z2 =  randomGenerator.nextDouble() * 1000 - 500;

			Vector3D v2 = new Vector3D(x2, y2, z2);

			double theta = randomGenerator.nextDouble() * 2 * FastMath.PI;

			Vector3D v = new Vector3D(v2);

			v.rotateToward(v1, theta);
			double angle = v1.angle(v2);

			// v2 under rotation should have its length preserved
			assertEquals(v2.length(), v.length(), TOLERANCE);

			// v2 under rotation should have its angle to v1 changed by theta
			double expectedAngle  = theta-angle;
			while (expectedAngle<0){
				expectedAngle+=FastMath.PI*2;
			}
			while (expectedAngle>2*FastMath.PI){
				expectedAngle-=2*FastMath.PI;
			}
			while (expectedAngle>FastMath.PI){
				expectedAngle = 2*FastMath.PI-expectedAngle;
			}
			
			double actualAngle = v.angle(v1);
			
			assertEquals(expectedAngle, actualAngle, TOLERANCE);

			// v2 when rotated back should return to its original position
			Vector3D a = new Vector3D(v2);
			a.cross(v1);
			
			Vector3D b = new Vector3D(v);
			b.cross(v1);

			if(a.dot(b)>0) {
				v.rotateToward(v1, -theta);	
			}else {
				v.rotateToward(v1, theta);
			}
			
			assertEquals(v2.getX(), v.getX(), TOLERANCE);
			assertEquals(v2.getY(), v.getY(), TOLERANCE);
			assertEquals(v2.getZ(), v.getZ(), TOLERANCE);

		}
	}
	
}
