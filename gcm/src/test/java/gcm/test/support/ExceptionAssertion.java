package gcm.test.support;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import gcm.scenario.ScenarioException;
import gcm.scenario.ScenarioException.ScenarioErrorType;
import gcm.simulation.ModelException;
import gcm.simulation.SimulationErrorType;


/**
 * A utility class for asserting that a specific Exception Class or one of its
 * descendants is thrown when the given ExceptionGenerator's generateException()
 * is invoked.
 * 
 * 
 * Example use with Lambda Expression:
 * 
 * assertException(() -> new DoubleValueContainer(0, -1),
 * NegativeArraySizeException.class);
 * 
 * @author Shawn Hatch
 *
 */
public class ExceptionAssertion {
	/**
	 * Functional Interface to define the behavior of throwing an Exception
	 */
	public static interface ExceptionGenerator {
		public void generateException() throws Exception;
	}

	/**
	 * Asserts that the given ExceptionGenerator will generate an exception of
	 * the given class(or descendant). Invokes org.junit.Assert.fail() if:
	 * 
	 * <li>the exceptionGenerator is null
	 * <li>the exceptionClass is null
	 * <li>no exception is generated by the invocation of the the
	 * exceptionGenerator
	 * <li>the generated exception is not a descendant type of the exception
	 * class
	 * 
	 * @param exceptionGenerator
	 * @param exceptionClass
	 */
	public static void assertException(final ExceptionGenerator exceptionGenerator, Class<? extends Exception> exceptionClass) {
		if (exceptionGenerator == null) {
			fail("Failed to exception generator instance");
		}
		if (exceptionClass == null) {
			fail("Failed to supply exception class instance");
		}
		try {
			exceptionGenerator.generateException();
		} catch (final Exception e) {
			assertTrue("Expected Exception class " + exceptionClass.getName() + " observed Exception class " + e.getClass().getName(), exceptionClass.isAssignableFrom(e.getClass()));
			return;
		}
		fail("Failed to throw exception of type " + exceptionClass);
	}

	public static void assertModelException(final ExceptionGenerator exceptionGenerator, SimulationErrorType simulationErrorType) {
		if (exceptionGenerator == null) {
			fail("Failed to exception generator instance");
		}
		
		if (simulationErrorType == null) {
			fail("Failed to supply non-null ErrorType");
		}
		
		try {
			exceptionGenerator.generateException();
		} catch (ModelException modelException) {			
			if(!simulationErrorType.equals(modelException.getErrorType())) {
				fail("Expected ModelException with ErrorType = "+simulationErrorType+" but actual ErrorType = "+modelException.getErrorType()+" "+modelException.getMessage());
			}
			return;
		} catch (Exception e) {
			e.printStackTrace();
			fail("Expected Exception class " + ModelException.class.getName() + " observed Exception class " + e.getClass().getName()+" with error "+e.getMessage());
		}
		
		fail("Failed to throw ModelException");
	}
	
	
	public static void assertScenarioException(final ExceptionGenerator exceptionGenerator, ScenarioErrorType scenarioErrorType) {
		if (exceptionGenerator == null) {
			fail("Failed to exception generator instance");
		}
		
		if (scenarioErrorType == null) {
			fail("Failed to supply non-null ErrorType");
		}
		
		try {
			exceptionGenerator.generateException();
		} catch (ScenarioException scenarioException) {			
			if(!scenarioErrorType.equals(scenarioException.getScenarioErrorType())) {
				fail("Expected ScenarioException with ErrorType = "+scenarioErrorType+" but actual ErrorType = "+scenarioException.getScenarioErrorType()+" "+scenarioException.getMessage());
			}
			return;
		} catch (Exception e) {
			e.printStackTrace();
			fail("Expected Exception class " + ScenarioException.class.getName() + " observed Exception class " + e.getClass().getName()+" with error "+e.getMessage());
		}
		
		fail("Failed to throw ScenarioException");
	}
	
	
}